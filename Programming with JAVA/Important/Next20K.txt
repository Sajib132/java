Demonstration
bounded

	<theory> In {domain theory}, a subset S of a {cpo} X is
	bounded if there exists x in X such that for all s in S, s <=
	x.  In other words, there is some element above all of S.  If
	every bounded subset of X has a least upper bound then X is
	boundedly {complete}.

	("<=" is written in {LaTeX} as {\subseteq}).

	(1995-02-03)

boundedly complete

	<theory> (Or "consistently complete") In {domain theory}, a
	{complete partial order} is boundedly complete if every {bounded}
	{subset} has a {least upper bound}.

	(2014-07-01)

bound variable

	1. A bound variable or {formal argument} in a function
	definition is replaced by the {actual argument} when the
	function is applied.  In the {lambda abstraction}

		\ x . M

	x is the bound variable.  However, x is a {free variable} of
	the term M when M is considered on its own.  M is the {scope}
	of the binding of x.

	2. In logic a bound variable is a quantified variable.  See
	{quantifier}.

bournebasic

	A {BASIC} {interpreter}.

	comp.sources.misc archives volume 1.

Bourne shell

	(sh, Shellish).  The original {command-line interpreter}
	{shell} and script language for {Unix} written by S.R. Bourne
	of {Bell Laboratories} in 1978.  sh has been superseded for
	interactive use by the {Berkeley} {C shell}, {csh} but still
	widely used for writing {shell scripts}.

	There were even earlier shells, see {glob}.  [Details?]

	{ash} is a Bourne Shell clone.

	["Unix {Time-Sharing} System: The Unix Shell", S.R. Bourne,
	Bell Sys Tech J 57(6):1971-1990 (Jul 1978)].

boustrophedonic

	<hardware> (From the Greek "boustrophe-don": turning like oxen
	in plowing; from "bous": ox, cow; "strephein": to turn) An
	ancient method of writing using alternate left-to-right and
	right-to-left lines.  It used for an optimisation performed by
	some computer typesetting software and moving-head printers to
	reduce physical movement of the print head.  The adverbial
	form "boustrophedonically" is also found.

	(1994-11-29)

box

	<computer> 1. A computer; especially in the construction "foo
	box" where foo is some functional qualifier, like "graphics",
	or the name of an {operating system} (thus, "{Unix} box",
	"{MS-DOS} box", etc.)  "We preprocess the data on Unix boxes
	before handing it up to the {mainframe}."  The plural
	"{boxen}" is sometimes seen.

	2. Without qualification in an {IBM} {SNA} site, "box" refers
	specifically to an {IBM} {front-end processor}.

	[{Jargon File}]

	(1994-11-29)

boxed comments

	<programming> {Comments} that occupy several lines by
	themselves; so called because in {assembler} and {C} code they
	are often surrounded by a box in a style similar to this:

	 /*************************************************
	 *
	 * This is a boxed comment in C style
	 *
	 *************************************************/

	Common variants of this style omit the asterisks in column 2
	or add a matching row of asterisks closing the right side of
	the box.  The sparest variant omits all but the comment
	{delimiters} themselves; the "box" is implied.

	Opposite of {winged comments}.

	[{Jargon File}]

	(1997-07-21)

boxen

	/bok'sn/ (By analogy with {VAXen}) A fanciful plural of {box}
	often encountered in the phrase "Unix boxen", used to describe
	commodity {Unix} hardware.  The connotation is that any two
	Unix boxen are interchangeable.

	[{Jargon File}]

	(1994-11-29)

Boxer

	1. <language> A {visual language} by Hal Abelson and Andy
	diSessa of Berkeley which claims to be the successor to
	{Logo}.  Boxes are used to represent {scope}.

	2. <tool> A {text editor} for {MS-DOS} and {Microsoft
	Windows}.

	{(http://boxersoftware.com/users/dhamel)}.

	(2001-04-30)

boxology

	<graphics> /bok-sol'*-jee/ {ASCII art}.

	This term implies a more restricted domain, that of
	box-and-arrow drawings.  "His report has a lot of boxology in
	it."

	Compare {macrology}.

	[{Jargon File}]

	(1994-12-02)

Boycott Apple

	<legal> Some time before 1989, {Apple Computer, Inc.} started a
	lawsuit against {Hewlett-Packard} and {Microsoft}, claiming they
	had breeched Apple's {copyright} on the {look and feel} of the
	{Macintosh user interface}.  In December 1989, {Xerox} failed to
	sue {Apple Computer}, claiming that the software for Apple's
	{Lisa} computer and {Macintosh} {Finder}, both copyrighted in
	1987, were derived from two {Xerox} programs: {Smalltalk},
	developed in the mid-1970s and {Star}, copyrighted in 1981.

	Apple wanted to stop people from writing any program that
	worked even vaguely like a {Macintosh}.  If such {look and
	feel} lawsuits succeed they could put an end to {free
	software} that could substitute for commercial software.

	In the weeks after the suit was filed, {Usenet} reverberated with
	condemnation for Apple.  {GNU} supporters {Richard Stallman},
	{John Gilmore} and Paul Rubin decided to take action against
	Apple.  Apple's reputation as a force for progress came from
	having made better computers; but The {League for Programming
	Freedom} believed that Apple wanted to make all non-Apple
	computers worse.  They therefore campaigned to discourage people
	from using Apple products or working for Apple or any other
	company threatening similar obstructionist tactics (e.g. {Lotus}
	and {Xerox}).

	Because of this boycott the {Free Software Foundation} for a
	long time didn't support {Macintosh} {Unix} in their software.
	In 1995, the LPF and the FSF decided to end the boycott.

	[Dates?  Other events?  Why did Xerox's case against Apple
	fail?]

	(1995-04-18)

bozotic

	<abuse> (From Bozo the Clown, a famous circus personality, via
	"bozo" - a clod, idiot or generally silly person) any form of
	clown-like or ludicrous behaviour.  The word also has echoes
	of "robotic", so bozotic behaviour is mindless, automaton-like
	stupidity.

	[{Jargon File}]

	(1996-01-05)

BPEL

	{Web Services Business Process Execution Language}

BPI

	{bits per inch}

bpmake

	{Aspirin}

bpp

	{bits per pixel}

BPR

	{Business Process Re-engineering}

BPS

	{Basic Programming Support}

bps

	{bits per second}

BQS

	{Berkeley Quality Software}

br

	<networking> The {country code} for Brazil.

	(1999-01-27)

brace

	<character> {left brace} or {right brace}.

bracket

	<character> (Or square bracket) A {left bracket} or {right
	bracket}.

	Often used loosely for {parentheses}, {square brackets},
	{braces}, {angle brackets}, or any other kind of unequal
	paired {delimiters}.

	(1996-09-08)

bracket abstraction

	<compiler> An {algorithm} which turns a term into a function
	of some variable.  The result of using bracket abstraction on
	T with respect to variable v, written as [v]T, is a term
	containing no occurrences of v and denoting a function f such
	that f v = T.  This defines the function f = (\ v . T).  Using
	bracket abstraction and {currying} we can define a language
	without {bound variables} in which the only operation is
	{monadic} function application.

	See {combinator}.

	(1995-03-07)

braille

	<human language> /breyl/ (Often capitalised) A class of
	{writing systems}, intended for use by blind and low-vision
	users, which express {glyphs} as raised dots.  Currently
	employed braille standards use eight dots per cell, where a
	cell is a glyph-space two dots across by four dots high; most
	glyphs use only the top six dots.

	Braille was developed by Louis Braille (pronounced /looy
	bray/) in France in the 1820s.  Braille systems for most
	languages can be fairly trivially converted to and from the
	usual script.

	Braille has several totally coincidental parallels with
	digital computing: it is {binary}, it is based on groups of
	eight bits/dots and its development began in the 1820s, at the
	same time {Charles Babbage} proposed the {Difference Engine}.

	Computers output Braille on {braille displays} and {braille
	printers} for hard copy.

	{British Royal National Institute for the Blind
	(http://rnib.org.uk/wesupply/fctsheet/braille.htm)}.

	(1998-10-19)

braille display

	<hardware> (Or "refreshable braille display", "refreshable
	display") An electromechanical device that renders {braille}
	with tiny, independently controlled pins used to represent the
	state of dots in braille cells.  Each pin, in its "on" state,
	raises above the top of its hole in the screen; in its "off"
	state, it drops below the top of its hole.  Older systems used
	tiny solenoids to control the state of the pins; modern
	systems are {piezoelectric}.

	Typical dimensions of a braille display are 1 line of 40
	cells, each cell of two-by-eight dots.

	(1998-10-19)

Braille embosser

	{Braille printer}

Braille printer

	<printer> (Or "(Braille) embosser") A {printer}, necessarily
	an {impact printer}, that renders text as {Braille}.  Blind
	users call other printers {ink printers}.

	(1999-02-26)

Brain Aid Prolog

	<language> (BAP) A parallel {Prolog} environment for
	{transputer} systems by Frank Bergmann <fraber@fraber.de>,
	Martin Ostermann <ost@xan.dfv.rwth-aachen.de>, and Guido von
	Walter <guido@parsytec.de> of {Brain Aid Systems} GbR.  BAP is
	based on a model of communicating sequential Prolog processes.
	The {run-time system} consists of a multi-process {operating
	system} with support for several applications running
	concurrently.

	{(http://fraber.de/bap/)}.

	(2002-11-12)

brain-damaged

	1. [generalisation of "Honeywell Brain Damage" (HBD), a
	theoretical disease invented to explain certain utter
	cretinisms in Honeywell {Multics}] Obviously wrong; cretinous;
	{demented}.

	There is an implication that the person responsible must have
	suffered brain damage, because he should have known better.
	Calling something brain-damaged is really bad; it also implies
	it is unusable, and that its failure to work is due to poor
	design rather than some accident.  "Only six monocase
	characters per file name?  Now *that's* brain-damaged!"

	2. [especially in the Mac world] May refer to free
	demonstration software that has been deliberately crippled in
	some way so as not to compete with the commercial product it
	is intended to sell.  Synonym {crippleware}.

	[{Jargon File}]

	(2011-01-04)

brain-dead

	Brain-damaged in the extreme.  It tends to imply terminal
	design failure rather than malfunction or simple stupidity.

brain dump

	(The act of telling someone) everything one knows about a
	particular topic.  Typically used when someone is going to let
	a new party maintain a piece of code.  Conceptually analogous
	to an operating system {core dump} in that it saves a lot of
	useful {state} before an exit.  "You'll have to give me a
	brain dump on FOOBAR before you start your new job at
	HackerCorp."  At Sun, this is also known as "TOI" (transfer of
	information).

	[{Jargon File}]

brain fart

	<jargon, humour> 1. The actual result of a {braino}, as
	opposed to the mental {glitch} that is the braino itself.
	E.g. typing "dir" on a {Unix box} after a session with
	{MS-DOS}.

	2. A biproduct of a bloated mind producing information
	effortlessly.  A burst of useful information. "I know you're
	busy on the Microsoft story, but can you give us a brain fart
	on the Mitnik bust?"

	(1997-04-29)

Brainfuck

	<language> An eight-instruction {esoteric programming language}
	created by Urban MÃ¼ller.  His goal was apparently to create a
	{Turing-complete} language with the smallest {compiler} ever, for
	the {Amiga OS} 2.0.  He eventually reduced his compiler to under
	200 bytes.

	A Brainfuck program has a pointer that moves within an array
	of 30000 bytes, initially all set to zero.  The pointer
	initially points to the beginning of this array.  The language
	has eight commands, each of which is represented as a single
	character, and which can be expressed in terms of {C} as
	follows:

	 >   ==>    ++p;
	 <   ==>    --p;
	 +   ==>    ++*p;
	 -   ==>    --*p;
	 .   ==>    putchar(*p);
	 ,   ==>    *p = getchar();
	 [   ==>    while (*p) {
	 ]   ==>    }

	{Brian Raiter's Brainfuck page
	(http://muppetlabs.com/~breadbox/bf/)}.

	(2003-11-18)

braino

	{thinko}

branch

	1. <mathematics> An {edge} in a {tree}.

	2. <programming> A {jump}.

Branch and Hang

	<humour> (BRH) Originally a mythical instruction for the {IBM
	1130} at {Indiana University}.

	Later some real examples were discovered.  The {Texas
	Instruments} {TI-980} allowed all {addressing modes} with all
	instructions, including Store Immediate Extended (stores the
	value into the extension word of the instruction) and Branch
	and Link Immediate (makes a subroutine call to the same
	instruction -- Branch and Hang).

	Compare {HCF}.

	(1997-02-12)

branch coverage testing

	<programming> A test method which aims to ensure that each
	possible branch from each decision point (e.g. "if" statement)
	is executed at least once, thus ensuring that all reachable
	code is executed.

	(1996-05-10)

branch delay slot

	{delayed control-transfer}

Branch on Chip Box Full

	<humour> (BCBF) A mythical {IBM 1130} instruction whose action
	depended on the contents of the {chip box}.  This was one of a
	long list of fake {assembly language} instructions that went
	around {Indiana University} in the 1970s.

	(1997-02-12)

branch prediction

	<processor, algorithm> A technique used in some processors
	with {instruction prefetch} to guess whether a {conditional
	branch} will be taken or not and prefetch code from the
	appropriate location.

	When a branch instruction is executed, its address and that of
	the next instruction executed (the chosen destination of the
	branch) are stored in the {Branch Target Buffer}.  This
	information is used to predict which way the instruction will
	branch the next time it is executed so that instruction
	prefetch can continue.  When the prediction is correct (and it
	is over 90% of the time), executing a branch does not cause a
	{pipeline break}.

	Some later {CPUs} simply prefetch both paths instead of trying
	to predict which way the branch will go.

	An extension of the idea of branch prediction is {speculative
	execution}.

	(1998-03-14)

Branch Target Buffer

	<processor> (BTB) A {register} used to store the predicted
	destination of a branch in a processor using {branch
	prediction}?

	[Is this correct?  Examples?]

	(1995-05-05)

branch to Fishkill

	(IBM: from the location of one of the corporation's
	facilities) Any unexpected jump in a program that produces
	catastrophic or just plain weird results.

	See {jump off into never-never land}, {hyperspace}.

	[{Jargon File}]

Brazil

	An {operating system} from {Acorn Computers} used on an {ARM}
	card which could be fitted to an {IBM PC}.  There was also an
	{ARM} second processor for the {BBC Microcomputer} which used
	Brazil.  Never used on the {Archimedes}(?).

	(1994-12-05)

BRB

	<chat> (I will) be right back.

	(1998-01-18)

breadcrumbs

	(After the story "Hansel and Gretel" by the Brothers Grimm).

	1. <web> {Links} displayed across the top of a {web
	page} listing the most recently visited pages so the reader
	can quickly jump back to one.  Since this function is provided
	by the {web browser}, breadcrumbs are a waste of space.

	A better use of the space is to display links to the page's
	logical parent pages in the information hierarchy.

	2. <programming> Information output by statements inserted
	into a program for {debugging by printf}.

	[{Jargon File}]

	(2007-03-07)

breadth-first search

	<algorithm> A {graph search algorithm} which tries all
	one-step extensions of current paths before trying larger
	extensions.  This requires all current paths to be kept in
	memory simultaneously, or at least their end points.

	Opposite of {depth-first search}.  See also {best first
	search}.

	(1996-01-05)

break

	1. To cause to be {broken}.  "Your latest patch
	to the editor broke the paragraph commands."

	2. (Of a program) To stop temporarily, so that it may
	debugged.  The place where it stops is a "{breakpoint}".

	3. To send an {EIA-232} break (two character widths of line
	high) over a {serial line}.

	4. [Unix] To strike whatever key currently causes the tty
	driver to send SIGINT to the current process.  Normally,
	break, delete or {control-C} does this.

	5. "break break" may be said to interrupt a conversation (this
	is an example of verb doubling).  This usage comes from radio
	communications, which in turn probably came from landline
	telegraph/teleprinter usage, as badly abused in the Citizen's
	Band craze.

	6. {pipeline break}.

	7. {break statement}.

	[{Jargon File}]

	(2004-03-24)

break-even point

	In the process of implementing a new computer language, the
	point at which the language is sufficiently effective that one
	can implement the language in itself.  That is, for a new
	language called, hypothetically, FOOGOL, one has reached
	break-even when one can write a demonstration compiler for
	FOOGOL in FOOGOL, discard the original implementation
	language, and thereafter use working versions of FOOGOL to
	develop newer ones.  This is an important milestone.  See {My
	Favourite Toy Language}.

	[There actually is a language called {Foogol}].

breakpoint

	<programming> A point in a {program} that, when reached, triggers
	some special behavior useful to the process of {debugging};
	generally, breakpoints are used to either pause program
	{execution}, and/or {dump} the values of some or all of the
	program {variables}.  Breakpoints may be part of the program
	itself; or they may be set by the programmer as part of an
	{interactive} session with a {debugging tool} for scrutinizing the
	program's execution.

	(1999-06-07)

break statement

	<programming> A {statement} in the {C} programming language
	that transfers control out of the innermost enclosing
	{switch}, {while}, {do}, or {for} statement.  The statement
	also exists in languages derived from C, such as {C++} and
	{Java}.

	(2004-03-24)

breath-of-life packet

	({XEROX PARC}) An {Ethernet} {packet} that contains
	{bootstrap} code, periodically sent out from a working
	computer to infuse the "breath of life" into any computer on
	the network that has crashed.  Computers depending on such
	packets have sufficient hardware or firmware code to wait for
	(or request) such a packet during the reboot process.

	See also {dickless workstation}.

	The notional "kiss-of-death packet", with a function
	complementary to that of a breath-of-life packet, is
	recommended for dealing with hosts that consume too many
	network resources.  Though "kiss-of-death packet" is usually
	used in jest, there is at least one documented instance of an
	{Internet} subnet with limited address-table slots in a
	gateway computer in which such packets were routinely used to
	compete for slots, rather like Christmas shoppers competing
	for scarce parking spaces.

	[{Jargon File}]

	(1995-01-26)

breedle

	{feep}

BRH

	{Branch and Hang}

BRI

	{Basic Rate Interface}

Brian Reid

	<person> The person who cofounded {Usenet}'s anarchic alt.*
	{newsgroup} {hierarchy} with {John Gilmore}.

	(1997-04-12)

BRIDGE

	A component of {ICES} for civil engineers.

	[Sammet 1969, p. 616].

bridge

	<networking, hardware> A device which forwards traffic between
	{network segments} based on {data link layer} information.
	These segments would have a common {network layer} address.

	Every network should only have one {root bridge}.

	See also {gateway}, {router}.

	(2001-03-04)

Bridgetalk

	<language> A {visual language}.

	(2001-03-04)

briefcase

	<tool> A {Win95}/{WinNT} utility for keeping files on two
	computers without permanent connection in sync.

	The scenario briefcase was designed for is the combination of
	an office computer and a {portable} one.  You connect the two
	before leaving your office, create a briefcase on the portable
	(if you don't already have one on it), then copy the files you
	want to work on while away into the briefcase.  You can at
	this point disconnect the two computers, take the portable
	with you and work on the files in the briefcase at home or on
	the road.  When you get back to your office the briefcase
	utility can automatically update the files you changed on the
	office computer.

	(1998-05-18)

brightness

	<graphics> (Or "tone", "luminance", "value", "luminosity",
	"lightness") The coordinate in the {HSB} {colour model} that
	determines the total amount of light in the colour.  Zero
	brightness is black and 100% is white, intermediate values are
	"light" or "dark" colours.

	The other coordinates are {hue} and {saturation}.

	(1999-07-05)

Brilliant

	One of five pedagogical languages based on {Markov}
	{algorithms}, used in ["Nonpareil, a Machine Level Machine
	Independent Language for the Study of Semantics", B. Higman,
	ULICS Intl Report No ICSI 170, U London (1968)].

	See also {Diamond}, {Nonpareil}, {Pearl}, {Ruby}.

bring X to its knees

	To present a computer, operating system, piece of software, or
	algorithm with a load so extreme or {pathological} that it
	grinds to a halt.  "To bring a MicroVAX to its knees, try
	twenty users running {vi} - or four running {Emacs}."
	Compare {hog}.

	[{Jargon File}]

British Broadcasting Corporation

	<company> (BBC) The non-commercial UK organisation that
	commissions, produces and broadcasts television and radio
	programmes.

	The BBC commissioned the "{BBC Micro}" from {Acorn Computers}
	for use in a television series about using computers.  They
	also have one of the world's most respected news websites (on
	which I work!).

	{BBC Home (http://bbc.co.uk/)}.

	{BBC News (http://news.bbc.co.uk/)}.

	(2003-07-02)

British Library Method

	<algorithm> {Brute force} searching.

	According to legends circulating in the 1970s, in the British
	Library books are searched for by examining each book
	sequentially in the first shelf, then the next shelf,
	continuing until the book is found or the entire library has
	been searched.

	The term was referred to in a Dutch coursebook, "Inleiding In
	De Informatica" (Introduction to Informatics) from a course
	given by C.H.A. Koster and Th.A. Zoethout.  This was based on
	a course given at the TU Berlin.

	[Reference?]

	(1999-04-14)

British Standards Institute

	<body, standard> (BSI) The British member of {ISO}.

	(1996-06-12)

British Telecom

	<company> (BT) The largest telecommunications provider in the
	UK.

	Due to regulatory issues, BT had to sell off its interest in
	McCaw Cellular.  BT sold it to {AT&T} for something like 4B$.
	BT then invested that in {MCI}.  As a part of the deal, MCI
	was given BT North America, which was the old {Tymnet}.  MCI
	laid off about 40% of the Tymnet staff.

	{(http://intervid.co.uk/)}.

	(1995-05-09)

British Telecom Research Laboratories

	<company> (BTRL) The laboratories where {British Telecom}
	develops many of its new Network services.

	{(http://labs.bt.com/)}.

	Address: Martlesham Heath, near Ipswich, Suffolk, UK.

	(1995-04-25)

brittle

	<jargon> Said of {software} that is functional but easily
	broken by changes in operating environment or configuration,
	or by any minor tweak to the software itself.  Also, any
	system that responds inappropriately and disastrously to
	abnormal but expected external stimuli; e.g. a {file system}
	that is usually totally scrambled by a power failure is said
	to be brittle.  This term is often used to describe the
	results of a research effort that were never intended to be
	robust, but it can be applied to commercially developed
	software, which displays the quality far more often than it
	ought to.

	Opposite of {robust}.

	[{Jargon File}]

	(1995-05-09)

broadband

	<communications> A class of communication channel capable of
	supporting a wide range of frequencies, typically from audio
	up to video frequencies.  A broadband channel can carry
	multiple signals by dividing the total capacity into multiple,
	independent bandwidth channels, where each channel operates
	only on a specific range of frequencies.

	The term has come to be used for any kind of {Internet}
	connection with a {download} speed of more than 56 {kbps},
	usually some kind of {Digital Subscriber Line}, e.g. {ADSL}.
	A broadband connection is typically always connected, in
	contrast to a {dial-up} connection, and a fixed monthly rate
	is charged, often with a cap on the total amount of data that
	can be transferred.  Domestic broadband connections typically
	share a telephone line with normal voice calls and the two
	uses can occur simultaneously without interference.

	See also {baseband}, {narrowband}.

	(2006-03-30)

broadcast

	A transmission to multiple, unspecified recipients.  On
	Ethernet, a broadcast packet is a special type of multicast
	packet which all nodes on the network are always willing to
	receive.

broadcast quality video

	<communications, multimedia> Roughly, {video} with more than
	30 frames per second at a {resolution} of 800 x 640 {pixels}.

	The quality of moving pictures and sound is determined by the
	complete chain from camera to receiver.  Relevant factors are
	the colour temperature of the lighting, the balance of the
	red, green and blue vision pick-up tubes to produce the
	correct display colour temperature (which will be different)
	and the {gamma} pre-correction to cancel the non-linear
	characteristic of {cathode-ray tubes} in television receivers.
	The {resolution} of the camera tube and video coding system
	will determine the maximum number of {pixels} in the picture.

	Different colour coding systems have different defects.  The
	NTSC system (National Television Systems Committee) can
	produce {hue} errors.  The PAL system (Phase Alternation by
	Line) can produce {saturation} errors.

	Television modulation systems are specified by ITU CCIR Report
	624.  Low-resolution systems have {bandwidths} of 4.2 MHz with
	525 to 625 lines per frame as used in the Americas and Japan.
	Medium resolution of 5 to 6.5 MHz with 625 lines is used in
	Europe, Asia, Africa and Australasia.  {High-Definition
	Television} (HDTV) will require 8 MHz or more of bandwidth.

	A medium resolution (5.5 MHz in UK) picture can be represented
	by 572 lines of 402 pixels.  Note the ratio of pixels to lines
	is not the same as the {aspect ratio}.  A {VGA} display (480n
	lines of 640 pixels) could thus display 84% of the height of
	one picture frame.

	Most compression techniques reduce quality as they assume a
	restricted range of detail and motion and discard details to
	which the human eye is not sensitive.

	Broadcast quality implies something better than amateur or
	domestic video and therefore can't be retained on a domestic
	video recorder.  Broadcasts use quadriplex or U-matic
	recorders.

	The lowest frame rate used for commercial entertainment is the
	24Hz of the 35mm cinema camera.  When broadcast on a 50Hz
	television system, the pictures are screened at 25Hz reducing
	the running times by 4%.  On a 60Hz system every five movie
	frames are screened as six TV frames, still at the 4%
	increased rate.  The six frames are made by mixing adjacent
	frames, with some degradation of the picture.

	A computer system to meet international standard reproduction
	would at least VGA resolution, an interlaced frame rate of
	24Hz and 8 bits to represent the luminance (Y) component.  For
	a component display system using red, green and blue (RGB)
	electron guns and phosphor dots each will require 7 bits.
	Transmission and recording is different as various coding
	schemes need less bits if other representations are used
	instead of RGB.  Broadcasts use YUV and compression can reduce
	this to about 3.5 bits per pixel without perceptible
	degradation.  High-quality video and sound can be carried on a
	34 Mbaud channel after being compressed with {ADPCM} and
	{variable length coding}, potentially in real time.

	(1997-07-04)

broadcast storm

	<networking> A {broadcast} on a {network} that causes multiple
	{hosts} to respond by broadcasting themselves, causing the
	storm to grow exponentially in severity.

	See {network meltdown}.

	[{Jargon File}]

	(1995-02-07)

Broadway

	<standard, operating system> A standard which the {X
	Consortium} is currently (January 1997) developing and plans
	to release soon as an {open standard}.  A prime goal is to be
	more {bandwidth}-efficient and easier to develop for (and to
	{port}) than the {X Window System}, which has been widely
	described as over-sized, over-featured, over-engineered and
	incredibly over-complicated.

	{(http://x.org/consortium/broadway.html)}.

	(1997-05-15)

brochureware

	<jargon, business> A planned, but non-existent, product, like
	{vaporware} but with the added implication that marketing is
	actively selling and promoting it (they've printed brochures).
	Brochureware is often deployed to con customers into not
	committing to a competing existing product.

	The term is now especially applicable to new {websites}, website
	revisions, and ancillary services such as customer support and
	product return.

	Owing to the explosion of {database}-driven, {cookie}-using
	{dot-coms} (of the sort that can now deduce that you are, in
	fact, a dog), the term is now also used to describe sites made
	up of {static HTML} pages that contain not much more than
	contact info and mission statements.  The term suggests that
	the company is small, irrelevant to the web, local in scope,
	clueless, broke, just starting out, or some combination
	thereof.

	Many new companies without product, funding, or even staff,
	post brochureware with investor info and press releases to
	help publicise their ventures.  As of December 1999, examples
	include pop.com and cdradio.com.

	Small-timers that really have no business on the web such as
	lawncare companies and divorce laywers inexplicably have
	brochureware made that stays unchanged for years.

	[{Jargon File}]

	(2001-05-10)

broken

	Not working properly (of programs).

broken arrow

	<communications> The error code displayed on line 25 of a {IBM
	3270} {terminal} (or a {terminal emulator} emulating a 3270)
	for various kinds of {protocol} violations and "unexpected"
	error conditions (including connection to a {down} computer).
	On a PC, simulated with "->/_", with the two centre characters
	overstruck.

	"Broken arrow" is also military jargon for an accident
	involving nuclear weapons.

	[{Jargon File}]

	(1995-02-07)

broker

	{object request broker}

broket

	<character> /broh'k*t/ or /broh'ket/ (From broken bracket)
	Either of the characters "<" or ">" when used as paired
	enclosing {delimiters} ({angle brackets}).

	[{Jargon File}]

	(1997-07-21)

brontobyte

	<unit, data> A proposed unit of {data} equal to 10^27 {bytes}.  A
	brontobyte is 1000^9 bytes or 1000 {yottabytes}.

	"Bronto-" is not an official prefix and the term brontobyte is
	generally attributed to the IBM Dictionary of Computing.

	One brontobyte would be enough data to store a three-dimensional
	map of the Earth with one byte for each {voxel} of a
	one-centimetre grid.

	See {prefix}.

	[Where did IBM get it from?]

	(2013-11-04)

Brooks's Law

	<programming> "Adding manpower to a late software project
	makes it later" - a result of the fact that the expected
	advantage from splitting work among N programmers is O(N)
	(that is, proportional to N), but the complexity and
	communications cost associated with coordinating and then
	merging their work is O(N^2) (that is, proportional to the
	square of N).

	The quote is from Fred Brooks, a manager of {IBM}'s {OS/360}
	project and author of "{The Mythical Man-Month}".

	The myth in question has been most tersely expressed as
	"Programmer time is fungible" and Brooks established
	conclusively that it is not.  Hackers have never forgotten his
	advice; too often, {management} still does.

	See also {creationism}, {second-system effect}, {optimism}.

	[{Jargon File}]

	(1996-09-17)

brouter

	A device which bridges some {packets} (i.e. forwards based on
	{data link layer} information) and routes other packets (i.e.
	forwards based on {network layer} information).  The
	{bridge}/{route} decision is based on configuration
	information.

Brouwer Fixed-Point Theorem

	<topology> A well-known result in {topology} stating that any
	{continuous transformation} of an n-dimensional disk must have
	at least one {fixed point}.

	[Is this correct?]

	(2001-03-29)

Brown and Sharpe Wire Gauge

	{American Wire Gauge}

brown paper bag bug

	<programming> A programming {bug} that is so stupid that it
	makes the programmer want to put a brown paper bag over his
	head.

	(2001-01-16)

browser

	<hypertext> A program which allows a person to read
	{hypertext}.  The browser gives some means of viewing the
	contents of {nodes} (or "pages") and of {navigating} from one
	node to another.

	{Netscape Navigator}, {NCSA} {Mosaic}, {Lynx}, and {W3} are
	examples for browsers for the {web}.  They act as
	{clients} to remote {web servers}.

	(1996-05-31)

browserconfig.xml

	<web> A {Microsoft} configuration file used to
	customise the appearance and behaviour of {website} links
	{pinned} to the {Windows} {start screen} or {desktop} {taskbar}.
	browserconfig.xml allows the site owner to specify things like
	{badges} and tile images.

	{browserconfig.xml reference
	(http://msdn.microsoft.com/en-us/library/ie/dn320426%28v=vs.85%29.aspx)}.

	(2014-07-24)

BRS

	{Big Red Switch}

BRUIN

	Brown University Interactive Language.

	A simple interactive language with {PL/I}-like {syntax}, for
	{IBM 360}.

	["Meeting the Computational Requirements of the University,
	Brown University Interactive Language", R.G. Munck, Proc 24th
	ACM Conf, 1969].

	(1995-02-14)

brute force

	<programming> A primitive programming style in which the
	programmer relies on the computer's processing power instead
	of using his own intelligence to simplify the problem, often
	ignoring problems of scale and applying naive methods suited
	to small problems directly to large ones.  The term can also
	be used in reference to programming style: brute-force
	programs are written in a heavy-handed, tedious way, full of
	repetition and devoid of any elegance or useful abstraction
	(see also {brute force and ignorance}).

	The {canonical} example of a brute-force algorithm is
	associated with the "{travelling salesman problem}" (TSP), a
	classical {NP-hard} problem:

	Suppose a person is in, say, Boston, and wishes to drive to N
	other cities.  In what order should the cities be visited in
	order to minimise the distance travelled?

	The brute-force method is to simply generate all possible
	routes and compare the distances; while guaranteed to work and
	simple to implement, this algorithm is clearly very stupid in
	that it considers even obviously absurd routes (like going
	from Boston to Houston via San Francisco and New York, in that
	order).  For very small N it works well, but it rapidly
	becomes absurdly inefficient when N increases (for N = 15,
	there are already 1,307,674,368,000 possible routes to
	consider, and for N = 1000 - well, see {bignum}).  Sometimes,
	unfortunately, there is no better general solution than brute
	force.  See also {NP-complete}.

	A more simple-minded example of brute-force programming is
	finding the smallest number in a large list by first using an
	existing program to sort the list in ascending order, and then
	picking the first number off the front.

	Whether brute-force programming should actually be considered
	stupid or not depends on the context; if the problem is not
	terribly big, the extra CPU time spent on a brute-force
	solution may cost less than the programmer time it would take
	to develop a more "intelligent" algorithm.  Additionally, a
	more intelligent algorithm may imply more long-term complexity
	cost and bug-chasing than are justified by the speed
	improvement.

	When applied to {cryptography}, it is usually known as {brute
	force attack}.

	{Ken Thompson}, co-inventor of {Unix}, is reported to have
	uttered the epigram "When in doubt, use brute force".  He
	probably intended this as a {ha ha only serious}, but the
	original {Unix} {kernel}'s preference for simple, robust and
	portable {algorithms} over {brittle} "smart" ones does seem to
	have been a significant factor in the success of that
	{operating system}.  Like so many other tradeoffs in software
	design, the choice between brute force and complex,
	finely-tuned cleverness is often a difficult one that requires
	both engineering savvy and delicate aesthetic judgment.

	[{Jargon File}]

	(1995-02-14)

brute force and ignorance

	<jargon> (BFI) A popular design technique at many software
	houses - {brute force} coding unrelieved by any knowledge of
	how problems have been previously solved in elegant ways.
	Dogmatic adherence to design methods tends to encourage this
	sort of thing.  Characteristic of early {larval stage}
	programming; unfortunately, many never outgrow it.

	Also encountered in the variants BFMI - brute force and
	massive ignorance, and BFBI - brute force and bloody
	ignorance.

	"Gak, they used a {bubble sort}!  That's strictly BFI."

	Compare {bogosity}.

	[{Jargon File}]

	(1996-06-12)

brute force attack

	<cryptography> A method of breaking a cipher (that is, to
	decrypt a specific encrypted text) by trying every possible
	{key}.  The quicker the brute force attack, the weaker the
	cipher.  Feasibility of brute force attack depends on the key
	length of the cipher, and on the amount of computational power
	available to the attacker.  Brute force attack is impossible
	against the ciphers with variable-size key, such as a
	{one-time pad} cipher.

	{Breaking ciphers with many workstations
	(http://distributed.net/projects.html.en)}.

	(2000-01-16)

BS

	{backspace}

bs

	<networking> The {country code} for the Bahamas.

	(1999-01-27)

BS2000

	<operating system> An {operating system} from {SNI} for
	{mainframes}.

	{(http://mch.sni.de.public/bs2000/server.htm)}.

	(1997-06-13)

BSA

	1. {Business Software Alliance}.

	2. {Bidouilleurs Sans Argent}.

BSD

	{Berkeley Software Distribution}

BSD386

	{386BSD}

BSDI

	{Berkeley Software Design, Inc.}

BSD/OS

	<operating system> {BSDI}'s commercial version of {Berkeley
	Standard Distribution} {Unix}.  BSD/OS is a
	{POSIX}-compatible, {Unix}-like system for the {80386}, {486},
	and {Pentium}.  It is based on the {BSD} software from {UCB},
	a number of other sources, and components engineered by BSDI.
	The initial production release of BSD/OS shipped in March,
	1993.

	(1996-01-13)

BSD Unix

	{Berkeley Software Distribution}

BSI

	{British Standards Institute}

BSL

	<language> A variant of {IBM}'s {PL/S} systems language.
	Versions: BSL1, BSL2.

	(1998-06-15)

BSOD

	{Blue Screen of Death}

BSOL

	{Blue Screen of Life}

BSOM

	{Beats the shit outa me}

BSP method

	<programming> A {CASE} method from {IBM}.

	(1998-02-24)

BSRAM

	{Burst Static Random Access Memory}

BSS

	1. <programming> {Block Started by Symbol}.

	2. <networking> {Basic Service Set}

BSS segment

	{Block Started by Symbol}

BST

	<convention> British Summer Time.  The name for
	daylight-saving time in the UK {GMT} time zone.

	(2000-03-28)

bt

	<networking> The {country code} for Bhutan.

	(1999-01-27)

BTB

	{Branch Target Buffer}

btoa

	<tool, messaging, algorithm, file format> /B too A/ A {binary}
	to {ASCII} conversion utility.

	btoa is a {uuencode} or {base 64} equivalent which addresses
	some of the problems with the uuencode standard but not as
	many as the base 64 standard.  It avoids problems that some
	{hosts} have with spaces (e.g. conversion of groups of spaces
	to tabs) by not including them in its character set, but may
	still have problems on non-ASCII systems (e.g. {EBCDIC}).

	btoa is primarily used to transfer {binary files} between
	systems across connections which are not {eight-bit clean},
	e.g. {electronic mail}.

	btoa takes adjacent sets of four binary {octets} and encodes
	them as five ASCII {octets} using ASCII characters '!' through
	to 'u'.  Special characters are also used: 'x' marks the
	beginning or end of the archive; 'z' marks four consecutive
	zeros and 'y' (version 5.2) four consecutive spaces.

	Each group of four octets is processed as a 32-bit integer.
	Call this 'I'.  Let 'D' = 85^4.  Divide I by D.  Call this
	result 'R'.  Make I = I - (R * D) to avoid {overflow} on the
	next step.  Repeat, for values of D = 85^3, 85^2, 85 and 1.
	At each step, to convert R to the output character add decimal
	33 (output octet = R + ASCII value for '!').  Five output
	octets are produced.

	btoa provides some {integrity checking} in the form of a line
	{checksum}, and facilities for patching corrupted downloads.

	The {algorithm} used by btoa is more efficient than uuencode
	or base 64.  ASCII files are encoded to about 120% the size of
	their binary sources.  This compares with 135% for uuencode or
	base 64.

	{C source (ftp://hpux.csc.liv.ac.uk/hpux/Misc/btoa-5.2/)}.
	(version 5.2 - ~1994).

	Pre-compiled {MS-DOS} versions are also available.

	(1997-08-08)

B-Toolkit

	<tool, programming, product> A set of software tools designed
	to support a rigorous or formal development of software
	systems using the {B-Method}.

	The Toolkit also provides a development environment automating
	the management of all associated files, ensuring that the
	entire development, including code and documentation, is
	always in a consistent state.

	The Toolkit includes: a specification, design and code
	configuration management system, including integrity and
	dependency management and source file editing facilities; a
	set of software specification and design analysis tools, which
	includes {syntax} checkers, type checkers and a specification
	animator; a set of verification tools, which includes a
	proof-obligation generator and automatic and interactive
	provers; a set of coding tools, which includes a translator,
	linker, rapid prototyping facilities and a reusable
	specification/code module library; a documentation tool for
	automatically producing fully cross-referenced and indexed
	type-set documents from source files; a re-making tool for
	automatically re-checking and re-generating specifications,
	designs, code and documentation after modifications to source
	files.

	A normal licence costs 25,000 pounds, academic 6,250 pounds.

	(1995-03-13)

BTOS

	{Convergent Technologies Operating System}

B-tree

	<algorithm> A multi-way {balanced tree}.

	The "B" in B-tree has never been officially defined.  It could
	stand for "balanced" or "Bayer", after one of the original
	designers of the algorithms and structure.  A B-tree is _not_
	(necessarily?) a "{binary tree}".

	A B+-tree (as used by {IBM}'s {VSAM}) is a B-tree where the
	leaves are also linked sequentially, thus allowing both fast
	{random access} and sequential access to data.

	[Knuth's Art of Computer Programming].

	[Example algorithm?]

	(2000-01-10)

BTRIEVE

	1. <company> {BTRIEVE Technologies, Inc.}.

	2. <tool> A trademark of {BTRIEVE Technologies, Inc.} for
	their {ISAM} {index file} manager for {IBM PCs}.

	(1995-03-28)

BTRIEVE Technologies, Inc.

	<company, database> /bee-treev/ (BTI) A provider of
	{client-server} {database engines}.  BTI was founded by former
	{Novell, Inc.} employees, including the original developers of
	the Btrieve database engine.  BTI acquired the database
	product line from Novell in April, 1994.

	{(http://btrieve.com/)}.

	Address: Austin, Texas, USA.

	(1995-12-14)

BTRL

	<company> {British Telecom Research Laboratories}.

BTS

	{Bug Tracking System}

BTW

	<chat> By the way.

	(2002-06-12)

BUAF

	[alt.fan.warlord] Big Ugly ASCII Font.  A special form of
	{ASCII art}.  Various programs exist for rendering text
	strings into block, {bloob}, and pseudo-script fonts in cells
	between four and six character cells on a side; this is
	smaller than the letters generated by older {banner} programs.
	These are sometimes used to render one's name in a {sig
	block}, and are critically referred to as "BUAF"s.  See
	{warlording}.

	[{Jargon File}]

BUAG

	[alt.fan.warlord] Big Ugly ASCII Graphic.  Pejorative term for
	ugly {ASCII ART}, especially as found in {sig blocks}.  For
	some reason, mutations of the head of Bart Simpson are
	particularly common in the least imaginative {sig blocks}.

	See {warlording}.

bubble memory

	A storage device built using materials such as gadolinium
	gallium garnet which are can be magnetised easily in only one
	direction.  A film of these materials can be created so that
	it is magnetisable in an up-down direction.  The magnetic
	fields tend to join together, some with the north pole facing
	up, some with the south.

	When a veritcal magnetic field is imposed on this, the areas
	in opposite alignment to the field shrink to circles, or
	'bubbles'.  A bubble can be formed by reversing the field in a
	small spot, and can be destroyed by increasing the field.

	Bubble memory is a kind of {non-volatile storage} but
	{EEPROM}, {Flash Erasable Programmable Read-Only Memory} and
	ferroelectric technologies, which are also non-volatile, are
	faster.

	["Great Microprocessors of the Past and Present", V 4.0.0,
	John Bayko <bayko@hercules.cs.uregina.ca>, Appendix C]

	(1995-02-03)

bubble sort

	A sorting technique in which pairs of adjacent values in the
	list to be sorted are compared and interchanged if they are
	out of order; thus, list entries "bubble upward" in the list
	until they bump into one with a lower sort value.  Because it
	is not very good relative to other methods and is the one
	typically stumbled on by {naive} and untutored programmers,
	hackers consider it the {canonical} example of a naive
	algorithm.  The canonical example of a really *bad* algorithm
	is {bogo-sort}.  A bubble sort might be used out of ignorance,
	but any use of bogo-sort could issue only from brain damage or
	willful perversity.

	[{Jargon File}]

bucky bits

	/buh'kee bits/ 1. Obsolete.  The bits produced by the CONTROL
	and META shift keys on a SAIL keyboard ({octal} 200 and 400
	respectively), resulting in a 9-bit keyboard character set.
	The MIT AI TV (Knight) keyboards extended this with TOP and
	separate left and right CONTROL and META keys, resulting in a
	12-bit character set; later, LISP Machines added such keys as
	SUPER, HYPER, and GREEK (see {space-cadet keyboard}).

	2. By extension, bits associated with "extra" shift keys on
	any keyboard, e.g.  the ALT on an IBM PC or command and option
	keys on a Macintosh.

	It has long been rumored that "bucky bits" were named after
	Buckminster Fuller during a period when he was consulting at
	Stanford.  Actually, bucky bits were invented by Niklaus Wirth
	when *he* was at Stanford in 1964--65; he first suggested the
	idea of an EDIT key to set the 8th bit of an otherwise 7 bit
	ASCII character.  It seems that, unknown to Wirth, certain
	Stanford hackers had privately nicknamed him "Bucky" after a
	prominent portion of his dental anatomy, and this nickname
	transferred to the bit.  Bucky-bit commands were used in a
	number of editors written at Stanford, including most notably
	TV-EDIT and NLS.

	The term spread to MIT and CMU early and is now in general
	use.  Ironically, Wirth himself remained unaware of its
	derivation for nearly 30 years, until {GLS} dug up this
	history in early 1993!  See {double bucky}, {quadruple bucky}.

	(2001-06-22)

buffer

	1. An area of memory used for storing messages.  Typically, a
	buffer will have other attributes such as an input pointer
	(where new data will be written into the buffer), and output
	pointer (where the next item will be read from) and/or a count
	of the space used or free.  Buffers are used to decouple
	processes so that the reader and writer may operate at
	different speeds or on different sized blocks of data.

	There are many different algorithms for using buffers, e.g.
	first-in first-out (FIFO or shelf), last-in first-out (LIFO or
	stack), double buffering (allowing one buffer to be read while
	the other is being written), cyclic buffer (reading or writing
	past the end wraps around to the beginning).

	2. An electronic device to provide compatibility between two
	signals, e.g. changing voltage levels or current capability.

buffered write-through

	<memory management> A variation of {write-through} where the
	{cache} uses a "write buffer" to hold data being written back
	to {main memory}.  This frees the cache to service read
	requests while the write is taking place.  There is usually
	only one stage of buffering so subsequent writes must wait
	until the first is complete.  Most accesses are reads so
	buffered write-through is only useful for very slow main
	memory.

	(1998-04-24)

buffer overflow

	<programming> What happens when you try to store more data in
	a {buffer} than it can handle.  This may be due to a mismatch
	in the processing rates of the producing and consuming
	processes (see {overrun} and {firehose syndrome}), or because
	the buffer is simply too small to hold all the data that must
	accumulate before a piece of it can be processed.  For
	example, in a text-processing tool that {crunch}es a line at a
	time, a short line buffer can result in {lossage} as input
	from a long line overflows the buffer and overwrites data
	beyond it.  Good defensive programming would check for
	overflow on each character and stop accepting data when the
	buffer is full.

	See also {spam}, {overrun screw}.

	[{Jargon File}]

	(1996-05-13)

buffer overrun

	{buffer overflow}

bug

	<programming> An unwanted and unintended property of a
	{program} or piece of {hardware}, especially one that causes
	it to malfunction.  Antonym of {feature}.  E.g. "There's a bug
	in the editor: it writes things out backward."  The
	identification and removal of bugs in a program is called
	"{debugging}".

	Admiral {Grace Hopper} (an early computing pioneer better
	known for inventing {COBOL}) liked to tell a story in which a
	technician solved a {glitch} in the {Harvard Mark II machine}
	by pulling an actual insect out from between the contacts of
	one of its relays, and she subsequently promulgated {bug} in
	its hackish sense as a joke about the incident (though, as she
	was careful to admit, she was not there when it happened).
	For many years the logbook associated with the incident and
	the actual bug in question (a moth) sat in a display case at
	the Naval Surface Warfare Center (NSWC).  The entire story,
	with a picture of the logbook and the moth taped into it, is
	recorded in the "Annals of the History of Computing", Vol. 3,
	No. 3 (July 1981), pp. 285--286.

	The text of the log entry (from September 9, 1947), reads
	"1545 Relay #70 Panel F (moth) in relay.  First actual case of
	bug being found".  This wording establishes that the term was
	already in use at the time in its current specific sense - and
	Hopper herself reports that the term "bug" was regularly
	applied to problems in radar electronics during WWII.

	Indeed, the use of "bug" to mean an industrial defect was
	already established in Thomas Edison's time, and a more
	specific and rather modern use can be found in an electrical
	handbook from 1896 ("Hawkin's New Catechism of Electricity",
	Theo. Audel & Co.)  which says: "The term "bug" is used to a
	limited extent to designate any fault or trouble in the
	connections or working of electric apparatus."  It further
	notes that the term is "said to have originated in
	{quadruplex} telegraphy and have been transferred to all
	electric apparatus."

	The latter observation may explain a common folk etymology of
	the term; that it came from telephone company usage, in which
	"bugs in a telephone cable" were blamed for noisy lines.
	Though this derivation seems to be mistaken, it may well be a
	distorted memory of a joke first current among *telegraph*
	operators more than a century ago!

	Actually, use of "bug" in the general sense of a disruptive
	event goes back to Shakespeare!  In the first edition of
	Samuel Johnson's dictionary one meaning of "bug" is "A
	frightful object; a walking spectre"; this is traced to
	"bugbear", a Welsh term for a variety of mythological monster
	which (to complete the circle) has recently been reintroduced
	into the popular lexicon through fantasy {role-playing games}.

	In any case, in jargon the word almost never refers to
	insects.  Here is a plausible conversation that never actually
	happened:

	"There is a bug in this ant farm!"

	"What do you mean?  I don't see any ants in it."

	"That's the bug."

	[There has been a widespread myth that the original bug was
	moved to the Smithsonian, and an earlier version of this entry
	so asserted.  A correspondent who thought to check discovered
	that the bug was not there.  While investigating this in late
	1990, your editor discovered that the NSWC still had the bug,
	but had unsuccessfully tried to get the Smithsonian to accept
	it - and that the present curator of their History of
	American Technology Museum didn't know this and agreed that it
	would make a worthwhile exhibit.  It was moved to the
	Smithsonian in mid-1991, but due to space and money
	constraints has not yet been exhibited.  Thus, the process of
	investigating the original-computer-bug bug fixed it in an
	entirely unexpected way, by making the myth true!  - ESR]

	[{Jargon File}]

	(1999-06-29)

bug-compatible

	Said of a design or revision that has been badly compromised
	by a requirement to be compatible with {fossils} or
	{misfeatures} in other programs or (especially) previous
	releases of itself. "{MS-DOS} 2.0 used \ as a path separator
	to be bug-compatible with some cretin's choice of / as an
	option character in 1.0."

	[{Jargon File}]

bug fix

	<programming> A change to a program or system intended to
	permanently cure a {bug}.  Often a fix for one bug
	inadvertantly introduces new bugs, hence the need for careful
	forethought and testing.

	Compare: {workaround}.

	(1998-06-25)

bug fix release

	<programming> A {release} which introduces no new {features},
	but which merely aims to fix bugs in previous releases.  All
	too commonly new bugs are introduced at the same time.

	(1996-08-04)

Bugfoot

	{Loch Ness Monster Bug}

bug-for-bug compatible

	Same as {bug-compatible}, with the additional implication that
	much tedious effort went into ensuring that each (known) bug
	was replicated.

	[{Jargon File}]

buglix

	/buhg'liks/ Pejorative term referring to {DEC}'s {ULTRIX}
	{operating system} in its earlier *severely* buggy versions.
	Still used to describe ULTRIX, but without nearly so much
	venom.  Compare {AIDX}, {HP-SUX}, {Nominal Semidestructor},
	{Telerat}, {sun-stools}.

bugs

	{bug}

BUGSYS

	<programming> A programming system for {pattern recognition}
	and preparing animated films, for {IBM 7094} and {IBM 360}.

	["BUGSYS: A Programming System for Picture Processing - Not
	for Debugging", R.A. Ledley et al, CACM 9(2) (Feb 1966)].

	(1995-02-14)

bug tracking system

	<programming> (BTS) A system for receiving and filing {bugs}
	reported against a {software} project, and tracking those bugs
	until they are fixed.  Most major software projects have their
	own BTS, the {source code} of which is often available for use
	by other projects.

	Well known BTSs include {GNATS}, {Bugzilla}, and {Debbugs}.

	(2002-06-12)

Bugzilla

	<programming> The web-based {bug tracking system} used by the
	{Mozilla} project.

	{Bugzilla home (http://bugzilla.mozilla.org/)}.

	(2002-06-12)

build

	<programming, systems> To process all of a project's {source
	code} and other digital assets or resources in order to
	produce a deployable product.  In the simplest case this might
	mean compiling one file of {C} source to produce an
	{executable} file.  More complex builds would typically
	involve compiling multiple source files, building library
	modules, packaging intermediate build products (e.g. {Java}
	{class files} in a {jar file}), adding or updating version
	information and other data about the product (e.g. intended
	deployment {platform}), running tests and interacting with a
	{source code control} system.

	The build process is normally automated using tools such as
	{Unix} {make}, {Apache} {ant} or as part of an {integrated
	development environment}.  This is taken one step further by
	{continuous integration} set-ups which periodically build the
	system while you are working on it.

	(2011-12-16)

built-in

	(Or "primitive") A built-in function or operator is one
	provided by the lowest level of a language implementation.
	This usually means it is not possible (or efficient) to
	express it in the language itself.  Typical examples are the
	basic arithmetic and {Boolean} operators (in {C} syntax: +, -,
	*, /, %, !, &&, ||), bit manipulation operators (~, &, |, ^)
	and I/O primitives.  Other common functions may be provided in
	libraries but are not built-in if they are written in the
	language being implemented.

	(1995-02-14)

Built-in Self Test

	(BIST) The technique of designing circuits with additional
	logic which can be used to test proper operation of the
	primary (functional) logic.

	(1995-02-14)

Bull

	{Bull Information Systems}

bulletin board

	{bulletin board system}

bulletin board system

	<communications, application> (BBS, bboard /bee'bord/, message
	board, forum; plural: BBSes) A computer and associated
	software which typically provides an electronic message
	database where people can log in and leave messages.  Messages
	are typically split into {topic groups} similar to the
	{newsgroups} on {Usenet} (which is like a distributed BBS).
	Any user may submit or read any message in these public areas.

	The term comes from physical pieces of board on which people
	can pin messages written on paper for general consumption - a
	"physical bulletin board".  {Ward Christensen}, the programmer
	and operator of the first BBS (on-line 1978-02-16) called it a
	CBBS for "computer bulletin board system".  Since the rise of
	the {World-Wide Web}, the term has become antiquated, though
	the concept is more popular than ever, with many {websites}
	featuring discussion areas where users can post messages for
	public consumption.

	Apart from public message areas, some BBSes provided archives
	of files, personal {electronic mail} and other services of
	interest to the system operator ({sysop}).

	Thousands of BBSes around the world were run from amateurs'
	homes on {MS-DOS} boxes with a single {modem} line each.
	Although BBSes were traditionally the domain of hobbyists,
	many connected directly to the {Internet} (accessed via
	{telnet}), others were operated by government, educational,
	and research institutions.

	Fans of {Usenet} or the big commercial {time-sharing} bboards
	such as {CompuServe}, {CIX} and {GEnie} tended to consider
	local BBSes the low-rent district of the hacker culture, but
	they helped connect hackers and users in the personal-{micro}
	and let them exchange code.

	Use of this term for a {Usenet} newsgroup generally marks one
	either as a {newbie} fresh in from the BBS world or as a real
	old-timer predating {Usenet}.

	(2005-09-20)

bulletproof

	Used of an algorithm or implementation considered extremely
	{robust}; lossage-resistant; capable of correctly recovering
	from any imaginable exception condition - a rare and valued
	quality.  Synonym {armor-plated}.

	[{Jargon File}]

Bull Information Systems

	<company> A multinational I.T. group based in Europe with
	21,000 people and operations in more than 85 countries.  In
	1997, Bull earned revenues of over $4 billion, including over
	65% outside of France, its country of origin.  The company is
	ranked as the third largest {systems integrator} in Europe.

	{(http://bull.com/)}.

	(1998-07-02)

bum

	1. To make highly efficient, either in time or space, often at
	the expense of clarity.  "I managed to bum three more
	instructions out of that code."  "I spent half the night
	bumming the interrupt code."  In {elder days}, {John McCarthy}
	(inventor of {Lisp}) used to compare some efficiency-obsessed
	hackers among his students to "ski bums"; thus, optimisation
	became "program bumming", and eventually just "bumming".

	2. To squeeze out excess; to remove something in order to
	improve whatever it was removed from (without changing
	function; this distinguishes the process from a
	{featurectomy}).

	3.  A small change to an algorithm, program, or hardware
	device to make it more efficient.  "This hardware bum makes
	the jump instruction faster."

	Usage: now uncommon, largely superseded by v. {tune} (and
	{tweak}, {hack}), though none of these exactly capture sense
	2.  All these uses are rare in Commonwealth hackish, because
	in the parent dialects of English "bum" is a rude synonym for
	"buttocks".

	[{Jargon File}]

bump

	Increment.  E.g. {C}'s {++} operator.  It is used especially of
	counter variables, pointers and index dummies in "for",
	"while", and "do-while" loops.

	(1994-11-29)

burble

	[Lewis Carroll's "Jabberwocky"] Like {flame}, but connotes
	that the source is truly clueless and ineffectual (mere
	flamers can be competent).  A term of deep contempt.  "There's
	some guy on the phone burbling about how he got a DISK FULL
	error and it's all our comm software's fault."  This is
	mainstream slang in some parts of England.

	[{Jargon File}]

Bureau International des Poids et Mesures

	<body, standard> (BIPM) The standards body that ensures
	world-wide uniformity of measurements and their traceability
	to the {International System of Units} (SI).  The BIPM is
	based in France and operates with the authority of the
	Convention of the Metre, a diplomatic treaty between fifty-one
	nations.  It operates through a series of committees, whose
	members are the national metrology laboratories of the member
	states of the convention, and through its own laboratory work.

	The BIPM carries out measurement-related research.  It takes
	part in, and organises, international comparisons of national
	measurement standards, and it carries out calibrations for
	member states.

	{BIPM Home (http://www.bipm.org/)}.

	(2014-07-08)

Burge's Language

	Unnamed functional language based on lambda-calculus.
	Recursive Programming techniques", W.H. Burge, A-W 1975.

buried treasure

	A surprising piece of code found in some program.  While
	usually not wrong, it tends to vary from {crufty} to
	bletcherous, and has lain undiscovered only because it was
	functionally correct, however horrible it is.  Used
	sarcastically, because what is found is anything *but*
	treasure.  Buried treasure almost always needs to be dug up
	and removed.  "I just found that the scheduler sorts its queue
	using {bubble sort}!  Buried treasure!"

	[{Jargon File}]

burn-in

	1. <hardware> {screen saver}.

	2. <hardware, testing> {burn-in period}.

burn-in period

	1. <testing> A factory {soak test} intended to increase the
	chance that components that fail early due to {infant
	mortality} will fail before the system leaves the factory.

	2. <jargon> When one is so intensely involved in a new project
	that one forgets basic needs such as food, drink and sleep.
	Excessive burn-in can lead to burn-out.  See {hack mode},
	{larval stage}.

	[{Jargon File}]

	(2007-01-17)

Burroughs Corporation

	<company> A company which merged with {Sperry Univac} to form
	{Unisys Corporation}.  They produced the {Datatron 200 series}
	among other computers.

	(2007-01-16)

Burst EDO

	{Burst Extended Data Out DRAM}

Burst Extended Data Out DRAM

	<storage> (Burst EDO, BEDO) A variant on {EDO DRAM} in which
	read or write cycles are batched in bursts of four.  The
	bursts wrap around on a four byte boundary which means that
	only the two least significant bits of the {CAS} address are
	modified internally to produce each address of the burst
	sequence.  Consequently, burst EDO bus speeds will range from
	40MHz to 66MHz, well above the 33MHz bus speeds that can be
	accomplished using {Fast Page Mode} or EDO DRAM.

	Burst EDO was introduced sometime before May 1995.

	(1996-06-25)

burst page

	{banner}

Burst Static Random Access Memory

	<storage> (BSRAM) A kind of {SRAM} used primarily for external
	{Level 2 cache} memory.

	[How does it work?]

	(1998-02-24)

bus

	<architecture, networking> A set of electrical conductors
	(wires, PCB tracks or connections in an {integrated circuit})
	connecting various "stations", which can be {functional units}
	in a computer or {nodes} in a {network}.  A bus is a
	{broadcast} channel, meaning that each station receives every
	other station's transmissions and all stations have equal
	access to the bus.

	Various schemes have been invented to solve the problem of
	collisions: multiple stations trying to transmit
	at once, e.g. {CSMA/CD}, {bus master}.

	The term is almost certainly derived from the electrical
	engineering term "bus bar" - a substantial, rigid power supply
	conductor to which several connections are made.  This was
	once written "'bus bar" as it was a contraction of "omnibus
	bar" - a connection bar "for all", by analogy with the
	passenger omnibus - a conveyance "for all".

	{More on derivation (/pub/misc/omnibus.html)}.

	There are busses both within the {CPU} and connecting it to
	external {memory} and {peripheral} devices.  The data bus,
	address bus and control signals, despite their names, really
	constitute a single bus since each is useless without the
	others.

	The width of the data bus is usually specified in {bits} and
	is the number of parallel connectors.  This and the {clock
	rate} determine the bus's data rate (the number of {bytes} per
	second which it can carry).  This is one of the factors
	limiting a computer's performance.  Most current
	{microprocessors} have 32-bit busses both internally and
	externally.  100 or 133 {megahertz} bus clock rates are
	common.  The bus clock is typically slower than the processor
	clock.

	Some processors have internal busses which are wider than
	their external busses (usually twice the width) since the
	width of the internal bus affects the speed of all operations
	and has less effect on the overall system cost than the width
	of the external bus.

	Various bus designs have been used in the {PC}, including
	{ISA}, {EISA}, {Micro Channel}, {VL-bus} and {PCI}.  Other
	peripheral busses are NuBus, TURBOchannel, VMEbus, MULTIBUS and
	STD bus.

	See also {bus network}.

	{Ukranian (http://open-taxi.com/mynews/~adrian/10)}.

	(2010-07-10)

bus error

	<processor> A fatal failure in the execution of a {machine
	language} instruction resulting from the {processor} detecting
	an anomalous condition on its {bus}.  Such conditions include
	invalid address alignment (accessing a multi-byte number at an
	odd address), accessing a {physical address} that does not
	correspond to any device, or some other device-specific
	hardware error.  A bus error triggers a processor-level
	{exception} which {Unix} translates into a "SIGBUS" {signal}
	which, if not caught, will terminate the current process.

	(2000-04-04)

Bush, Vannevar

	{Vannevar Bush}

Business Analyst

	<job> A person who analyses the operations of a department or
	functional unit to develop a general systems solution to the
	problem.  The solution will typically involve a combination of
	manual and automated processes.  The business analyst can
	provide insights into an operation for an {information systems
	analyst}.

	(2004-03-09)

Business Application Programming Interface

	<business, application, programming> (BAPI) /bap'ee/ A set of
	{methods} provided by an {SAP} business {object}.

	Release 4.0 of {SAP AG}'s {R/3} system supports
	{object-oriented programming} via an interface defined in
	terms of {objects} and {methods} called BAPIs.  For example if
	a material object provides a function to check availability,
	the corresponding SAP business object type "Material" might
	provide a BAPI called "Material.CheckAvailability".

	The definitions of SAP business objects and their BAPIs are
	kept in an SAP business object repository.  SAP provide
	{classes} and {libraries} to enable a programming team to
	build SAP applications that use business objects and BAPIs.
	Supported environments include {COM} and {Java}.

	The {Open BAPI Network
	(http://sap.com/solutions/technology/bapis/index.htm)}.
	gives background information and lists objects and BAPIs.

	(2002-08-30)

Business Process Re-engineering

	<business> (BPR) Any radical change in the way in which an
	organisation performs its business activities.  BPR involves a
	fundamental re-think of the business processes followed by a
	redesign of business activities to enhance all or most of its
	critical measures - costs, quality of service, staff dynamics,
	etc.

	(1999-09-27)

Business Software Alliance

	<company> The BSA was created by {Microsoft} in 1988 in an
	attempt to combat {software theft}.  The alliance includes the
	majority of leading software publishers including {Novell},
	{Symantec}, and {Autodesk} and is actively campaigning in over
	65 countries.

	The BSA operates a three-pronged approach: 1. Lobbying to
	strengthen copyright laws and co-operation with law
	enforcement agencies.  2. Educating the public through
	marketing, roadshows, etc.  3. Bringing legal actions against
	counterfeiters.  BSA's aims are the same as the {Federation
	Against Software Theft} but it is not limited to the UK.

	In December 1990 the BSA obtained the first legal order in the
	UK which allowed a surprise search on a company's offices for
	suspected copyright infringement.

	{(http://bsa.org/bsa)}.

	UK Office: Business Software Alliance, 1st Floor, Leaconfield
	House, Curzon Street, London W1Y 8AS, United Kingdom.

	See also {software audit}.

	(1996-05-19)

Business Systems Analyst

	<job> A person who works directly with management and users to
	analyse, specify, and design {business applications}.  The
	Business Systems Analyst develops detailed functional, system,
	and program specifications using {structured design
	methodologies} and {CASE} tools.  He must have strong business
	sense and communications skills.  He works with both the
	{information systems} team and the strategic planning business
	group.

	(2004-03-09)

business to business

	<business> (B2B) {Electronic commerce} between businesses, as
	opposed to between a consumer and a business (B2C).

	While derived from "business to business", "B2B" is narrower
	in meaning.

	(2001-03-26)

bus master

	<architecture> The device in a computer which is driving the
	{address bus} and bus control signals at some point in time.
	In a simple architecture only the (single) {CPU} can be bus
	master but this means that all communications between
	("slave") I/O devices must involve the CPU.  More
	sophisticated architectures allow other capable devices (or
	multiple CPUs) to take turns at controling the bus.  This
	allows, for example, a {network controller} card to access a
	{disk controller} directly while the CPU performs other tasks
	which do not require the bus, e.g. fetching code from its
	{cache}.

	Note that any device can drive data onto the {data bus} when
	the CPU reads from that device, but only the bus master drives
	the {address bus} and control signals.

	{Direct Memory Access} is a simple form of bus mastering where
	the I/O device is set up by the CPU to read from or write to
	one or more contiguous blocks of memory and then signal to the
	CPU when it has done so.  Full bus mastering (or "First Party
	DMA", "bus mastering DMA") implies that the I/O device is
	capable of performing more complex sequences of operations
	without CPU intervention (e.g. servicing a complete {NFS}
	request).  This will normally mean that the I/O device
	contains its own processor or {microcontroller}.

	See also {distributed kernel}.

	(1996-08-26)

bus mastering

	{bus master}

bus network

	<networking> A {network topology} in which all {nodes} are
	connected to a single wire or set of wires (the bus).  Bus
	networks typically use {CSMA/CD} techniques to determine which
	node should transmit data at any given time.

	Some {networks} are implemented as a {bus}, e.g. {Ethernet} -
	a one-bit bus operating at 10, 100, 1000 or 10,000 {megabits
	per second}.  Originally Ethernet was a {physical layer} bus
	consisting of a wire (with {terminators} at each end) to which
	each node was attached.  {Switched Ethernet}, while no longer
	physically a bus still acts as one at the logical layers.

bus topology

	{bus}

Busy Beaver

	<theory> (BB) One of a series of sets of {Turing Machine}
	programs.  The BBs in the Nth set are programs of N states
	that produce a larger finite number of ones on an initially
	blank tape than any other program of N states.  There is no
	program that, given input N, can deduce the productivity
	(number of ones output) of the BB of size N.

	The productivity of the BB of size 1 is 1.  Some work has been
	done to figure out productivities of bigger Busy Beavers - the
	7th is in the thousands.

	(1994-10-24)

busy-loop

	{tight loop}

busy-wait

	<programming> To wait for an {event} by {spinning} through a
	{tight loop} or timed-delay loop that {polls} for the event on
	each pass, as opposed to setting up an {interrupt handler} and
	continuing execution on another part of the task.  This is a
	wasteful technique, best avoided on {time-sharing} systems
	where a busy-waiting program may {hog} the processor.

	[{Jargon File}]

	(1999-06-10)

Butterfly Common LISP

	A parallel version of {Common LISP} for the {BBN Butterfly}
	computer.

Butterfly Scheme

	A parallel version of {Scheme} for the {BBN Butterfly}
	computer.

button

	1. <electronics> {push-button}.

	2. <operating system> A graphical representation of an
	electrical {push-button} appearing as part of a {graphical
	user interface}.  Moving the {mouse pointer} over the
	graphical button and pressing one of the physical mouse
	buttons starts some software action such as closing a window
	or deleting a file.

	See also {radio button}.

	(1997-07-07)

buzz

	1. Of a program, to run with no indication of progress and
	perhaps without guarantee of ever finishing; especially said
	of programs thought to be executing a {tight loop} of code.  A
	program that is buzzing appears to be {catatonic}, but never
	gets out of catatonia, while a buzzing loop may eventually end
	of its own accord.  "The program buzzes for about 10 seconds
	trying to sort all the names into order."  See {spin}; see
	also {grovel}.

	2. [ETA Systems] To test a wire or printed circuit trace for
	continuity by applying an AC rather than DC signal.  Some wire
	faults will pass DC tests but fail a buzz test.

	3. To process an {array} or list in sequence, doing the same
	thing to each element.  "This loop buzzes through the tz array
	looking for a terminator type."

	[{Jargon File}]

bv

	<networking> The {country code} for Bouvet Island.

	(1999-01-27)

bw

	<networking> The {country code} for Botswana.

	(1999-01-27)

bwBASIC

	Bywater BASIC interpreter.

	A {BASIC} {interpreter} by Ted A. Campbell <tcamp@delphi.com>
	which implements a large superset of the {ANSI Standard for
	Minimal BASIC} (X3.60-1978) in {ANSI C}, and offers a simple
	interactive environment including some {shell} program
	facilities as an extension of BASIC.  The interpreter source
	has been compiled successfully on a range of {ANSI C}
	{compilers} on varying {platforms} including {MS-DOS}, {Unix},
	and {Acorn} {RISC OS}.

	Version 2.10 was posted to {news:comp.sources.misc}, volume
	40.

	(1993-10-29)

BWQ

	[IBM] Buzz Word Quotient.  The percentage of buzzwords in a
	speech or documents.  Usually roughly proportional to
	{bogosity}.  See {TLA}.

	[{Jargon File}]

by

	<networking> The {country code} for Belarus.

	(1999-01-27)

byacc

	{Berkeley Yacc}

by hand

	1. Said of an operation (especially a repetitive, trivial,
	and/or tedious one) that ought to be performed automatically
	by the computer, but which a hacker instead has to step
	tediously through.  "My mailer doesn't have a command to
	include the text of the message I'm replying to, so I have to
	do it by hand."  This does not necessarily mean the speaker
	has to retype a copy of the message; it might refer to, say,
	dropping into a subshell from the mailer, making a copy of
	one's mailbox file, reading that into an editor, locating the
	top and bottom of the message in question, deleting the rest
	of the file, inserting ">" characters on each line, writing
	the file, leaving the editor, returning to the mailer, reading
	the file in, and later remembering to delete the file.
	Compare {eyeball search}.

	2. By extension, writing code which does something in an
	explicit or low-level way for which a presupplied library
	routine ought to have been available.  "This cretinous
	{B-tree} library doesn't supply a decent iterator, so I'm
	having to walk the trees by hand."

	[{Jargon File}]

Byte

	<publication> A popular computing magazine.

	{(http://byte.com)}.

	(1997-03-27)

byte

	<unit> /bi:t/ (B) A component in the machine {data hierarchy}
	larger than a {bit} and usually smaller than a {word}; now
	nearly always eight bits and the smallest addressable unit of
	storage.  A byte typically holds one {character}.

	A byte may be 9 bits on 36-bit computers.  Some older
	architectures used "byte" for quantities of 6 or 7 bits, and
	the PDP-10 and IBM 7030 supported "bytes" that were actually
	{bit-fields} of 1 to 36 (or 64) bits!  These usages are now
	obsolete, and even 9-bit bytes have become rare in the general
	trend toward power-of-2 word sizes.

	The term was coined by Werner Buchholz in 1956 during the
	early design phase for the {IBM} {Stretch} computer.  It was a
	mutation of the word "bite" intended to avoid confusion with
	"bit".  In 1962 he described it as "a group of bits used to
	encode a character, or the number of bits transmitted in
	parallel to and from input-output units".  The move to an
	8-bit byte happened in late 1956, and this size was later
	adopted and promulgated as a standard by the {System/360}
	{operating system} (announced April 1964).

	James S. Jones <jsjones@graceland.edu> adds:

	I am sure I read in a mid-1970's brochure by IBM that outlined
	the history of computers that BYTE was an acronym that stood
	for "Bit asYnchronous Transmission E..?" which related to
	width of the bus between the Stretch CPU and its CRT-memory
	(prior to Core).

	Terry Carr <bear@mich.com> says:

	In the early days IBM taught that a series of bits transferred
	together (like so many yoked oxen) formed a Binary Yoked
	Transfer Element (BYTE).

	[True origin?  First 8-bit byte architecture?]

	See also {nibble}, {octet}.

	[{Jargon File}]

	(2003-09-21)

byte-code

	<file format, software> A {binary} file containing an
	{executable} program, consisting of a sequence of ({op code},
	data) pairs.

	Byte-code op codes are most often fixed size {bit patterns}, but
	can be variable size.  The data portion consists of zero or more
	{bits} whose format typically depends on the op code.

	A byte-code program is interpreted by a {byte-code
	interpreter}.  The advantage of this technique compared with
	outputing {machine code} for some particular processor is that
	the same byte-code can be executed on any processor on which
	the byte-code interpreter runs.  The byte-code may be compiled
	to machine code ("native code") for speed of execution but
	this usually requires significantly greater effort for each
	new taraget architecture than simply porting the interpreter.

	For example, {Java} is compiled to byte-code which runs on the
	{Java Virtual Machine}.

	(2006-05-29)

byte-code compiler

	<programming, tool> A {compiler} which outputs a program in
	some kind of {byte-code}.

	Compare: {byte-code interpreter}.

	(1995-11-04)

byte-code interpreter

	<software> A program that {executes} a {byte code} program.

	An example is the {Java Virtual Machine}.

	(1999-11-28)

byte compiler

	{byte-code compiler}

bytesexual

	<jargon> /bi:t" sek"shu-*l/ An adjective used to describe
	hardware, denotes willingness to compute or pass data in
	either {big-endian} or {little-endian} format (depending,
	presumably, on a {mode bit} somewhere).  See also {NUXI
	problem}.

	[{Jargon File}]

	(2009-05-28)

Byzantine

	<jargon, architecture> A term describing any system that has
	so many labyrinthine internal interconnections that it would
	be impossible to simplify by separation into loosely coupled
	or linked components.

	The city of Byzantium, later renamed Constantinople and then
	Istanbul, and the Byzantine Empire were vitiated by a
	bureaucratic overelaboration bordering on lunacy: quadruple
	banked agencies, dozens or even scores of superfluous levels
	and officials with high flown titles unrelated to their actual
	function, if any.

	Access to the Emperor and his council was controlled by
	powerful and inscrutable eunuchs and by rival sports factions.

	[Edward Gibbon, "Decline and Fall of the Roman Empire"].

	(1999-01-15)

bz

	<networking> The {country code} for Belize.

	(1999-01-27)

bzzzt, wrong

	<jargon> /bzt rong/ ({Usenet}, {Internet}) From the flim "Dead
	Poets Society", spoofing quiz shows such as "Truth or
	Consequences" where an incorrect answer earns a blast from the
	buzzer.

	An expression of mock-rude disagreement, often following a
	quote from another poster in a {forum}.  The less abbreviated
	"*Bzzzzt*, wrong, but thank you for playing" is also common.

	[{Jargon File}]

	(2009-10-28)

C

	<language> A programming language designed by {Dennis Ritchie}
	at {AT&T} {Bell Labs} ca. 1972 for systems programming on the
	{PDP-11} and immediately used to reimplement {Unix}.

	It was called "C" because many features derived from an
	earlier compiler named "{B}".  In fact, C was briefly named
	"NB".  B was itself strongly influenced by {BCPL}.  Before
	{Bjarne Stroustrup} settled the question by designing {C++},
	there was a humorous debate over whether C's successor should
	be named "D" or "P" (following B and C in "BCPL").

	C is terse, low-level and permissive.  It has a {macro
	preprocessor}, {cpp}.

	Partly due to its distribution with {Unix}, C became immensely
	popular outside {Bell Labs} after about 1980 and is now the
	dominant language in systems and {microcomputer} applications
	programming.  It has grown popular due to its simplicity,
	efficiency, and flexibility.  C programs are often easily
	adapted to new environments.

	C is often described, with a mixture of fondness and disdain,
	as "a language that combines all the elegance and power of
	{assembly language} with all the readability and
	maintainability of assembly language".

	Ritchie's original C is known as {K&R C} after Kernighan and
	Ritchie's book.  A modified version has been {standardised
	(standard)} as {ANSI C}.

	See also {ACCU}, {ae}, {c68}, {c386}, {C-Interp}, {cxref},
	{dbx}, {dsp56k-gcc}, {dsp56165-gcc}, {gc}, {GCT}, {GNU C},
	{GNU superoptimiser}, {Harvest C}, {malloc}, {mpl},
	{Pthreads}, {ups}.

	[{Jargon File}]

	(1996-06-01)

C#

	<language> An {object-oriented} language devised and promoted
	by {Microsoft}, intended to replace {Java}, which it strongly
	resembles.

	The name is pronounced "C sharp", as in the musical note.  The
	language is sometimes humorously referred to as "D-flat"
	(which is the same note).

	{(http://wiht.link/csharp-resources)}.

	(2016-03-02)

C*

	<language, parallel> An {object-oriented}, {data-parallel}
	superset of {ANSI C} with synchronous {semantics}, for the
	{Connection Machine}, designed by {Thinking Machines}, 1987.
	C* adds a "domain" data type and a selection statement for
	parallel execution in domains.

	An unimplemented language called "{Parallel C}" [which one?]
	influenced the design of {C*}.  {Dataparallel-C} was based on
	{C*}.

	["C*: An Extended C Language for Data Parallel Programming",
	J.R. Rose et al, Proc Second Intl Conf on Supercomputing,
	L.P. Kartashev et al eds, May 1987, pp 2-16].

	["C* Programming Manual", Thinking Machines Corp, 1986].

	[{Jargon File}]

	(2000-11-14)

C++

	<language> One of the most used {object-oriented} languages, a
	superset of {C} developed primarily by {Bjarne Stroustrup}
	<bs@alice.att.com> at {AT&T} {Bell Laboratories} in 1986.

	In C++ a {class} is a user-defined {type}, syntactically a
	{struct} with {member functions}.  {Constructors} and
	{destructors} are member functions called to create or destroy
	{instances}.  A {friend} is a nonmember function that is
	allowed to access the private portion of a class.  C++ allows
	{implicit type conversion}, {function inlining}, {overloading}
	of operators and function names, and {default function
	arguments}.  It has {streams} for I/O and {references}.

	C++ 2.0 (May 1989) introduced {multiple inheritance},
	{type-safe linkage}, pointers to members, and {abstract
	classes}.

	C++ 2.1 was introduced in ["Annotated C++ Reference Manual",
	B. Stroustrup et al, A-W 1990].

	{MS-DOS
	(ftp://grape.ecs.clarkson.edu/pub/msdos/djgpp/djgpp.zip)},
	{Unix ANSI C++
	(ftp://gnu.org/pub/gnu/g++-1.39.0.tar.Z)} - X3J16
	committee. (They're workin' on it).

	See also {cfront}, {LEDA}, {uC++}.

	{Usenet} newsgroup: {news:comp.lang.c++}.

	["The C++ Programming Language", Bjarne Stroustrup, A-W,
	1986].

	(1996-06-06)

C+-

	<language, humour> (C More or Less) A subject-oriented language
	(SOL).  Each C+- {class} instance, known as a subject, holds
	hidden {members}, known as prejudices, agendas or undeclared
	preferences, which are impervious to outside messages; as well as
	public members, known as boasts or claims.

	The following {C} {operators} are overridden as shown:

	 >    better than
	 <    worse than
	 >>   way better than
	 <<   forget it
	 !    not on your life
	 ==   comparable, other things being equal
	 !==  get a life, guy!

	C+- is {strongly typed}, based on stereotyping and self-righteous
	logic.  The {Boolean} {variables} TRUE and FALSE (known as
	constants in other, less realistic languages) are supplemented
	with CREDIBLE and DUBIOUS, which are fuzzier than Zadeh's
	traditional {fuzzy logic} categories.  All Booleans can be
	declared with the modifiers strong and weak.  Weak implication is
	said to "preserve deniability" and was added at the request of the
	DoD to ensure compatibility with future versions of {Ada}.
	Well-formed falsehoods (WFFs) are {assignment}-compatible with all
	Booleans.  What-if and why-not interactions are aided by the
	special conditional EVENIFNOT X THEN Y.

	C+- supports {information hiding} and, among {friend classes}
	only, rumor sharing.  Borrowing from the {Eiffel} lexicon,
	non-friend classes can be killed by arranging contracts.  Note
	that friendships are {intransitive}, {volatile} and
	non-{Abelian}.

	{Operator precedence} rules can be suspended with the dwim
	{pragma}, known as the "{Do what I mean}".

	{ANSIfication} will be firmly resisted.  C+-'s slogan is "Be Your
	Own Standard."

	[{Jargon File}]

	(1999-06-15)

C+@

	<language> (Formerly "Calico").  An {object-oriented language}
	from {Bell Laboratories} which uniformly represents all data
	as pointers to self-described objects.  C+@ provides {multiple
	inheritance} with {delegation} and with control over which
	{methods} come from which delegated object; and {default
	methodologies}.  It has a simple {syntax} with emphasis on
	graphics.  It was originally used for prototyping of
	telecommunication services.

	The language is patented by AT&T and {Unir Tech} has the
	exclusive license from Bell Labs to distribute C+@.
	Unfortunately Unir is owned and operated by well-known
	anti-{IETF} ranter, Jim Fleming, which may have had something
	to do with the language's rapid disappearence from the radar
	screen.

	It runs under {SunOS} and compiles to {Vcode}.

	E-mail: Jim Vandendorpe <jimvan@iexist.att.com>.

	["A Dynamic C-Based Object-Oriented System for Unix", S.
	Engelstad et al, IEEE Software 8(3):73-85 (May 1991)].

	["The C+@ Programming Language", J. Fleming, Dr Dobbs J, Oct
	1993, pp.24-32].

	[{Jargon File}]

	(2005-01-05)

C-10

	<language> An improved version of {COLINGO}.

	[Sammet 1969, p.702].

	(1994-10-28)

C1 security

	{Orange Book}

c2man

	<tool> An automatic {documentation} extraction tool by Graham
	Stoney.  c2man extracts comments from {C} source code to
	generate functional interface documentation in the same format
	as sections 2 and 3 of the {Unix} Programmer's Manual.  It
	looks for comments near the objects they document, rather than
	imposing a rigid {syntax} or requiring the programmer to use a
	typesetting language.  Acceptable documentation can often be
	generated from existing code with no modifications.

	c2man supports both {K&R} and {ISO}/{ANSI C} coding styles.
	Output can be in {nroff} -man, {Texinfo} or {LaTeX} format.
	It {automagically} documents {enum} parameter and return
	values, it handles both {C} (/* */) and {C++} (//) style
	comments, but not C++ grammar (yet).  It requires {yacc},
	{byacc} or {bison} for syntax analysis; {lex} or {flex} for
	{lexical analysis} and {nroff}, {groff}, {texinfo} or {LaTeX}
	to format the output.  It runs under {Unix}, {OS/2} and
	{MS-DOS}.

	Version 2.0 patchlevel 25 (1995-10-25).

	{Washington FTP
	(ftp://ftp.wustl.edu/usenet/comp.sources.reviewed/volume03/)}.
	{Stuttgart FTP
	(ftp://ftp.informatik.uni-stuttgart.de/pub/archive/comp.sources/reviewed/)}.
	{Patches
	(ftp://lth.se/pub/netnews/sources.bugs/volume93/sep/)}.

	Patches posted to {Usenet} newsgroups {news:comp.sources.bugs}
	and {news:comp.sources.reviewed}.

	(2003-05-02)

C2 security

	{Orange Book}

c386

	<tool> A {compiler} for {K&R C} plus {prototypes} and other
	{ANSI C} features by Matthew Brandt, Christoph van Wuellen,
	Keith and Dave Walker.  c386 is targetted to several {68000}
	and {Intel 80386} {assemblers}, including {gas}.
	{floating-point} support is by {inline code} or {emulation}.
	It can produce lots of warnings and generates better code than
	{ACK}.

	{Version 4.2a
	(ftp://bugs.nosc.mil/pub/Minix/common-pkgs/c386-4.2.tar.Z)}.

	(2009-11-11)

C5

	<language> An {OPS5} implementation in {C}.

	(2009-11-13)

C64

	{Commodore 64}

c68

	{c386}

CA

	1. <theory, architecture> {cellular automaton}.

	2. <company> {Computer Associates}.

	3. <cryptography> {Certificate Authority}.

ca

	<networking> The {country code} for Canada.

	(1995-04-19)

cable modem

	<communications, hardware> A type of {modem} that allows
	people to access the {Internet} via their cable television
	service.

	A cable modem can transfer data at 500 {kbps} or higher,
	compared with 28.8 kbps for common telephone line modems, but
	the actual transfer rates may be lower depending on the number
	of other simultaneous users on the same cable.

	Industry pundits often point out that the cable system still
	does not have the {bandwidth} or service level in many areas
	to make this feasible.  For example, it has to be capable of
	two-way communication.

	See also: {DOCSIS}.

	(2000-12-19)

cache

	<memory management> /kash/ A small fast memory holding
	recently accessed data, designed to speed up subsequent access
	to the same data.  Most often applied to processor-memory
	access but also used for a local copy of data accessible over
	a network etc.

	When data is read from, or written to, {main memory} a copy is
	also saved in the cache, along with the associated main memory
	address.  The cache monitors addresses of subsequent reads to
	see if the required data is already in the cache.  If it is (a
	{cache hit}) then it is returned immediately and the main
	memory read is aborted (or not started).  If the data is not
	cached (a {cache miss}) then it is fetched from main memory
	and also saved in the cache.

	The cache is built from faster memory chips than main memory
	so a cache hit takes much less time to complete than a normal
	memory access.  The cache may be located on the same
	{integrated circuit} as the {CPU}, in order to further reduce
	the access time.  In this case it is often known as {primary
	cache} since there may be a larger, slower {secondary cache}
	outside the CPU chip.

	The most important characteristic of a cache is its {hit rate}
	- the fraction of all memory accesses which are satisfied from
	the cache.  This in turn depends on the cache design but
	mostly on its size relative to the main memory.  The size is
	limited by the cost of fast memory chips.

	The hit rate also depends on the access pattern of the
	particular program being run (the sequence of addresses being
	read and written).  Caches rely on two properties of the
	access patterns of most programs: temporal locality - if
	something is accessed once, it is likely to be accessed again
	soon, and spatial locality - if one memory location is
	accessed then nearby memory locations are also likely to be
	accessed.  In order to exploit spatial locality, caches often
	operate on several words at a time, a "{cache line}" or "cache
	block".  Main memory reads and writes are whole {cache lines}.

	When the processor wants to write to main memory, the data is
	first written to the cache on the assumption that the
	processor will probably read it again soon.  Various different
	policies are used.  In a {write-through} cache, data is
	written to main memory at the same time as it is cached.  In a
	{write-back} cache it is only written to main memory when it
	is forced out of the cache.

	If all accesses were writes then, with a write-through policy,
	every write to the cache would necessitate a main memory
	write, thus slowing the system down to main memory speed.
	However, statistically, most accesses are reads and most of
	these will be satisfied from the cache.  Write-through is
	simpler than write-back because an entry that is to be
	replaced can just be overwritten in the cache as it will
	already have been copied to main memory whereas write-back
	requires the cache to initiate a main memory write of the
	flushed entry followed (for a processor read) by a main memory
	read.  However, write-back is more efficient because an entry
	may be written many times in the cache without a main memory
	access.

	When the cache is full and it is desired to cache another line
	of data then a cache entry is selected to be written back to
	main memory or "flushed".  The new line is then put in its
	place.  Which entry is chosen to be flushed is determined by a
	"{replacement algorithm}".

	Some processors have separate instruction and data caches.
	Both can be active at the same time, allowing an instruction
	fetch to overlap with a data read or write.  This separation
	also avoids the possibility of bad {cache conflict} between
	say the instructions in a loop and some data in an array which
	is accessed by that loop.

	See also {direct mapped cache}, {fully associative cache},
	{sector mapping}, {set associative cache}.

	(1997-06-25)

cache block

	{cache line}

cache coherency

	<storage> (Or "cache consistency") /kash koh-heer'n-see/ The
	synchronisation of data in multiple {caches} such that reading
	a memory location via any cache will return the most recent
	data written to that location via any (other) cache.

	Some {parallel processors} do not cache accesses to {shared
	memory} to avoid the issue of cache coherency.  If caches are
	used with shared memory then some system is required to detect
	when data in one processor's cache should be discarded or
	replaced because another processor has updated that memory
	location.  Several such schemes have been devised.

	(1998-11-10)

cache conflict

	<storage> A sequence of accesses to memory repeatedly
	overwriting the same {cache} entry.  This can happen if two
	blocks of data, which are mapped to the same set of cache
	locations, are needed simultaneously.

	For example, in the case of a {direct mapped cache}, if
	{arrays} A, B, and C map to the same range of cache locations,
	thrashing will occur when the following loop is executed:

		for (i=1; i<n; i++)
			C[i] = A[i] + B[i];

	Cache conflict can also occur between a program loop and the
	data it is accessing.

	See also {ping-pong}.

	(1997-01-21)

cache consistency

	{cache coherency}

cache hit

	<storage> A request to read from memory which can satisfied
	from the {cache} without using the {main memory}.

	Opposite: {cache miss}.

	(1997-01-21)

cache line

	<storage> (Or cache block) The smallest unit of memory than
	can be transferred between the {main memory} and the {cache}.

	Rather than reading a single word or byte from main memory at
	a time, each cache entry is usually holds a certain number of
	words, known as a "cache line" or "cache block" and a whole
	line is read and cached at once.  This takes advantage of the
	principle of locality of reference: if one location is read
	then nearby locations (particularly following locations) are
	likely to be read soon afterward.  It can also take advantage
	of {page-mode} {DRAM} which allows faster access to
	consecutive locations.

	(1997-01-21)

cache memory

	{cache}

cache miss

	<storage> A request to read from memory which cannot be
	satisfied from the {cache}, for which the {main memory} has to
	be consulted.

	Opposite: {cache hit}.

	(1997-01-21)

Cache On A STick

	<architecture> (COAST) {Intel Corporation} attempt to's
	standardise the modular {L2 cache} subsystem in
	{Pentium}-based computers.

	A COAST module should be about 4.35" wide by 1.14" high.
	According to earlier specifications from {Motorola}, a module
	between 4.33" and 4.36" wide, and between 1.12" and 1.16" high
	is within the COAST standard.  Some module vendors, including
	some major motherboard suppliers, greatly violate the height
	specification.

	Another COAST specification violated by many suppliers
	concerns clock distribution in synchronous modules.  The
	specification requires that the clock tree to each synchronous
	chip be balanced, i.e. equal length from edge of the connector
	to individual chips.  An unbalanced clock tree increases
	reflections and noise.

	For a 256 {kilobyte} cache module the standard requires the
	same clock be used for both chips but some vendors use
	separate clocks to reduce loading on the clock driver and
	hence increase the clock speed.  However, this creates
	unbalanced loading in other motherboard configurations, such
	as motherboards with soldered caches in the system.

	(1996-06-10)

caching

	{cache}

CACI

	<company> A company developing and marketing {SIMSCRIPT},
	{MODSIM} and other {simulation} software products.

	Telephone: +1 (619) 457-9681.

	(1994-09-22)

CACM

	{Communications of the ACM}

CAD

	{Computer Aided Design}

CAD/CAM

	{Computer Aided Design}/Computer Aided Manufacturing.

CADD

	{Computer Aided Detector Design}

Cadence Design Systems

	<company> A company that sells {electronic design automation}
	software and services.

	{(http://cadence.com/)}.

	See also {Verilog}.

	(1999-04-16)

CADET

	Computer Aided Design Experimental Translator.

	[Sammet 1969, p. 683].

	(1994-11-29)

CADRE

	<company> The US {software engineering} vendor which merged
	with {Bachman Information Systems} to form {Cayenne Software}
	in July 1996.

	(1998-02-08)

CAE

	1. <operating system> {Common Applications Environment}.

	2. <application> {Computer Aided Engineering}.

CAF

	{constant applicative form}

CAFE

	["Job Control Languages: MAXIMOP and CAFE", J. Brandon, Proc
	BCS Symp on Job Control Languages--Past Present and Future,
	NCC, Manchester, England 1974].

	(1994-10-28)

CAGE

	Early system on IBM 704.  Listed in CACM 2(5):16 (May 1959).

CAI

	{Computer-Aided Instruction}

Cairo

	{Windows NT 4}

CAIS

	{Common APSE Interface Specification}

CAIS-A

	Common APSE Interface Set A

	DoD-STD-1838A.

CAiSE

	Conference on Advanced Information Systems Engineering.

CAJOLE

	<language> (Chris And John's Own LanguagE) A {dataflow}
	language developed by Chris Hankin <clh@doc.ic.ac.uk> and John
	Sharp at {Westfield College}.

	["The Data Flow Programming Language CAJOLE: An Informal
	Introduction", C.L. Hankin et al, SIGPLAN Notices 16(7):35-44
	(Jul 1981)].

	(1994-11-08)

CAL

	1. {Computer Assisted Learning}.

	2. {Course Author Language}.

Calc

	<tool, mathematics> An extensible, advanced desk calculator
	and mathematical tool written in {Emacs Lisp} by Dave
	Gillespie <daveg@synaptics.com>.  Calc runs as part of {GNU
	Emacs}.  You can use Calc as only a simple four-function
	calculator, but it also provides additional features including
	choice of algebraic or {RPN} ({stack}-based) entry,
	logarithms, trigonometric and financial functions, {arbitrary
	precision}, complex numbers, vectors, matrices, dates, times,
	infinities, sets, algebraic simplification, differentiation,
	and integration.

	FTP calc-2.02.tar.z from your nearest {GNU archive site}.

	(2000-10-20)

calculator

	{bitty box}

Calculus of Communicating Systems

	(CCS) A mathematical model (a formal language) for describing
	processes, mostly used in the study of {parallelism}.  A CCS
	program, written in {behaviour expressions syntax} denotes a
	process behaviour.  Programs can be compared using the notion
	of {observational equivalence}.

	["A Calculus of Communicating Systems", LNCS 92, Springer
	1980].

	["Communication and Concurrency", R. Milner, P-H 1989].

	(1994-11-29)

Calendar API

	{Calendar Application Programming Interface}

Calendar Application Programming Interface

	(CAPI, Calendar API) An {API} for calendar {software}.

	{Microsoft} has defined a CAPI for their {Schedule+}
	application.

	(1995-01-11)

Caliban

	A {declarative} annotation language for controlling the
	partitioning and placement of the evaluation of expressions in
	a distributed {functional language}.  Designed by Paul Kelly
	<phjk@doc.ic.ac.uk>, {Imperial College}.

	["Functional Programming for Loosely-coupled Multiprocessors",
	P. Kelly, Pitman/MIT Press, 1989].

	(1995-01-11)

Calico

	{C+@}

California State University San Marcos

	(CSUSM)

	{(http://coyote.csusm.edu/)}.

	(1994-12-21)

callback

	1. <programming> A scheme used in {event-driven} programs
	where the program registers a {subroutine} (a "callback
	handler") to handle a certain {event}.  The program does not
	call the handler directly but when the event occurs, the
	{run-time system} calls the handler, usually passing it
	arguments to describe the event.

	2. <communications, security> A {user authentication} scheme
	used by some computers running {dial-up} services.  The user
	dials in to the computer and gives his {user name} and
	{password}.  The computer then hangs up the connection and
	uses an {auto-dial} {modem} to call back to the user's
	registered telephone number.  Thus, if an unauthorised person
	discovers a user's password, the callback will go, not to him,
	but to the owner of that login who will then know that his
	account is under attack.

	However, some {PABXs} can be fooled into thinking that the
	caller has hung up by sending them a dial tone.  When the
	computer tries to call out on the same line it is not actually
	dialing through to the authorised user but is still connected
	to the original caller.

	3. <communications> {cost control callback}.

	(2003-07-13)

call-by-name

	<reduction> (CBN) (Normal order reduction, leftmost, outermost
	reduction).  An {argument} passing convention (first provided
	by {ALGOL 60}?)  where argument expressions are passed
	unevaluated.  This is usually implemented by passing a pointer
	to a {thunk} - some code which will return the value of the
	argument and an environment giving the values of its {free
	variables}.

	This {evaluation strategy} is guaranteed to reach a {normal
	form} if one exists.

	When used to implement {functional programming} languages,
	call-by-name is usually combined with {graph reduction} to
	avoid repeated evaluation of the same expression.  This is
	then known as {call-by-need}.

	The opposite of call-by-name is {call-by-value} where
	arguments are evaluated before they are passed to a function.
	This is more efficient but is less likely to terminate in the
	presence of infinite data structures and {recursive}
	functions.

	Arguments to {macros} are usually passed using call-by-name.

	(2006-05-27)

call-by-need

	<reduction> A {reduction strategy} which delays evaluation of
	{function} {arguments} until their values are needed.  A value
	is needed if it is an argument to a {primitive} function or it
	is the condition in a {conditional}.  Call-by-need is one
	aspect of {lazy evaluation}.

	The term first appears in Chris Wadsworth's thesis "Semantics
	and Pragmatics of the Lambda calculus" (Oxford, 1971, p. 183).
	It was used later, by J. Vuillemin in his thesis (Stanford,
	1973).

	(1995-05-27)

call-by-reference

	<programming> An {argument} passing convention where the
	address of an argument {variable} is passed to a {function} or
	{procedure}, as opposed to passing the value of the argument
	expression.  Execution of the function or procedure may have
	{side-effects} on the actual argument as seen by the caller.
	The {C} language's "&" (address of) and "*" (dereference)
	operators allow the programmer to code explicit
	call-by-reference.  Other languages provide special syntax to
	declare reference arguments (e.g. {ALGOL 60}).

	See also {call-by-name}, {call-by-value},
	{call-by-value-result}.

	(2006-05-27)

call-by-value

	(CBV) An {evaluation strategy} where arguments are evaluated
	before the function or procedure is entered.  Only the values
	of the arguments are passed and changes to the arguments
	within the called procedure have no effect on the actual
	arguments as seen by the caller.  See {applicative order
	reduction}, {call-by-value-result}, {strict evaluation},
	{call-by-name}, {lazy evaluation}.

call-by-value-result

	An argument passing convention where the {actual argument} is
	a variable V whose value is copied to a local variable L
	inside the called function or procedure.  If the procedure
	modifies L, these changes will not affect V, which may also be
	in scope inside the procedure, until the procedure returns
	when the final value of L is copied to V.  Under
	{call-by-reference} changes to L would affect V immediately.
	Used, for example, by {BBC BASIC V} on the {Acorn}
	{Archimedes}.

call/cc

	{call-with-current-continuation}

Call Data Record

	<telecommunications> (CDR) A data record that contains
	information related to a telephone call, including the
	origination and destination addresses of the call, the time
	the call started and ended, the duration of the call, the time
	of day the call was made, toll charges that were added through
	the network, or charges for operator services.

	[Context?]

	(2010-03-21)

callee

	<programming> The {function} or {subroutine} being called by
	the {caller}.

	(2001-05-09)

Caller ID

	<communications> (CID) A short piece of text transmitted by
	some telephone systems describing the origin of a call,
	e.g. the name of the caller.  Some telephone handsets can
	display this.  A {computer telephony integration} system might
	use it to trigger actions on the callee's computer such as
	looking up the caller in a database and displaying their
	details on screen.

	There may also be a separate "caller id number" giving the
	telephone number of the originator of the call.

	(2008-04-30)

calling convention

	<programming> The arrangement of {arguments} for a procedure
	or function call.  Different programming languages may require
	arguments to be pushed onto a {stack} or entered in
	{registers} in left-to-right or right-to left order, and
	either the caller or the callee can be responsible for
	removing the arguments.  The calling convention also
	determines if a variable number of arguments is allowed.

	(1995-11-11)

Call-Level Interface

	<database, standard> (SQL/CLI) A programming interface
	designed to support {SQL} access to {databases} from
	shrink-wrapped {application programs}.

	CLI was originally created by a subcommittee of the {SQL
	Access Group} (SAG).  The SAG/CLI specification was published
	as the {Microsoft} {Open DataBase Connectivity} (ODBC)
	specification in 1992.  In 1993, SAG submitted the CLI to the
	{ANSI} and {ISO} SQL committees.

	SQL/CLI provides an international standard
	implementation-independent CLI to access SQL databases.
	{Client-server} tools can easily access databases through
	{dynamic link libraries}.  It supports and encourages a rich
	set of client-server tools.

	SQL/CLI is an addendum to 1992 SQL standard (SQL-92).  It was
	completed as ISO standard ISO/IEC 9075-3:1995 Information
	technology -- Database languages -- SQL -- Part 3: Call-Level
	Interface (SQL/CLI).  The current SQL/CLI effort is adding
	support for {SQL3}.

	{(http://jcc.com/sql_cli.html)}.

	(1996-10-27)

Call Unix

	<communications, tool> (cu) The original {Unix} {virtual
	terminal} utility.  cu allows a user on one computer to log in
	to another connected via {Ethernet}, direct {serial line} or
	{modem}.  It shares some configuration files with {UUCP} in
	order to be able to use the same connections without conflict.

	{Unix manual page}: cu(1).

	(1997-12-01)

Callware

	<company> The developers of {Phonetastic}.

	(1996-12-08)

call-with-current-continuation

	<programming> (call/cc) A {Lisp} control {function} that
	implements the {continuation passing style} of programming.

	In continuation passing style (CPS), every function f takes an
	extra final argument k called the "continuation".  The
	continuation is itself a function and represents the rest of the
	program.  Instead of just returning a value in the normal way, f
	passes it as an argument to k and returns the result of that.

	call/cc takes a function f as its argument and calls f, passing it
	the current continuation k.  It thus allows a CPS function to be
	called in a non-CPS (direct) context.

	For example, if the final result is to print the value returned by
	call/cc then anything passed to k will also be printed.

	E.g, in {Scheme}:

	 (define (f k)
		 (k 1)
		 (k 2)
		 3)

	 (display (call-with-current-continuation f))

	Will display 1.

	[Is this correct?]

	(2014-09-24)

CALS

	Computer-Aided Acquisition and Logistics Support: a DoD
	standard for electronic exchange of data with commercial
	suppliers.

Caltech Intermediate Form

	<language> (CIF) A geometry language for {VLSI} design, in
	which the primitives are coloured rectangles.

	["Introduction to VLSI Systems", Mead & Conway, A-W 1980,
	Section 4.5].

	(1995-01-25)

CAM

	1. <storage, architecture> {content addressable memory}.

	2. <application> {computer aided manufacturing}.

CAM-6

	Software for running {cellular automata}.  CAM-6 has been
	implemented in hardware as {CAM-PC}.

	(1995-04-21)

CAMAL

	<tool> CAMbridge ALgebra system.

	A {symbolic mathematics} system used in Celestial Mechanics
	and General Relativity.  CAMAL was implemented in {BCPL} on
	{Titan}.

	["CAMAL User's Manual", John P. Fitch, Cambridge U, England
	(1975)].

	["The Design of the Cambridge Algebra System", S.R. Bourne et
	al, Proc 2nd Symp of Symb & Alg Manip, SIGSAM 1971].

	(1995-02-16)

Cambridge Lisp

	A flavour of Lisp using BCPL.  Sources owned by Fitznorman
	partners.

CamelCase

	<programming> The practice of concatenating words with either all
	words capitalised (e.g. "ICantReadThis" - sometimes called
	"UpperCamelCase" or "PascalCase") or all except the first
	("iCantReadThis" - called "lowerCamelCase").  It is used in
	contexts where space characters are not allowed, such as
	identifiers in {source code}.

	Modern best practice separates words in identifiers with
	{underscore} for readability (like_this_example).  CamelCase is
	probably a historical throw-back to systems that had no underscore
	or when the length of identifiers was constrained either by the
	programming language or by the width of computer displays.
	Unfortunately it has infected many projects, origanisations and
	programming languages such as {Java} where the uniniated create
	identifiers like "MemberSubmissionAddressingWSDLParserExtension".

	(2014-12-02)

Camelot Library

	<library>

	["The Camelot Library", J. Bloch, in "Guide to the Camelot
	Distributed Transaction Facility: Release I", A.Z. Spector et
	al eds, CMU 1988, pp. 29-62].

	[What is it?]

	(1995-04-19)

camera ready

	<publication> A final edition of a document or graphic (e.g. a
	newspaper advertisement or a technical paper for a journal)
	that is of suitable quality for mass reproduction by making
	printing plates from the negatives by photoengraving.

	(1996-11-15)

CAMIL

	Computer Assisted/Managed Instructional Language.

	A language used for {CAI} at Lowry AFB, CO.

	["The CAMIL Programming Language", David Pflasterer, SIGPLAN
	Notices 13(11):43 (Nov 1978)].

	(1994-11-09)

CAML

	<language>

	1. A language for preparation of animated movies.  1976.

	(1994-11-09)

	2. {Categorical Abstract Machine Language}.

	(2000-07-06)

Caml Light

	A small portable implementation of a version of {CAML} by
	Xavier Leroy <Xavier.Leroy@inria.fr> and Damien Doligez of
	{INRIA}.  Caml Light uses a {bytecode interpreter} written in
	{C}.  It adds a {Modula-2}-like {module} system, {separate
	compilation}, {lazy streams} for parsing and printing,
	graphics primitives and an interface with {C}.

	Version 0.6 runs on {Unix}, {MS-DOS}, {Macintosh}, {Atari ST}
	and {Amiga}.  It includes an {interpreter}, {compiler},
	{Emacs} mode, libraries, {scanner generator}, {parser
	generator}, {run-time support} and an interactive development
	environment.

	The latest version, as of April 2003, is 0.75 and runs on
	{Unix}, {Macintosh} and {Windows}.

	The development of Caml Light has been stopped; current
	development is on {Objective Caml}.

	{(http://caml.inria.fr/distrib-caml-light-eng.html)}.
	{(ftp://ftp.inria.fr/lang/caml-light/)}.

	E-mail: <caml@inria.fr>.

	Mailing list: <caml-list@inria.fr>.

	{Usenet} newsgroup: {news:comp.lang.ml}.

	(2003-04-12)

CAM-PC

	<hardware> A {cellular automata} circuit board which is a
	hardware implementation from {Automatrix} of the {MIT} {CAM-6}
	machine.  It comes with dozens of experiments and
	applications.

	{(http://automatrix.com/campc/index.html)}.

	(1995-04-21)

Campus Wide Information System

	(CWIS) Information and services made publicly available at
	university sites via {kiosks} running interactive computing
	systems, possibly via campus networks.  Services routinely
	include directory information, calendars, {bulletin boards}
	and {databases}.

	(1994-11-09)

CAN

	{Cancel}

Canada

	Country with {domain} "ca".

	(1995-04-06)

Cancel

	<character> (CAN, Control-X) {ASCII} character 24.

	(1996-06-28)

Cancelbunny

	{Cancelpoodle}

Cancelm00se

	{Cancelmoose}

Cancelmoose

	<messaging> A semi-mythical being that cancels {Usenet}
	{articles} posted by others.  (In general, an article can only
	be cancelled by its original author.)

	The Cancelmoose's usual target is {spam} or extremely
	excessive {cross-post}ing.

	Some believe that the Cancelmoose exists only in the same
	mythic sense that {B1FF}, the {NSA line eater} and {Shub
	Internet} exist; others consider Cancelmoose's historicity to
	be closer to that of {Kibo}.  The latter group assume that the
	real Cancelmoose is not one person (or moose), but instead is
	a cabal of {NNTP} wonks.  However, the Cancelmoose is probably
	real, seeing as how it has its own {website}.

	{(http://nocem.org/)}.

	(1999-01-14)

Cancelpoodle

	<messaging> (Or Cancelbunny) A manifestation of the
	{Cancelmoose} in the form of a more selective (and probably
	not automated) way to cancel {Usenet} articles.

	The term became common during the alt.religion.scientology
	wars of the mid-90s, during which Cancelpoodles were used.
	The "poodle" part is an allusion to one of the parties
	obliquely involved in the fray, who an earlier well-known
	witticism had compared to "a psychotic poodle".

	(1999-01-14)

candidate key

	<database> One of several possible attributes or combinations
	of attributes which can be used to uniquely identify a body of
	information (a "{record}").  The chosen candidate key is
	called the {primary key}.

	(2006-05-29)

Candle

	Part of the {Scorpion} environment development system.

	(1994-11-09)

candygrammar

	<language> A programming-language grammar that is mostly
	{syntactic sugar}; a play on "candygram".  {COBOL}, {Apple
	Computer}'s {Hypertalk} language, and many {4GLs} share this
	property.  The intent is to be as English-like as possible and
	thus easier for unskilled people to program.  However,
	{syntax} isn't what makes programming hard; it's the mental
	effort and organisation required to specify an {algorithm}
	precisely.  Thus "candygrammar" languages are just as
	difficult to program in, and far more painful for the
	experienced hacker.

	{GLS} notes: The overtones from the 1977 Chevy Chase "Jaws"
	parody on Saturday Night Live should not be overlooked.
	Someone lurking outside an apartment door tries to get the
	occupant to open up, while ominous music plays in the
	background.  The last attempt is a half-hearted "Candygram!"
	When the door is opened, a shark bursts in and chomps the poor
	occupant.  There is a moral here for those attracted to
	candygrammars.

	[{Jargon File}]

	(2004-09-23)

canonical

	(Historically, "according to religious law")

	1. <mathematics> A standard way of writing a formula.  Two
	formulas such as 9 + x and x + 9 are said to be equivalent
	because they mean the same thing, but the second one is in
	"canonical form" because it is written in the usual way, with
	the highest power of x first.  Usually there are fixed rules
	you can use to decide whether something is in canonical form.
	Things in canonical form are easier to compare.

	2. <jargon> The usual or standard state or manner of
	something.  The term acquired this meaning in computer-science
	culture largely through its prominence in {Alonzo Church}'s
	work in computation theory and {mathematical logic} (see
	{Knights of the Lambda-Calculus}).

	Compare {vanilla}.

	This word has an interesting history.  Non-technical academics
	do not use the adjective "canonical" in any of the senses
	defined above with any regularity; they do however use the
	nouns "canon" and "canonicity" (not "canonicalness"* or
	"canonicality"*). The "canon" of a given author is the
	complete body of authentic works by that author (this usage is
	familiar to Sherlock Holmes fans as well as to literary
	scholars).  "The canon" is the body of works in a given field
	(e.g. works of literature, or of art, or of music) deemed
	worthwhile for students to study and for scholars to
	investigate.

	The word "canon" derives ultimately from the Greek "kanon"
	(akin to the English "cane") referring to a reed.  Reeds were
	used for measurement, and in Latin and later Greek the word
	"canon" meant a rule or a standard.  The establishment of a
	canon of scriptures within Christianity was meant to define a
	standard or a rule for the religion.  The above non-technical
	academic usages stem from this instance of a defined and
	accepted body of work.  Alongside this usage was the
	promulgation of "canons" ("rules") for the government of the
	Catholic Church.  The usages relating to religious law derive
	from this use of the Latin "canon".  It may also be related to
	arabic "qanun" (law).

	Hackers invest this term with a playfulness that makes an
	ironic contrast with its historical meaning.  A true story:
	One Bob Sjoberg, new at the {MIT AI Lab}, expressed some
	annoyance at the incessant use of jargon.  Over his loud
	objections, {GLS} and {RMS} made a point of using as much of
	it as possible in his presence, and eventually it began to
	sink in.  Finally, in one conversation, he used the word
	"canonical" in jargon-like fashion without thinking.  Steele:
	"Aha!  We've finally got you talking jargon too!"  Stallman:
	"What did he say?"  Steele: "Bob just used "canonical" in the
	canonical way."

	Of course, canonicality depends on context, but it is
	implicitly defined as the way *hackers* normally expect things
	to be.  Thus, a hacker may claim with a straight face that
	"according to religious law" is *not* the canonical meaning of
	"canonical".

	(2002-02-06)

Canonical Encoding Rules

	<protocol, standard> (CER) A restricted variant of {BER} for
	producing unequivocal {transfer syntax} for data structures
	described by {ASN.1}.

	Whereas {BER} gives choices as to how data values may be
	encoded, CER and {DER} select just one encoding from those
	allowed by the basic encoding rules, eliminating all of the
	options.  They are useful when the encodings must be
	preserved, e.g. in security exchanges.

	CER and {DER} differ in the set of restrictions that they
	place on the encoder.  The basic difference between CER and
	{DER} is that {DER} uses definitive length form and CER uses
	indefinite length form.

	Documents: {ITU-T} X.690, {ISO} 8825-1.

	See also {PER}.

	(1998-05-19)

canonical name

	(CNAME) A host's official name as opposed to an alias.  The
	official name is the first hostname listed for its {Internet
	address} in the hostname database, {/etc/hosts} or the
	{Network Information Service} (NIS) map hosts.byaddr ("hosts"
	for short).  A host with multiple network interfaces may have
	more than one Internet address, each with its own canonical
	name (and zero or more aliases).

	You can find a host's canonical name using {nslookup} if you
	say

		set querytype=CNAME

	and then type a hostname.

	(1994-11-29)

canonicity

	<theory, jargon> The extent to which something is {canonical}.

	(1995-03-03)

C (ANSI)

	{ANSI C}

can't happen

	<programming> The traditional program comment for code
	executed under a condition that should never be true, for
	example a file size computed as negative.  Often, such a
	condition being true indicates data corruption or a faulty
	{algorithm}; it is almost always handled by emitting a fatal
	error message and terminating or crashing, since there is
	little else that can be done.

	Some case variant of "can't happen" is also often the text
	emitted if the "impossible" error actually happens.  Although
	"can't happen" events are genuinely infrequent in production
	code, programmers wise enough to check for them habitually are
	often surprised at how frequently they are triggered during
	development and how many headaches checking for them turns out
	to head off.

	See also {firewall code}, {professional programming}.

	[{Jargon File}]

	(1996-05-10)

Cantor

	1. <person, mathematics> A mathematician.

	Cantor devised the diagonal proof of the uncountability of the
	{real numbers}:

	Given a function, f, from the {natural numbers} to the {real
	numbers}, consider the real number r whose binary expansion is
	given as follows: for each natural number i, r's i-th digit is
	the complement of the i-th digit of f(i).

	Thus, since r and f(i) differ in their i-th digits, r differs
	from any value taken by f.  Therefore, f is not {surjective}
	(there are values of its result type which it cannot return).

	Consequently, no function from the natural numbers to the
	reals is surjective.  A further theorem dependent on the
	{axiom of choice} turns this result into the statement that
	the reals are uncountable.

	This is just a special case of a diagonal proof that a
	function from a set to its {power set} cannot be surjective:

	Let f be a function from a set S to its power set, P(S) and
	let U = { x in S: x not in f(x) }.  Now, observe that any x in
	U is not in f(x), so U != f(x); and any x not in U is in f(x),
	so U != f(x): whence U is not in { f(x) : x in S }.  But U is
	in P(S).  Therefore, no function from a set to its power-set
	can be surjective.

	2. <language> An {object-oriented language} with {fine-grained
	concurrency}.

	[Athas, Caltech 1987.  "Multicomputers: Message Passing
	Concurrent Computers", W. Athas et al, Computer 21(8):9-24
	(Aug 1988)].

	(1997-03-14)

CAP

	1. <networking> {Columbia AppleTalk Package}.

	2. <communications> {Carrierless Amplitude/Phase Modulation}.

	3. <networking> {Competitive Access Provider}

Capabilities Maturity Model

	{Capability Maturity Model}

capability

	<operating system, security> An {operating system} security or
	access control model where specific types of access to a
	specific object are granted by giving a process this data
	structure or {token}.

	The token may be unforgeable (typically by using {encryption}
	or hardware "tagged" memory).  Capabilities are used in OSes
	such as {Hydra}, {KeyKOS}, {EROS}, {Chorus}/{Mix}, and the
	{Stanford V system}.  Similar to {Kerberos}, but in an OS
	context.

	Compare {access control list}.

	(1998-03-08)

Capability Maturity Model

	<software> (CMM) The {Software Engineering Institute}'s model
	of {software engineering} that specifies five levels of
	maturity of the processes of a software organisation.  CMM
	offers a framework for evolutionary process improvement.
	Originally applied to software development (SE-CMM), it has
	been expanded to cover other areas including Human Resources
	and Software Acquitition.

	The levels - focii - and key process areas are:

	Level 1 Initial - Heroes - None.

	Level 2 Repeatable - Project Management - Software Project
	Planning, Software Project Tracking and Oversight, Software
	Subcontract Management, Software Quality Assurance, Software
	Configuration Management, Requirements Management.

	Level 3 Defined - Engineering Process - Organisation Process
	Focus, Organisation Process Definition, Peer Reviews, Training
	Program, Inter-group Coordination, Software Product
	Engineering, Integrated Software Management.

	Level 4 Managed - Product and Process Quality - Software
	Quality Management, Quantitative Process Management.

	Level 5 Optimising - Continuous Improvement - Process Change
	Management, Technology Change Management, Defect Prevention.

	{(http://www.sei.cmu.edu/cmm/cmm.html)}.

	(2001-04-28)

capacitor

	<electronics> An electronic device that can store electrical
	charge.  The charge stored Q in Coulombs is related to the
	capacitance C in Farads and the voltage V across the capacitor
	in Volts by Q = CV.

	The basis of a {dynamic RAM} cell is a capacitor.  They are
	also used for power-supply smoothing (or "decoupling").  This
	is especially important in digital circuits where a digital
	device switching between states causes a sudden demand for
	current.  Without sufficient local power supply decoupling,
	this current "spike" cannot be supplied directly from the
	power supply due to the inductance of the connectors and so
	will cause a sharp drop in the power supply voltage near the
	switching device.  This can cause other devices to malfunction
	resulting in hard to trace {glitch}es.

	(1995-04-12)

capacity

	<communications> The maximum possible {data transfer rate} of
	a communications channel under ideal conditions.  The total
	capacity of a channel may be shared between several
	independent data streams using some kind of {multiplexing}, in
	which case, each stream's data rate may be limited to a fixed
	fraction of the total capacity.

	(2001-05-22)

CAPI

	1. {Calendar Application Programming Interface}.

	2. <cryptography> {Cryptographic Application Programming
	Interface}.

	3. <networking> {Common ISDN Application Programming
	Interface}.

Cap'n Crunch

	{Captain Crunch}

Captain Abstraction

	The champion of the principles of {abstraction} and
	modularity, who protects unwary students on {MIT}'s course
	{6.001} from the nefarious designs of Sergeant Spaghetticode
	and his vile {concrete} programming practices.

	See also {spaghetti code}.

	(1994-11-22)

Captain Crunch

	1. <person> ("Cap'n Crunch") An early 1970s
	{hacker}/{phreaker}/{phacker} who used a free whistle included
	with "Cap'n Crunch" breakfast cereal to fake pay phone system
	tones and make large quantities of free phone calls.  Also
	alludes to "{crunch}".

	{(http://well.com/user/crunch/)}.

	2. (After the above) {wardialer}.

	3. Reportedly, a program which {crash}es a computer by
	overloading the {interrupt} {stack}.

	(1998-08-25)

CAPTCHA

	<security> A type of test used to determine whether a request
	to a {website} comes from a human or a computer program,
	typically by asking the user to perform some kind of {image
	recognition} task such as reading distorted text.  The term
	was coined in 2000 by Luis von Ahn, Manuel Blum, Nicholas
	J. Hopper (all of {Carnegie Mellon University}) and John
	Langford (of {IBM}) as a contrived acronym for "Completely
	Automated Public Turing test to tell Computers and Humans
	Apart".  CAPTCHA aims to prevent software tools from
	performing actions which might degrade the service, such as
	registering user accounts or automating the playing of a game.

	(2009-01-02)

car

	{Contents of Address part of Register}

card

	1. <hardware> A circuit board.

	2. <storage> {SD card}.

	3. <history> A {punched card}.

	4. <hypertext> An alternative term for a {node} in a system
	(e.g. {HyperCard}, {Notecards}) in which the node size is
	limited.

Cardbox for Windows

	<database> A database handling program, especially useful for
	scholars and librarians.

	[Details?  Features?  Developer?  URL?]

	(1997-05-14)

Cardbus

	<hardware> The 32-bit version of the {PCMCIA} (PC Card) {bus}.

	[Spec?]

	(1996-08-20)

card creep

	{chip creep}

cardinality

	<mathematics> The number of elements in a set.  If two sets
	have the same number of elements (i.e. there is a {bijection}
	between them) then they have the same cardinality.  A
	cardinality is thus an {isomorphism class} in the {category}
	of sets.

	{aleph 0} is defined as the cardinality of the first
	{infinite} {ordinal}, {omega} (the number of {natural
	numbers}).

	(1995-03-29)

cardinal number

	The {cardinality} of some set.

CARDS

	Central Archive for Reusable Defense Software of the DoD.

card walloper

	<jargon> An {EDP} programmer who grinds out {batch programs}
	that do things like print people's paychecks.  Compare {code
	grinder}.

	See also {punched card}, {eighty-column mind}.

	[{Jargon File}]

	(2003-09-20)

Career Limiting Move

	<jargon> (CLM, Sun) Any action endangering one's future
	prospects of getting plum projects and raises, and possibly
	one's job.  E.g. "His Halloween costume was a parody of his
	manager.  He won the prize for "best CLM"."  A severe bug
	discovered by a customer might be a "CLM bug".

	(2000-08-09)

caret

	^

	Common: hat; control; uparrow; caret; {ITU-T}: circumflex.
	Rare: chevron; {INTERCAL}: shark (or shark-fin); to the ("to
	the power of"); fang; pointer (in Pascal).

careware

	/keir'weir/ (Or "{charityware}") {Shareware} for which either
	the author suggests that some payment be made to a nominated
	charity or a levy directed to charity is included on top of
	the distribution charge.

	Compare {crippleware}.

	[{Jargon File}]

	(1994-12-16)

cargo cult programming

	<programming, humour> A style of (incompetent) programming
	dominated by ritual inclusion of code or program structures
	that serve no real purpose.  A cargo cult programmer will
	usually explain the extra code as a way of working around some
	bug encountered in the past, but usually neither the bug nor
	the reason the code apparently avoided the bug was ever fully
	understood (compare {shotgun debugging}, {voodoo
	programming}).

	The term "cargo cult" is a reference to aboriginal religions
	that grew up in the South Pacific after World War II.  The
	practices of these cults centre on building elaborate mockups
	of aeroplanes and military style landing strips in the hope of
	bringing the return of the god-like aeroplanes that brought
	such marvelous cargo during the war.  Hackish usage probably
	derives from Richard Feynman's characterisation of certain
	practices as "cargo cult science" in his book "Surely You're
	Joking, Mr. Feynman" (W. W. Norton & Co, New York 1985, ISBN
	0-393-01921-7).

	[{Jargon File}]

	(2002-05-28)

Caribou CodeWorks

	<company> The company which sells {QTRADER}.

	Director of Marketing: Norm Larsen <wwcoinc@winternet.com>.

	(1995-11-05)

Carl Friedrich Gauss

	<person> A German mathematician (1777 - 1855), one of all time
	greatest.  Gauss discovered the {method of least squares} and
	{Gaussian elimination}.

	Gauss was something of a child prodigy; the most commonly told
	story relates that when he was 10 his teacher, wanting a rest,
	told his class to add up all the numbers from 1 to 100.  Gauss
	did it in seconds, having noticed that 1+...+100 = 100+...+1 =
	(101+...+101)/2.

	He did important work in almost every area of mathematics.
	Such eclecticism is probably impossible today, since further
	progress in most areas of mathematics requires much hard
	background study.

	Some idea of the range of his work can be obtained by noting
	the many mathematical terms with "Gauss" in their names.  E.g.
	{Gaussian elimination} ({linear algebra}); {Gaussian primes}
	(number theory); {Gaussian distribution} (statistics); {Gauss}
	[unit] (electromagnetism); {Gaussian curvature} (differential
	geometry); {Gaussian quadrature} (numerical analysis);
	{Gauss-Bonnet formula} (differential geometry); {Gauss's
	identity} ({hypergeometric functions}); {Gauss sums} ({number
	theory}).

	His favourite area of mathematics was {number theory}.  He
	conjectured the {Prime Number Theorem}, pioneered the {theory
	of quadratic forms}, proved the {quadratic reciprocity
	theorem}, and much more.

	He was "the first mathematician to use {complex numbers} in a
	really confident and scientific way" (Hardy & Wright, chapter
	12).

	He nearly went into architecture rather than mathematics; what
	decided him on mathematics was his proof, at age 18, of the
	startling theorem that a regular N-sided polygon can be
	constructed with ruler and compasses if and only if N is a
	power of 2 times a product of distinct {Fermat primes}.

	(1995-04-10)

Carnegie Mellon University

	<body, education> (CMU) A university in Pittsburgh,
	Pennsylvania.  {School of Computer Science
	(http://cs.cmu.edu/Web/FrontDoor.html)}.

	(1997-06-23)

carpal tunnel syndrome

	{overuse strain injury}

carriage return

	<character> (CR, Control-M, {ASCII} 13) The character which
	causes the {cursor} to move to the left margin, often used
	with {line feed} to start a new line of output.

	Encoded in {C} and {Unix} as "\r".

	(1996-06-24)

Carrierless Amplitude/Phase Modulation

	<communications> (CAP) A design of {Asymmetric Digital
	Subscriber Line} {transceiver} developed by {Bell Labs}.  CAP
	was the first ADSL design to be commercially deployed and, as
	of August 1996, was installed on more lines than any other.

	CAP is a variation of {Quadrature Amplitude Modulation}, the
	modulation used by most existing {modems} in 1997.  With CAP,
	the three channels ({POTS}, downstream data and upstream data)
	are supported by splitting the frequency spectrum.  Voice
	occupies the standard 0-4 Khz frequency band, followed by the
	upstream channel and the high-speed downstream channel.

	(1997-10-08)

carrier scanner

	<security> (Or "wardialer") A program which uses a {modem} to
	dial a series of phone numbers (say, from 770-0000 to
	770-9999), and keeps a log of what phone numbers answer with a
	modem {carrier}.  The results of such a search were generally
	used by people looking to engage in {random} mischief in
	{random} machines.

	Since the 1980s, wardialers have generally fallen into disuse,
	partly because of easily available "{caller ID}" technology,
	partly because fax machines are now in wide use and would
	often be logged as a {carrier} by a wardialer, and partly
	because there are so many new and more interesting venues for
	computerised mischief these days.

	(1997-03-16)

carrier signal

	<communications> A continuous signal of a single frequency
	capable of being modulated by a second, data-carrying signal.
	In radio communication, the two common kinds of modulation are
	{amplitude modulation} and {frequency modulation}.

	(1995-03-01)

Cartesian coordinates

	<mathematics, graphics> (After Renee Descartes, French
	philosopher and mathematician) A pair of numbers, (x, y),
	defining the position of a point in a two-dimensional space by
	its perpendicular projection onto two axes which are at right
	angles to each other.  x and y are also known as the
	{abscissa} and {ordinate}.

	The idea can be generalised to any number of independent axes.

	Compare {polar coordinates}.

	(1997-07-08)

Cartesian product

	<mathematics> (After Renee Descartes, French philosper and
	mathematician) The Cartesian product of two sets A and B is
	the set

		A x B = {(a, b) | a in A, b in B}.

	I.e. the product set contains all possible combinations of one
	element from each set.  The idea can be extended to products
	of any number of sets.

	If we consider the elements in sets A and B as points along
	perpendicular axes in a two-dimensional space then the
	elements of the product are the "{Cartesian coordinates}" of
	points in that space.

	See also {tuple}.

	(1995-03-01)

CAS

	1. <hardware> {Column Address Strobe}.

	2. <communications> (channel associated signaling) {in-band
	signalling}.

CAS 8051 Assembler

	An experimental one-pass {assembler} for the 8051 with
	{C}-like syntax by Mark Hopkins.  Most features of a modern
	assembler included except {macros} (soon to be added).
	Requires an {ANSI-C} compiler.  Ported to {MS-DOS}, {Ultrix},
	{Sun-4}.  (July 1993).

	Version 1.2.  Assembler/linker, disassembler, documentation,
	examples.

	{(ftp://lyman.pppl.gov/pub/8051/assem)},
	{(ftp://nic.funet.fi/pub/microprocs/MCS-51/csd4-archive/assem)}.
	{Other software tools and applications
	(ftp://nic.funet.fi/pub/compilers/8051/)}.

	(1995-01-26)

cascade

	1. <compiler> A huge volume of spurious error-messages output
	by a {compiler} with poor {error recovery}.  Too frequently,
	one trivial {syntax} error (such as a missing ")" or "}")
	throws the {parser} out of synch so that much of the remaining
	program text, whether correct or not, is interpreted as
	garbaged or ill-formed.

	2. <messaging> A chain of {Usenet} followups, each adding some
	trivial variation or riposte to the text of the previous one,
	all of which is reproduced in the new message; an {include
	war} in which the object is to create a sort of communal
	graffito.

	3. <networking> A collection of interconneced networking
	devices, typically {hubs}, that allows those devices to act
	together as a {logical} {repeater}.

	[{Jargon File}]

	(1997-07-17)

Cascading Style Sheets

	<web> (CSS) An extension to {HTML} to allow styles,
	e.g. colour, {font}, size to be specified for certain elements
	of a {hypertext} document.  Style information can be included
	in-line in the HTML file or in a separate CSS file (which can
	then be easily shared by multiple HTML files).  Multiple
	levels of CSS can be used to allow selective overriding of
	styles.

	{(http://w3.org/Style/CSS/)}.

	(2000-07-26)

CASE

	1. {Computer Aided Software Engineering}.

	2. {Common Application Service Element}.

case

	1. <programming> {switch statement}.

	2. <character> Whether a character is a capital letter ("upper
	case" - ABC..Z) or a small letter ("lower case" - abc..z).

	The term case comes from the printing trade when the use of
	moving type was invented in the early Middle Ages (Caxton or
	Gutenberg?) and the letters for each {font} were stored in a
	box with two sections (or "cases"), the upper case was for the
	capital letters and the lower case was for the small letters.
	The Oxford Universal Dictionary of Historical Principles (Feb
	1993, reprinted 1952) indicates that this usage of "case" (as
	the box or frame used by a compositor in the printing trade)
	was first used in 1588.

	(1996-03-01)

case and paste

	<programming> (From "{cut and paste}") The addition of a new
	{feature} to an existing system by selecting the code from an
	existing feature and pasting it in with minor changes.  This
	usually results in gross violation of the fundamental
	programming tenet, {Don't Repeat Yourself}.

	Common in telephony circles because most operations in a
	telephone switch are selected using "case" statements.  Leads
	to {software bloat}.

	In some circles of {Emacs} users this is called "programming
	by Meta-W", because Meta-W is the Emacs command for copying a
	block of text to a {kill buffer} in preparation to pasting it
	in elsewhere.  The term is condescending, implying that the
	programmer is acting mindlessly rather than thinking carefully
	about what is required to integrate the code for two similar
	cases.

	At {DEC}, this is sometimes called "clone-and-hack" coding.

	[{Jargon File}]

	(1996-03-01)

case based reasoning

	<artificial intelligence> (CBR) A technique for problem
	solving which looks for previous examples which are similar to
	the current problem.  This is useful where {heuristic}
	{knowledge} is not available.

	There are many situations where experts are not happy to be
	questioned about their knowledge by people who want to write
	the knowledge in rules, for use in {expert systems}.  In most
	of these situations, the natural way for an expert to describe
	his or her knowledge is through examples, stories or cases
	(which are all basically the same thing).  Such an expert will
	teach trainees about the expertise by apprenticeship, i.e. by
	giving examples and by asking the trainees to remember them,
	copy them and adapt them in solving new problems if they
	describe situations that are similar to the new problems.  CBR
	aims to exploit such knowledge.

	Some key research areas are efficient indexing, how to define
	"similarity" between cases and how to use temporal
	information.

	(1996-05-28)

CASE Data Interchange Format

	(CDIF) An emerging standard for interchange of data between
	{CASE} tools.

	(1994-11-03)

CASE framework

	A set of products and conventions that allow CASE tools to be
	integrated into a coherent environment.

case insensitive

	{case sensitivity}

Case Integration Services

	<standard, programming> (CIS) A committee formed to discuss
	{CASE} tool integration standards related to {ATIS}.

	(1994-10-25)

CASE*Method

	An analysis and design method from {Oracle} targeted at
	information management applications.

	(1994-10-28)

case sensitive

	{case sensitivity}

case sensitivity

	<text> Whether a text matching operation distinguishes
	upper-{case} (capital) letters from lower case (is "case
	sensitive") or not ("case insensitive").

	Case in file names should be preserved (for readability) but
	ignored when matching (so the user doesn't have to get it
	right).  {MS-DOS} does not preserve case in file names, {Unix}
	preserves case and matches are case sensitive.

	Any decent {text editor} will allow the user to specify
	whether or not text searches should be {case sensitive}.

	Case sensitivity is also relevant in programming (most
	programming languages distiguish between case in the names of
	{identifiers}), and addressing ({Internet} {domain names} are
	case insensitive but {RFC 822} local {mailbox} names are case
	sensitive).

	Case insensitive operations are sometimes said to "fold case",
	from the idea of folding the character code table so that
	upper and lower case letters coincide.  The alternative "smash
	case" is more likely to be used by someone who considers this
	behaviour a {misfeature} or in cases where one case is
	actually permanently converted to the other.

	"{MS-DOS} will automatically smash case in the names of all
	the files you create".

	(1997-07-09)

CASE SOAP III

	Version of SOAP assembly language for IBM 650.  Listed in
	CACM 2(5):16 (May 1959).

case statement

	{switch statement}

CASE tools

	Software tools to help in the application of CASE methods to a
	software project.

cashe

	<spelling> It's spelled "{cache}".

	(1996-12-13)

CAST

	{Computer Aided Software Testing}

cast

	{explicit type conversion}

casters-up mode

	[IBM, probably from slang belly up] Yet another synonym for
	"broken" or "down".  Usually connotes a major failure.  A
	system (hardware or software) which is "down" may be already
	being restarted before the failure is noticed, whereas one
	which is "casters up" is usually a good excuse to take the
	rest of the day off (as long as you're not responsible for
	fixing it).

	[{Jargon File}]

casting the runes

	<jargon> What a {guru} does when you ask him or her to run a
	particular program because it never works for anyone else;
	especially used when nobody can ever see what the guru is
	doing different from what J. Random Luser does.

	Compare {incantation}, {runes}, {examining the entrails}; also
	see the {AI koan} about Tom Knight.

	(1997-12-26)

CAT

	Common Abstract Tree Language.  R. Voeller & Uwe Schmidt, U
	Kiel, Germany 1983.  Universal intermediate language, used by
	Norsk Data in their family of compilers.  "A Multi-Language
	Compiler System with Automatically Generated Codegenerators,
	U. Schmidt et al, SIGPLAN Notices 19(6):202-2121 (June 1984).

	[{Jargon File}]

cat

	<tool> (From "catenate") {Unix}'s command which copies one or
	more entire files to the screen or some other output sink
	without pause.

	See also {dd}, {BLT}.

	Among {Unix} fans, cat is considered an excellent example of
	user-interface design, because it delivers the file contents
	without such verbosity as spacing or headers between the files
	(the {pr} command can be used to do this), and because it does
	not require the files to consist of lines of text, but works
	with any sort of data.

	Among Unix haters, cat is considered the {canonical} example
	of *bad* user-interface design, because of its woefully
	unobvious name.  It is far more often used to {blast} a file
	to standard output than to concatenate files.  The name "cat"
	for the former operation is just as unintuitive as, say,
	LISP's {cdr}.

	Of such oppositions are {holy wars} made.

	(1994-11-29)

Cat 3

	{Category 3}

Cat 5

	{Category 5}

catatonic

	<jargon> A description of a system that gives no indication
	that it is still working.  This might be because it has
	crashed without being able to give any error message or
	because it is busy but not designed to give any feedback.

	Compare {buzz}.

	[{Jargon File}]

	(2004-08-19)

CATE

	{Computer Aided Test Engineering}

Categorical Abstract Machine Language

	<language> (Originally "CAML" - Categorical Abstract Machine
	Language) A version of {ML} by G. Huet, G. Cousineau, Ascander
	Suarez, Pierre Weis, Michel Mauny and others of {INRIA} and
	{ENS}.  CAML is intermediate between {LCF ML} and {SML} [in
	what sense?].  It has {first-class} functions, {static type
	inference} with {polymorphic} types, user-defined {variant
	types} and {product types}, and {pattern matching}.  It is
	built on a proprietary run-time system.

	The CAML V3.1 implementation added {lazy} and {mutable} data
	structures, a "{grammar}" mechanism for interfacing with the
	{Yacc} {parser generator}, {pretty-printing} tools,
	high-performance {arbitrary-precision} arithmetic, and a
	complete library. CAML V3 is often nicknamed "heavy CAML",
	because of its heavy memory and CPU requirements compared to
	{Caml Light}.

	in 1990 Xavier Leroy and Damien Doligez designed a new
	implementation called {Caml Light}, freeing the previous
	implementation from too many experimental high-level features,
	and more importantly, from the old Le_Lisp back-end.

	Following the addition of a {native-code} compiler and a
	powerful {module} system in 1995 and of the {object} and
	{class} layer in 1996, the project's name was changed to
	{Objective Caml}.

	["The CAML Reference Manual", P. Weis et al, TR INRIA-ENS,
	1989].

	(2003-04-12)

category

	<theory> A category K is a collection of objects, obj(K), and
	a collection of {morphisms} (or "{arrows}"), mor(K) such that

	1. Each morphism f has a "typing" on a pair of objects A, B
	written f:A->B.  This is read 'f is a morphism from A to B'.
	A is the "source" or "{domain}" of f and B is its "target" or
	"{co-domain}".

	2. There is a {partial function} on morphisms called
	{composition} and denoted by an {infix} ring symbol, o.  We
	may form the "composite" g o f : A -> C if we have g:B->C and
	f:A->B.

	3. This composition is associative: h o (g o f) = (h o g) o f.

	4. Each object A has an identity morphism id_A:A->A associated
	with it.  This is the identity under composition, shown by the
	equations

	 id__B o f = f = f o id__A.

	In general, the morphisms between two objects need not form a
	{set} (to avoid problems with {Russell's paradox}).  An
	example of a category is the collection of sets where the
	objects are sets and the morphisms are functions.

	Sometimes the composition ring is omitted.  The use of
	capitals for objects and lower case letters for morphisms is
	widespread but not universal.  Variables which refer to
	categories themselves are usually written in a script font.

	(1997-10-06)

Category 3

	<hardware> (Cat 3, or "voice grade") An American Standards
	Institute standard for {UTP} cables.  Used, e.g., for
	{100BaseVG} network cabling.

	(1998-06-30)

Category 5

	<hardware> (Cat 5) An American Standards Institute standard
	for {UTP} cables.  Used, e.g., for {100BaseTX} cabling.

	(1998-06-30)

CA-Telon

	<application> A {Computer Aided Software Engineering} (CASE)
	tool for designing, generating and maintaining {COBOL} and
	{PL/I} {application programs}.  Telon was developed by
	{Pansophic} Systems who were bought by {Computer Associates}
	in 1991, whereupon it was renamed CA-Telon.

	It supports high-level, non-{prodedural} design and
	prototyping, combined with automatic {code generation}.  There
	are {mainframe} and {PC} versions.  The generated COBOL
	applications can execute in {AIX}, {HP-UX}, {VSE}, {OS/400}
	for the {AS/400}, {PC-DOS}, or {OS/2}.

	(2000-01-19)

cathode ray tube

	<hardware> (CRT) An electrical device for displaying images by
	exciting phosphor dots with a scanned electron beam.  CRTs are
	found in computer {VDUs} and {monitors}, televisions and
	oscilloscopes.  The first commercially practical CRT was
	perfected on 29 January 1901 by Allen B DuMont.

	A large glass envelope containing a negative electrode (the
	cathode) emits electrons (formerly called "cathode rays") when
	heated, as in a {vacuum tube}.  The electrons are accelerated
	across a large voltage gradient toward the flat surface of
	the tube (the screen) which is covered with phosphor.  When an
	electron strikes the phosphor, light is emitted.  The electron
	beam is deflected by electromagnetic coils around the outside
	of the tube so that it scans across the screen, usually in
	horizontal stripes.  This scan pattern is known as a {raster}.
	By controlling the current in the beam, the brightness at any
	particular point (roughly a "{pixel}") can be varied.

	Different phosphors have different "{persistence}" - the
	length of time for which they glow after being struck by
	electrons.  If the scanning is done fast enough, the eye sees
	a steady image, due to both the persistence of the phospor and
	of the eye itself.  CRTs also differ in their {dot pitch},
	which determines their spatial {resolution}, and in whether
	they use {interlace} or not.

	(1994-11-17)

CATIA

	<tool, product> A {CAD}/CAM system produced by Dassault
	Systemes and sold by {IBM}.  CATIA is used heavily in the car
	and aerospace industries.  It runs on various {Unix} platforms
	and {Windows NT}.

	{(http://catia.ibm.com/catmain.html)}.

	(2002-06-12)

cationic cocktail

	<hardware> (Or "Downy cocktail") Diluted fabric softener
	sprayed on computer room carpets to prevent static electricity
	from being built up by feet shuffling on carpet.

	The {canonical} cationic cocktail is one part unscented liquid
	fabric softener (in the US, usually "Downy" brand) to five
	parts water.

	"Cationic" is the chemical term for the most common active
	ingredient in fabric softeners.  The use of the term
	"cocktail" may be influenced by its use in other jargons,
	especially pharmacological and chemical, to denote a mixture
	which, like cationic cocktail, typically contains no alcohol
	and would be unwise to drink.

	(1998-04-04)

C/ATLAS

	<language> A DoD test language.  It is a variant of {ATLAS}.

	(1995-05-01)

CATNIP

	{Common Architecture for Next Generation Internet Protocol}

CATO

	Fortran-like CAI language for PLATO system on CDC 1604.  "CSL
	PLATO System Manual", L.A. Fillman, U Illinois, June 1966.

Cauchy sequence

	<mathematics> A sequence of elements from some {vector space}
	that converge and stay arbitrarily close to each other (using
	the {norm} definied for the space).

	(2000-03-10)

cause-effect graphing

	<programming> A testing technique that aids in selecting, in a
	systematic way, a high-yield set of test cases that logically
	relates causes to effects to produce test cases.  It has a
	beneficial side effect in pointing out incompleteness and
	ambiguities in specifications.

	(1996-05-10)

CAV

	{Constant Angular Velocity}

Cayenne Software

	<company> The company formed when {CADRE} merged with {Bachman
	Information Systems} in July 1996.

	{(http://cayennesoft.com/)}.

	[Details?]

	(2001-04-30)

CAYLEY

	<symbolic mathematics, tool> A {symbolic mathematics} system
	for {group theory} written by John Cannon of the {University
	of Sydney}, Australia in 1976.

	Cayley was used at about 100 sites but has been superseded by
	a much more general system, {Magma}.

	["An Introduction to the Group Theory Language CAYLEY", J.
	Cannon, Computational Group Theory, M.D. Atkinson ed, Academic
	Press 1984, pp. 148-183].

	(2000-09-03)

cb

	{C Beautifier}

CBASIC

	A {BASIC} compiler by Gordon Eubanks, now at {Symantec}.  It
	evolved from/into {EBASIC}.

	(1994-11-29)

CBBS

	{bulletin board system}

C-BC

	<language> A {strongly typed} version of {BC} by Mark Hopkins,
	with expanded {C}-like {syntax}, more base types and the
	ability to form {array} and {pointer} types of any dimension
	and to allocate/free arrays at {run time}.

	Most {POSIX-BC} features are supported, except that
	{functions} must be declared consistently and declared before
	first use.  {String} handling is slightly different.  It
	requires an {ANSI-C} compiler and runs under {MS-DOS} or
	{Unix}.

	Version: 1.1.

	Posted to {alt.sources} 1993-04-10.

	(1993-08-23)

CBD

	{component based development}

C Beautifier

	(cb) A {Unix} tool for reformatting {C} {source} code.

	{Unix manual page}: cb(1).

CBIR

	{content-based information retrieval}

CBN

	{call-by-name}

CBR

	{case based reasoning}

CBT

	{Computer-Based Training}

CBV

	{call-by-value}

CBVIR

	{content-based information retrieval}

cbw

	{Crypt Breakers Workbench}

cc

	<networking> The {country code} for the Cocos (Keeling)
	Islands.

	(1999-01-27)

CC++

	{Compositional C++}

C/C++

	1. {Borland C/C++}.

	2. {Watcom C/C++}.

	3. Either {C} or {C++}.

CCalc

	A {symbolic mathematics} system for {MS-DOS}, available from
	{Simtel}.

	(1995-04-12)

CCD

	{Charge-Coupled Device}

CCIRN

	Coordinating Committee for Intercontinental Research Networks.

CCITT

	Commite' Consultatif International de Telegraphique et
	Telephonique.  (International consultative committee on
	telecommunications and Telegraphy).

	CCITT changed its name to {ITU-T} on 1 March 1993.

	(1994-11-03)

CCITT HIgh-Level Language

	<language> (CHILL) A {real-time} language widely used in
	telecommunications.  CHILL was developed in the 1970s and
	improved in 1984, 1988, 1992, and 1996.  It is used in several
	countries including Germany, Norway, Brasil, and South Korea.

	{Cygnus} are developing a compiler based on {gcc}.

	{(http://www1.informatik.uni-jena.de/languages/chill/chill.htm)}.

	["An Analytical Description of CHILL, the CCITT High Level
	Language", P. Branquart, LNCS 128, Springer 1982].

	["CHILL User's Manual", ITU, 1986, ISBN 92-61-02601-X.
	ISO-9496 (1988?)].

	(1997-01-20)

CCL

	1. Coral Common LISP.

	2. Computer Control Language.  English-like query language
	based on COLINGO, for IBM 1401 and IBM 1410.

CCLU

	Cambridge CLU.  {CLU} extended to support {concurrency},
	distributed programming and {remote procedure call}, by
	G. Hamilton et al at {CUCL}.

	E-mail: Jean Bacon <jmb@cl.cam.ac.uk>.

	(1994-10-13)

ccmail

	It's written {cc:mail}.

cc:mail

	<tool, product> Commercial {electronic mail} software by
	{Lotus Corporation} for {Microsoft Windows}.

	(1995-03-14)

CCP

	1. <language> {Concurrent Constraint Programming}.

	2. {Command Control Processor}.

CCR

	1. {condition code register}.

	2. (Database) {concurrency control and recovery}.

CCS

	1. <networking> {Common Communication Services}.

	2. <language, parallel> {Calculus of Communicating Systems}.

	3. <history> {Computer Conservation Society}.

	4. <storage, standard> {Common Command Set}.

	5. <communications> {centum call second}.

CCSP

	{Contextually Communicating Sequential Processes}

CCTA

	The Government Centre for Information Systems.

	(Originally "Central Computer and Telecommunications Agency").

	CCTA is part of the Office of Public Service and Science,
	which works to improve government's services to the public.
	They are responsible for stimulating and promoting the
	effective use of Information Systems in support of the
	efficient delivery of business objectives and improved quality
	of services by the public sector.

	CCTA had to change its name as it was not an agency in the
	"Next Steps" sense.  The letters were retained as customers
	were familiar with them.

	{(http://open.gov.uk/)}.

	E-mail: <info@open.gov.uk>.

	Address: Norwich, UK.

	(1995-01-18)

CD

	{Compact Disc}

cd

	1. <operating system> {change directory}.

	2. <networking> The {country code} for the Democratic Republic
	of the Congo (formerly Zaire, {zr}).

	(1999-01-27)

CDA

	1. <file format> {Compound Document Architecture}.

	2. <legal> {Communications Decency Act}.

CD burner

	{Compact Disc writer}

CDC

	{Control Data Corporation}

CDC 6600

	<computer> A {mainframe} computer from {Control Data
	Corporation}, first delivered in 1964.  It is generally
	considered to be the first successful {supercomputer}, about
	three times faster than {STRETCH}.  Its successor was the {CDC
	7600}.

	(2007-03-01)

CDDI

	{Copper Distributed Data Interface}

CDD/Plus

	{DEC}'s {CASE} {repository}.

CDE

	1. C Development environment from {IDE}.

	2. {Common Desktop Environment}.

	3. {Co-operative Development Environment}.

	(1996-07-11)

CDF

	{Common Data Format}

CD-i

	{Compact Disc interactive}

CDIF

	{CASE Data Interchange Format}

CDL

	1. Computer Definition [Design?] Language.  A hardware
	description language.  "Computer Organisation and
	Microprogramming", Yaohan Chu, P-H 1970.

	2. Command Definition Language.  Portion of ICES used to
	implement commands.  Sammet 1969, p.618-620.

	3. Compiler Description Language.  C.H.A. Koster, 1969.
	Intended for implementation of the rules of an affix grammar
	by recursive procedures.  A procedure may be a set of
	tree-structured alternatives, each alternative is executed
	until one successfully exits.  Used in a portable COBOL-74
	compiler from MPB, mprolog system from SzKI, and the Mephisto
	chess computer.  "CDL: A Compiler Implementation Language", in
	Methods of Algorithmic Language Implementation, C.H.A. Koster,
	LNCS 47, Springer 1977, pp.341-351.  "Using the CDL Compiler
	Compiler", C.H.A. Koster, 1974.  Versions: CDL2, CDLM used at
	Manchester.

	4. Common Design Language.  "Common Design Language", IBM,
	Software Engineering Inst, Sept 1983.

	5. Control Definition Language.  Ideas which contributed to
	Smalltalk.

	["Control Structures for Programming Languges", David
	A. Fisher, PhD Thesis, CMU 1970].

CDM

	1. {Content Data Model}

	2. {Code Division Multiplexing}

CDMA

	{Code Division Multiple Access}

CDP1802

	{RCA 1802}

CDPD

	{Cellular Digital Packet Data}

CDR

	1. <networking> {Committed Data Rate}.

	2. <storage> {Compact Disc Recordable} (CD-R).

	3. <telecommunications> {Call Data Record}.

cdr

	{Contents of Decrement part of Register}

CD-Read-Write

	{Compact Disc Rewritable}

CD-Rewritable

	{Compact Disc Rewritable}

CD-ROM

	{Compact Disc Read-Only Memory}

CD-ROM drive

	{Compact Disc Read-Only Memory}

CD-RW

	{Compact Disc Rewritable}

CDS

	{Concrete Data Structure}

cd tilde

	/C-D til-d*/ To go home.  From the {Unix} {C shell} and
	Korn-shell command "cd ~", which takes one to one's "$HOME"
	directory.  "cd" with no arguments does the same thing.

	[{Jargon File}]

	(1994-10-28)

CDW

	{data warehouse}

CE

	{IBM Customer Engineer}

Cecil

	AN {object-oriented} language combining {multi-methods} with a
	classless object model, object-based {encapsulation} and
	optional {static type checking}.  It distinguishes between
	{subtyping} and {code inheritance}.  Includes both explicit
	and implicit parameterisation of objects, types, and methods.

	{(ftp://cs.washington.edu/pub/chambers/cecil-spec.ps.Z)}.

	["The Cecil Language: Specification and Rationale",
	C. Chambers, TR 93-03-05, U Wash (Mar 1993)].

	(1994-10-28)

Cedar

	A superset of {Mesa}, from {Xerox PARC}, adding {garbage
	collection}, {dynamic types} and a universal pointer type (REF
	ANY).  Cedar is a large complex language designed for custom
	Xerox hardware and the Cedar {operating system}/environment.
	Data types are {atoms}, lists, ropes ("industrial strength"
	strings), conditions.  Multi-processing features include
	{threads}, {monitors}, {signals} and catch phrases.  It was
	used to develop the Cedar integrated programming environment.

	["A Description of the Cedar Language", Butler Lampson, Xerox
	PARC, CSL-83-15 (Dec 1983)].

	["The Structure of Cedar", D. Swinehart et al, SIGPLAN Notices
	20(7):230-244 (July 1985)].

	(1995-01-26)

CEEMAC+

	Graphics language for DOS 3.3 on {Apple II}.

CEI-PACT

	Central European Initiative on Parallel Computation.

Celeron

	<processor> {Intel Corporation}'s trade name for its family of
	{Pentium II} {microprocessors} meant for use in low-end
	computers.

	The Celeron is constructed on the 0.25 micron Deschutes base.
	{Clock rates} of 266, 300 and 333 {MHz} are supported.  It is
	built on the same {daughterboard} as the Pentium II without
	the black plastic case and {heat sink}.  Four Celeron models
	are in production as of October 1998.  The 266 and 300 MHz
	models are essentially Pentium II {CPUs} without the Level 2
	{cache} {RAM}.  The 300A and 333 MHz Celerons include 128k of
	Level 2 cache.

	A special mounting bracket on the motherboard is used to
	secure the Celeron in place in its standard 242-pin Slot 1
	socket.  Intel calls the caseless design SEPP (Single Edge
	Processor Package) to differentiate it from the Pentium II SEC
	(Single Edge Cartridge).  Some believe that the real purpose
	for the different mounting configurations is to prevent users
	from placing lower cost processors onto Pentium II
	motherboards.

	A Celeron is about one third the cost of a similar speed
	Pentium II.  Hardware {hackers} claim that the Celeron 300
	without Level 2 cache could be {overclocked} to perform as
	well as a Pentium II at a fraction of the price.

	{(http://intel.com/Celeron/)}.

	{Tom's Hardware (http://www2.tomshardware.com/cpuslot1.html)}.

	(1998-10-06)

CELIP

	<language> A cellular language for {image processing}.

	["CELIP: A cellular Language for Image Processing",
	W. Hasselbring <willi@informatik.uni-essen.de>, Parallel
	Computing 14:99-109 (1990)].

	(1994-12-05)

cell

	1. <spreadsheet> In a {spreadsheet}, the intersection of a row
	a column and a sheet, the smallest addressable unit of data.
	A cell contains either a constant value or a {formula} that is
	used to calculate a value.  The cell has a {format} that
	determines how to display the value.  A cell can be part of a
	{range}.  A cell is usually referred to by its column
	(labelled by one or more letters from the sequence A, B, ...,
	Z, AA, AB, ..., AZ, BA, BB, ..., BZ, ... ) and its row number
	counting up from one, e.g. cell B3 is in the second column
	across and the third row down.  A cell also belongs to a
	particular sheet, e.g. "Sheet 1".

	2. <networking> {ATM}'s term for a {packet}.

	(2007-10-22)

Cellang

	See {Cellular}.

CELLAS

	<language> CELLular ASsemblies.

	A {concurrent} {block-structured} language.

	[Mentioned in "Attribute Grammars", LNCS 323, p.97].

	(1994-12-05)

Cello

	<web> A {web browser} {client} for {IBM PCs}.  Runs under
	{Microsoft Windows}.

	(2014-08-23)

cell reference

	<spreadsheet> A string identifying a particular {cell} in a
	{spreadsheet}, possibly relative to the cell containing the
	reference.  A cell reference may be absolute (denoted by a "$"
	prefix in {Excel}) or relative (no prefix) in each dimension,
	thus, e.g. B$6 refers to the second cell across in the sixth
	row.  The distinction between absolute and relative is only
	significant when the referring cell is copied, e.g. if cell
	A1, which refers to B$6, is copied to cell B1, then B1 will
	refer to C6.

	If the reference is to a cell in a different sheet then it is
	prefixed with the target sheet's name and an exclamation
	mark.  E.g. "Sheet 1!B3".

	(2007-10-22)

CELLSIM

	<application> A program for modelling populations of
	biological cells.

	["CELLSIM II User's Manual", C.E. Donaghey, U Houston. Sep
	1975].

	(1994-12-05)

CEll Space Simulation Language

	<language> (CESSL) A language for simulating {cellular space
	models}.

	["The CESSL Programming Language", D.R. Frantz, 012520-6-T, CS
	Dept, U Michigan, Sept 1971].

	(1994-12-14)

Cellular

	<language> A system for {cellular automaton} programming by J
	Dana Eckart <dana@faculty.cs.runet.edu>.  Cellular includes a
	{byte-code compiler}, {run-time system} and a viewer.

	Posted to comp.sources.unix, volume 26.

	See also {Cellang}.

	(2000-10-07)

cellular automata

	{cellular automaton}

cellular automaton

	<algorithm, parallel> (CA, plural "- automata") A regular
	spatial lattice of "cells", each of which can have any one of
	a finite number of states.  The state of all cells in the
	lattice are updated simultaneously and the state of the entire
	lattice advances in discrete time steps.  The state of each
	cell in the lattice is updated according to a local rule which
	may depend on the state of the cell and its neighbors at the
	previous time step.

	Each cell in a cellular automaton could be considered to be a
	{finite state machine} which takes its neighbours' states as
	input and outputs its own state.

	The best known example is J.H. Conway's game of {Life}.

	{FAQ
	(http://alife.santafe.edu/alife/topics/cas/ca-faq/ca-faq.html)}.

	{Usenet} newsgroups: {news:comp.theory.cell-automata},
	{news:comp.theory.self-org-sys}.

	(1995-03-03)

Cellular Digital Packet Data

	<communications, protocol> (CDPD) A wireless standard
	providing two-way, 19.2 kbps {packet} data transmission over
	exisiting {mobile telephone} channels.

	[Reference?]

	(1994-12-05)

cellular multiprocessing

	<architecture, parallel> (CMP) The partitioning of
	{processors} into separate computing environments running
	different {operating systems}.

	The term cellular multiprocessing appears to have been coined
	by {Unisys}, who are developing a system where computers
	communicate as clustered machines through a high speed {bus},
	rather than through communication {protocols} such as
	{TCP/IP}.

	The Unisys system is based on {Intel} processors, initially
	the {Pentium II Xeon} and moving on to the 64-bit {Merced}
	processors later in 1999.  It will be scalable from four up to
	32 processors, which can be clustered or partitioned in
	various ways.  For example a sixteen processor system could be
	configured as four {Windows NT} systems (each functioning as a
	four-processor {symmetric multiprocessing} system), or an
	8-way NT and 8-way {Unix} system.

	Supported operating systems will be {Windows NT}, {SCO}'s
	{Unixware} 7.0, Unisys' {SVR4} {Unix} and possibly the OS2200
	and MCP-AS {mainframe} operating systems (with the assistance
	of Unisys' own dedicated {chipset}).

	{(http://marketplace.unisys.com/ent/cmp.html)}.

	(1998-09-09)

Cellular Neural Network

	<architecture> (CNN) The CNN Universal Machine is a low cost,
	low power, extremely high speed {supercomputer} on a chip.  It
	is at least 1000 times faster than equivalent {DSP} solutions
	of many complex {image processing} tasks.  It is a stored
	program supercomputer where a complex sequence of image
	processing {algorithms} is programmed and downloaded into the
	chip, just like any digital computer.  Because the entire
	computer is integrated into a chip, no signal leaves the chip
	until the image processing task is completed.

	Although the CNN universal chip is based on analogue and logic
	operating principles, it has an on-chip analog-to-digital
	input-output interface so that at the system design and
	application perspective, it can be used as a digital
	component, just like a DSP.  In particular, a development
	system is available for rapid design and prototyping.
	Moreover, a {compiler}, an {operating system}, and a
	{user-friendly} CNN {high-level language}, like the {C}
	language, have been developed which makes it easy to implement
	any image processing algorithm.

	[Professor Leon Chua, University of California at Berkeley].

	(1995-04-27)

CELP

	<language> Computationally Extended Logic
	Programming.

	["Computationally Extended Logic Programming", M.C. Rubenstein
	et al, Comp Langs 12(1):1-7 (1987)].

	(1995-04-27)

CEN

	Conseil EuropÃ©en pour la Normalisation.

	A body coordinating {standard}isation activities in the EEC
	and EFTA countries.

	(1994-12-14)

CENELEC

	<body, standard> The European Committee for Electrotechnical
	Standardization.  A body developing electrotechnical standards for
	the Single European Market / European Economic Area in order to
	reduce internal frontiers and trade barriers for electrotechnical
	products, systems and services.  CENELEC's 19 member countries and
	11 affiliate countries aim to adopt and implement the required
	standards, which are mostly identical to the {International
	Electrotechnical Commission} (IEC) standards.  CENELEC works in
	co-operation with {ComitÃ© EuropÃ©en de Normalisation} (CEN) and
	{European Telecommunications Standards Institute} (ETSI).

	(1999-09-28)

centi-call second

	<spelling> No, it's {centum call second}.

	(2002-03-25)

central office

	<communications> The place where telephone companies terminate
	customer lines and locate switching equipment to interconnect
	those lines with other networks.

	(1995-03-20)

Central office exchange service

	<communications> (Centrex) A {PBX} service providing
	{switching} at the {central office} instead of at the company
	premises.  Typically, the telephone company owns and manages
	all the communications equipment necessary to implement the
	PBX and then sells various services to the company.

	(1999-10-27)

central processing unit

	<architecture, processor> (CPU, processor) The part of a
	computer which controls all the other parts.  Designs vary
	widely but the CPU generally consists of the {control unit},
	the {arithmetic and logic unit} (ALU), {registers}, temporary
	{buffers} and various other logic.

	The control unit fetches {instructions} from memory and
	decodes them to produce signals which control the other parts
	of the computer.  These signals cause it to transfer data
	between memory and ALU or to activate {peripherals} to perform
	input or output.

	Various types of memory, including {cache}, {RAM} and {ROM},
	are often considered to be part of the CPU, particularly in
	modern {microprocessors} where a single {integrated circuit}
	may contain one or more processors as well as any or all of
	the above types of memory.  The CPU, and any of these
	components that are in separate chips, are usually all located
	on the same {printed circuit board}, known as the
	{motherboard}.  This in turn is located in the {system unit}
	(sometimes incorrectly referred to as the "CPU").

	A {parallel computer} has several CPUs which may share other
	resources such as memory and peripherals.

	The term "processor" has to some extent replaced "CPU", though
	RAM and ROM are not logically part of the processor.

	{List of processors
	(http://lldn.timesys.com/complete_list_of_processors)}.

	(2007-04-02)

Centrex

	{Central office exchange service}

Centronics

	<company, hardware, printer> A company in Hudson N.H., USA,
	best known for designing the {parallel interface} for printers
	with the same name, found on many {microcomputers}.

	[Pin-out?]

	(1998-03-15)

Centrum voor Wiskunde en Informatica

	(CWI, Centre for Mathematics and Computer Science) An
	independent research institute active in the fields of
	mathematics and computer science.  CWI also aims to transfer
	new knowledge in these fields to society, trade and industry

	CWI is funded for 70 percent by NWO, the National Organisation
	for Scientific Research.  The remaining 30 percent is obtained
	through national and international programmes and contract
	research commissioned by industry.

	Address: Kruislaan 413, 1098 SJ Amsterdam, The Netherlands;
	P.O.Box 94079, 1090 GB Amsterdam, The Netherlands.

	Telephone: +31 (20) 5929 333.

	{(http://cwi.nl/)}.

	{(ftp://ftp.cwi.nl/pub/)}.

centum call second

	<unit> (CCS) A unit used (in North America) to quantify the
	total traffic running in a network.  1 CCS is 100
	call-seconds.  That means 1 CCS could be 2 calls of 50 seconds
	duration or 20 calls of 5 seconds duration.

	(2002-03-25)

century meltdown

	{Year 2000}

CEN/XFS

	{Extensions for Financial Services}

cepstra

	{cepstrum}

cepstrum

	<mathematics> (Coined in a 1963 paper by Bogert, Healey, and
	Tukey) The {Fourier transform} of the log-magnitude spectrum:

		fFt(ln( | fFt(window . signal) | ))

	This function is used in {speech recognition} and possibly
	elsewhere.  Note that the outer transform is NOT an inverse
	Fourier transform (as reported in many respectable DSP texts).

	[What's it for?]

	(1997-01-07)

CEPT

	{Comite Europeen des Postes et Telecommunications}

CER

	{Canonical Encoding Rules}

Ceramic Pin Grid Array

	<hardware, processor> (CPGA) A form of {Pin Grid Array}
	package used by {Cyrix III} {processors}.

	Compare {PPGA} and {FC-PGA}.

	[Other uses?]

	(2000-08-26)

Ceres workstation Oberon System

	<language, tool> A complete {Oberon} {compiler} written in
	{Oberon}.  Source to most of the complete Ceres workstation
	Oberon System, including the {National Semiconductor 32032}
	{code generator} is available.  Less of the low level system
	specific code is available.

	{(ftp://neptune.ethz.ch/Oberon/)}.

	(1994-12-14)

Cerf, Vint

	{Vint Cerf}

CERN

	<body> The European Laboratory for Particle Physics in
	Swizerland.

	{Tim Berners-Lee} invented the {World-Wide Web} while working
	at CERN.

	Other notable computing developments at CERN include {ADAMO},
	{Application Software Installation Server}, {CERNLIB},
	{cfortran.h}, {CHEOPS}, {CICERO}, {Cortex}, {EMDIR}, {HBOOK},
	{LIGHT}, {NFT}, {PATCHY}, {PL-11}, {Schoonschip}, {SHIFT},
	and {ZEBRA}.

	{CERN Home (http://cern.ch/)}.

	(2004-10-24)

CERNLIB

	<library> The {CERN} Program Library.

	(2004-09-01)

CERT

	{Computer Emergency Response Team}

Certificate Authority

	<cryptography, body> (CA or "Trusted Third Party") An entity
	(typically a company) that issues {digital certificates} to
	other entities (organisations or individuals) to allow them to
	prove their identity to others.  A Certificate Authority might
	be an external company such as {VeriSign} that offers digital
	certificate services or they might be an internal organisation
	such as a corporate {MIS} department.  The Certificate
	Authority's chief function is to verify the identity of
	entities and issue digital certificates attesting to that
	identity.

	The process uses {public key cryptography} to create a
	"network of trust".  If I want to prove my identity to you, I
	ask a CA (who you trust to have verified my identity) to
	encrypt a {hash} of my signed key with their {private key}.
	Then you can use the CA's {public key} to decrypt the hash and
	compare it with a hash you calculate yourself.  Hashes are
	used to decrease the amount of data that needs to be
	transmitted.  The hash function must be {cryptographically
	strong}, e.g. {MD5}.

	{(http://home.netscape.com/comprod/server_central/support/faq/certificate_faq.html#11)}.

	(1998-03-30)

CESP

	{Common ESP}

CESSL

	{CEll Space Simulation Language}

cextract

	<programming, tool> A {C} {prototype} extractor by Adam Bryant
	<adb@cs.bu.edu>.  cextract can generate {header files} for
	large multi-file C programs, and will automatically generate
	prototypes for all of the functions in such a program.  It can
	also generate a sorted list of all functions and their
	locations.  cextract version 1.7 works with both {ANSI C} and
	{K&R C} and runs under {Unix} and {VMS}.

	Posted to comp.sources.reviewed.

	(1992-11-03)

cf

	<networking> The {country code} for the Central African
	Republic.

	(1999-01-27)

CFD

	{Computational Fluid Dynamics}

CFG

	{context-free grammar}

CFML

	{ColdFusion Markup Language}

cforth

	A {Forth} {interpreter}.

	Posted to comp.sources.unix volume 1.

	(1994-11-29)

cfortran.h

	<library> A {transparent}, machine independent interface
	between {C} and {Fortran} routines and {global data},
	developed by Burkhard Burow at CERN.  It provides {macros}
	which allow the {C} {preprocessor} to translate a simple
	description of a C (Fortran) routine or global data into a
	Fortran (C) interface.

	Version 2.6 runs on {VAX}/{VMS}/{Ultrix}, {DECstation},
	{Silicon Graphics}, {IBM} {RS/6000}, {Sun}, {Cray}, {Apollo},
	{HP9000}, {LynxOS}, {f2c}, {NAG f90}.

	{(ftp://zebra.desy.de/cfortran/)}.

	cfortran.h was reviewed in RS/Magazine November 1992 and a
	user's experiences with cfortran.h are described in the Jan 93
	issue of Computers in Physics.

	(1992-04-12)

CFP

	1. {Constraint Functional Programming}.

	2. {Communicating Functional Processes}.

	3. Call For Papers (for a conference).

CFP92

	{SPEC CFP92}

cg

	<networking> The {country code} for Congo.

	(1999-01-27)

CGA

	{Color Graphics Adapter}

CGGL

	{Code-Generator Generator Language}

CGI

	1. <web> {Common Gateway Interface}.

	2. <graphics> {computer-generated imagery}.

	3. <company> A French {software engineering} vendor in the US.

	4. <company> {Computer Generation Incorporated}.

cgi-bin

	{Common Gateway Interface}

CGI Joe

	<job, abuse> (From "GI Joe") A hard-core {CGI} script
	programmer with all the social skills and charisma of a
	plastic action figure.

	(1997-03-30)

CGI program

	{Common Gateway Interface}

CGI script

	{Common Gateway Interface}

CGM

	{Computer Graphics Metafile}

CGOL

	<language> A package providing {ALGOL}-like {surface syntax}
	for {MACLISP}, written by V.R. Pratt in 1977.

	{(ftp://mc.lcs.mit.edu/its/ai/lisp/cgol.fasl)}.

	["CGOL - An Alternative Exetrnal Representation for LISP
	Users", V.  Pratt, MIT AI Lab, Working Paper 89, 1976].

	(2005-01-07)

cgram

	<language> An {ANSI C} {LL1} or {LL2} {grammar} written in
	{Scheme} by Mohd Hanafiah Abdullah <napi@cs.indiana.edu>.  A
	program (f-f-d.s) extracts the FIRST/FOLLOW/DIRECTOR sets.

	{(ftp://primost.cs.wisc.edu/pub/comp.compilers/cgram-ll1.Z)}.

	(2005-01-07)

Ch

	<language> An {interpreted} programming language sold by {Soft
	Integration} and marketed for {scripting}, {shell programming}
	and graph plotting, it is a superset of {C++}.  Ch is also the
	name of Soft Integration's {interpreter} for the language.
	Currently the Ch interpreter is available for {Windows},
	{Solaris}, {HP-UX}, {Linux} and {Mac} platforms.

	{Soft Integration (http://softintegration.com/)}.

	(2003-08-15)

ch

	<networking> The {country code} for Switzerland.

	(1999-01-27)

chad

	<jargon, printer> /chad/ (Or "selvage" /sel'v*j/ (sewing and
	weaving), "{perf}", "perfory", "snaf").  1. The perforated
	edge strips on paper for {sprocket feed} printers, after they
	have been separated from the printed portion.

	The term {perf} may also refer to the perforations themselves,
	rather than the chad they produce when torn.

	[Why "snaf"?]

	2. (Or "chaff", "computer confetti", "keypunch droppings") The
	confetti-like bits punched out of {punched cards} or {paper
	tape} which collected in the {chad box}.

	One of the {Jargon File}'s correspondents believed that "chad"
	derived from the {chadless keypunch}.

	[{Jargon File}]

	(1997-07-18)

chad box

	<hardware> ({IBM} called this a "chip box") A metal box about
	the size of a lunchbox (or in some models a large
	wastebasket), for collecting the {chad} that accumulated in
	{Iron Age} {card punches}.  You had to open the covers of the
	card punch periodically and empty the chad box.

	The {bit bucket} was notionally the equivalent device in the
	{CPU} enclosure, which was typically across the room in
	another great grey-and-blue box.

	[{Jargon File}]

	(1996-11-20)

Chadless keypunch

	<hardware> A {card punch} which cut little U-shapes in
	{punched cards}, rather than punching out a circle or
	rectangle.  The U's made a hole when folded back.

	One of the {Jargon File}'s correspondents believed that the
	term "chad" derived from the {Chadless keypunch}.  Obviously,
	if the Chadless keypunch didn't make them, then the stuff that
	other keypunches made had to be "{chad}".  The assertion that
	the keypunch was named after its inventor is not supported by
	any record in US or UK patents or surname references.

	(2000-11-22)

chain

	1. <operating system> (From {BASIC}'s "CHAIN" statement) To
	pass control to a child or successor without going through the
	{operating system} {command interpreter} that invoked you.
	The state of the parent program is lost and there is no
	returning to it.  Though this facility used to be common on
	memory-limited {microcomputers} and is still widely supported
	for {backward compatibility}, the jargon usage is
	semi-obsolescent; in particular, {Unix} calls this {exec}.

	Compare with the more modern "{subshell}".

	2. <programming> A series of linked data areas within an
	{operating system} or {application program}.  "Chain rattling"
	is the process of repeatedly running through the linked data
	areas searching for one which is of interest.  The implication
	is that there are many links in the chain.

	3. <theory> A possibly infinite, non-decreasing sequence of
	elements of some {total ordering}, S

		x0 <= x1 <= x2 ...

	A chain satisfies:

		for all x,y in S, x <= y \/ y <= x.

	I.e. any two elements of a chain are related.

	("<=" is written in {LaTeX} as {\sqsubseteq}).

	[{Jargon File}]

	(1995-02-03)

Challenge-Handshake Authentication Protocol

	<networking, security, standard, protocol> (CHAP) An
	{authentication} scheme used by {PPP} servers to validate the
	identity of the originator of the connection upon connection
	or any time later.

	CHAP applies a three-way {handshaking} procedure.  After the
	link is established, the server sends a "challenge" message to
	the originator.  The originator responds with a value
	calculated using a {one-way hash function}.  The server checks
	the response against its own calculation of the expected hash
	value.  If the values match, the authentication is
	acknowledged; otherwise the connection is usually terminated.

	CHAP provides protection against {playback} attack through the
	use of an incrementally changing identifier and a variable
	challenge value.  The authentication can be repeated any time
	while the connection is open limiting the time of exposure to
	any single attack, and the server is in control of the
	frequency and timing of the challenges.  As a result, CHAP
	provides greater security then {PAP}.

	CHAP is defined in {RFC} 1334.

	(1996-03-05)

Chalmers University of Technology

	<body, education> A Swedish university founded in 1829
	offering master of science and doctoral degrees.  Research is
	carried out in the main engineering sciences as well as in
	technology related mathematical and natural sciences.  Five
	hundred faculty members work in more than 100 departments
	organised in nine schools.  Chalmers collaborates with the
	University of GÃ¶teborg.

	Around 8500 people work and study on the Chalmers campus,
	including around 500 faculty members and some 600 teachers and
	doctoral students.  About 4800 students follow the master
	degree programs.  Every year 700 Masters of Science in
	Engineering and in Architecture graduate from Chalmers, and
	about 190 PhDs and licentiates are awarded.  Some 40% of
	Sweden's engineers and architects are Chalmers graduates.

	About a thousand research projects are in progress and more
	than 1500 scientific articles and research reports are
	published every year.  Chalmers is a partner in 80 EC research
	projects.

	{(http://chalmers.se/Home-E.html)}.

	Address: S-412 96 GÃ¶teborg, Sweden.

	(1995-02-16)

change management

	<system management> Techniques that aid in evolution,
	composition and policy management of the design and
	implementation of an object or system.

	(1995-02-16)

changeover

	<programming> The time when a new system has been tested
	successfully and replaces the old system.

	(2003-11-12)

channel

	<chat> (Or "chat room", "room", depending on the system in
	question) The basic unit of group discussion in {chat} systems
	like {IRC}.  Once one joins a channel, everything one types is
	read by others on that channel.  Channels can either be named
	with numbers or with strings that begin with a "#" sign and
	can have topic descriptions (which are generally irrelevant to
	the actual subject of discussion).

	Some notable channels are "#initgame", "#hottub" and
	"#report".  At times of international crisis, "#report" has
	hundreds of members, some of whom take turns listening to
	various news services and typing in summaries of the news, or
	in some cases, giving first-hand accounts of the action
	(e.g. Scud missile attacks in Tel Aviv during the Gulf War in
	1991).

	[{Jargon File}]

	(1998-01-25)

channel associated signaling

	{in-band signalling}

channel hopping

	<chat> To rapidly switch channels on {IRC}, or a {GEnie} chat
	board.  This term may derive from the TV idiom, "channel
	surfing".

	[{Jargon File}]

	(1994-11-29)

channel op

	<messaging> /chan'l op/ (Or "{op}", "chan op", "chop") Someone
	who is endowed with privileges on a particular {IRC}
	{channel}.  These privileges include the right to {kick}
	users, to change various status bits and to make others into
	CHOPs.

	The full form, "channel operator", is almost never used.

	[{Jargon File}]

	(1998-01-08)

channel service unit

	<communications> (CSU) A type of {interface} used to connect a
	{terminal} or computer to a digital medium in the same way
	that a {modem} is used for connection to an analogue medium.

	A CSU is provided by the {communication carrier} to customers
	who wish to use their own equipment to retime and regenerate
	the incoming signals.  The customer must supply all of the
	transmit logic, receive logic and timing recovery in order to
	use the CSU, whereas a {digital service unit} DSU performs
	these functions.

	(1995-01-30)

channel service unit/data service unit

	<communications, hardware> (CSU/DSU, or "..digital..") A
	device that performs both the {channel service unit} (CSU) and
	{data service unit} (DSU) functions.  The Channel Service Unit
	(CSU) is used to terminate a {DS1} or {DS0} (56/64 kb/s)
	digital circuit.  It peforms {line conditioning}, protection,
	{loop-back} and timing functions.  The Data Service Unit (DSU)
	terminates the data circuit to the {Data Terminal Equipment}
	(DTE) and converts the customer's data stream into a bi-polar
	format for transmission.

	(2001-10-19)

chan op

	{channel op}

chaos

	<mathematics> A property of some {non-linear dynamic systems}
	which exhibit sensitive dependence on initial conditions.
	This means that there are initial states which evolve within
	some finite time to states whose separation in one or more
	dimensions of {state space} depends, in an average sense,
	exponentially on their initial separation.

	Such systems may still be completely {deterministic} in that
	any future state of the system depends only on the initial
	conditions and the equations describing the change of the
	system with time.  It may, however, require arbitrarily high
	precision to actually calculate a future state to within some
	finite precision.

	["On defining chaos", R. Glynn Holt
	<rgholt@voyager.jpl.nasa.gov> and D. Lynn Holt
	<lholt@seraph1.sewanee.edu>.
	{(ftp://mrcnext.cso.uiuc.edu/pub/etext/ippe/preprints/Phil_of_Science/Holt_and_Holt.On_Defining_Chaos)}]

	Fixed precision {floating-point} arithmetic, as used by most
	computers, may actually introduce chaotic dependence on
	initial conditions due to the accumulation of rounding errors
	(which constitutes a non-linear system).

	(1995-02-07)

CHAP

	{Challenge-Handshake Authentication Protocol}

char

	<programming> /keir/ or /char/; rarely, /kar/ {character}.
	Especially used by {C} programmers, as "char" is {C}'s
	typename for character data.

	[{Jargon File}]

	(1994-11-29)

character

	<character> A {letter} of some alphabet (either upper case or
	lower case), a {digit}, a {punctuation} or other symbol or a
	{control character}.  In a computer, a character is
	represented as an {integer}.  What character is represented by
	what integer is determined by the current {character set}.
	For example, in the {ASCII} character set, "A" is 65.  These
	integers are then stored as a sequence of {bytes} according to
	a {character encoding}.

	The character set and encoding is usually implicit in the
	environment in which the character is being interpreted but it
	may be specified explicitly, e.g. to convert input to some
	standard internal representation.

	A sequence of characters is a (character) {string}.

	Compare with {glyph}.

	(1998-10-18)

character encoding

	<character> (Or "character encoding scheme") A mapping between
	{binary} data values and character {code positions} (or "code
	points").

	Early systems stored characters in a variety of ways,
	e.g. four six-bit characters in a 24-bit word, but around
	1960, eight-bit bytes started to become the most common data
	storage layout, with each character stored in one byte,
	typically in the {ASCII} character set.

	In the case of {ASCII}, the character encoding is an
	{identity} mapping: code position 65 maps to the byte value
	65.  This is possible because ASCII uses only code positions
	representable as single {bytes}, i.e., values between 0 and
	255.  ({US-ASCII} only uses values 0 to 127, in fact.)

	From the late 1990s, there was increased use of larger
	character sets such as {Unicode} and many {CJK} {coded
	character sets}.  These can represent characters from many
	languages and more symbols.

	{Unicode} uses many more than the 256 code positions that can
	be represented by one byte.  It thus requires more complex
	mappings: sometimes the characters are mapped onto pairs of
	bytes (see {DBCS}).  In many cases, this breaks programs that
	assume a one-to-one mapping of bytes to characters, and so,
	for example, treat any occurrance of the byte value 13 as a
	{carriage return}.  To avoid this problem, character encodings
	such as {UTF-8} were devised.

	(2015-11-29)

character encoding scheme

	{character encoding}

character graphics

	{ASCII art}

characteristic function

	<mathematics> The characteristic function of set returns True
	if its argument is an element of the set and False otherwise.

	(1995-04-13)

character key

	{key}

character repertoire

	<character> The set of all {characters} onto which a {coded
	character set} maps {integers} ({code positions}).

	For example, consider these two simple coded character sets:

	 Coded Character Set One:
	  integer 0  ->  the character "A"
	  integer 1  ->  the character "B"

	 Coded Character Set Two:
	  integer 0  ->  the character "B"
	  integer 1  ->  the character "A"

	Both of these coded character sets map to the characters "A"
	and "B", so they have the same character repertoire.  But
	since the mapping is different (and obviously incompatible),
	these are different coded character sets.

	(1998-12-17)

character set

	<character> A particular {mapping} between {characters} and
	{byte strings}, i.e. the combination of a particular
	{character encoding} (which maps between byte strings and
	{integers}) and a particular {coded character set} (which maps
	between integers and characters).

	For example: {ASCII} (the ASCII coded character set, encoded
	directly as single-byte values), or {UTF-8} (the {Unicode}
	coded character set, encoded with an 8-bit transformation
	method).

	The {character repertoire} is the complete set of all
	characters in the character set.

	(2015-11-29)

character set identifier

	<character> (CSID) (IBM) A number that identifies a {character
	set}.

	(1995-03-21)

charge-coupled device

	<electronics> (CCD) A semiconductor technology used to build
	light-sensitive electronic devices such as cameras and image
	scanners.  CCDs can be made to detect either colour or
	black-and-white.  Each CCD chip consists of an array of
	light-sensitive photocells.  The photocell is sensitised by
	giving it an electrical charge prior to exposure.

	(2006-04-29)

CHARITY

	<language> A {functional language} based purely on {category
	theory} by Cockett, Spencer, and Fukushima, 1990-1991.

	A version for {Sun-4} is available from Tom Fukushima
	<fukushim@ucalgary.ca>.

	["About Charity", J.R.B. Cockett, U. Calgary, Canada, et al].

	(2000-10-30)

charityware

	{careware}

Charles Babbage

	<person> The British inventor known to some as the "Father of
	Computing" for his contributions to the basic design of the
	computer through his {Analytical Engine}.  His previous
	{Difference Engine} was a special purpose device intended for
	the production of mathematical tables.

	Babbage was born on December 26, 1791 in Teignmouth,
	Devonshire UK.  He entered Trinity College, Cambridge in 1814
	and graduated from Peterhouse.  In 1817 he received an MA from
	Cambridge and in 1823 started work on the Difference Engine
	through funding from the British Government.  In 1827 he
	published a table of {logarithms} from 1 to 108000.  In 1828
	he was appointed to the Lucasian Chair of Mathematics at
	Cambridge (though he never presented a lecture).  In 1831 he
	founded the British Association for the Advancement of Science
	and in 1832 he published "Economy of Manufactures and
	Machinery".  In 1833 he began work on the Analytical
	Engine. In 1834 he founded the Statistical Society of London.
	He died in 1871 in London.

	Babbage also invented the cowcatcher, the dynamometer,
	standard railroad gauge, uniform postal rates, occulting
	lights for lighthouses, Greenwich time signals, and the
	heliograph opthalmoscope.  He also had an interest in cyphers
	and lock-picking.

	[Adapted from the text by J. A. N. Lee, Copyright September
	1994].

	Babbage, as (necessarily) the first person to work with
	machines that can attack problems at arbitrary levels of
	{abstraction}, fell into a trap familiar to {toolsmiths}
	since, as described here by the English ethicist, Lord
	Moulton:

	"One of the sad memories of my life is a visit to the
	celebrated mathematician and inventor, Mr Babbage.  He was far
	advanced in age, but his mind was still as vigorous as ever.
	He took me through his work-rooms.  In the first room I saw
	parts of the original Calculating Machine, which had been
	shown in an incomplete state many years before and had even
	been put to some use.  I asked him about its present form.  'I
	have not finished it because in working at it I came on the
	idea of my {Analytical Machine}, which would do all that it
	was capable of doing and much more.  Indeed, the idea was so
	much simpler that it would have taken more work to complete
	the Calculating Machine than to design and construct the other
	in its entirety, so I turned my attention to the Analytical
	Machine.'"

	"After a few minutes' talk, we went into the next work-room,
	where he showed and explained to me the working of the
	elements of the Analytical Machine.  I asked if I could see
	it.  'I have never completed it,' he said, 'because I hit upon
	an idea of doing the same thing by a different and far more
	effective method, and this rendered it useless to proceed on
	the old lines.'  Then we went into the third room.  There lay
	scattered bits of mechanism, but I saw no trace of any working
	machine.  Very cautiously I approached the subject, and
	received the dreaded answer, 'It is not constructed yet, but I
	am working on it, and it will take less time to construct it
	altogether than it would have token to complete the Analytical
	Machine from the stage in which I left it.'  I took leave of
	the old man with a heavy heart."

	"When he died a few years later, not only had he constructed
	no machine, but the verdict of a jury of kind and sympathetic
	scientific men who were deputed to pronounce upon what he had
	left behind him, either in papers or in mechanism, was that
	everything was too incomplete of be capable of being put to
	any useful purpose."

	[Lord Moulton, "The invention of algorithms, its genesis, and
	growth", in G. C. Knott, ed., "Napier tercentenary memorial
	volume" (London, 1915), p.  1-24; quoted in Charles Babbage
	"Passage from the Life of a Philosopher", Martin
	Campbell-Kelly, ed. (Rutgers U. Press and IEEE Press, 1994),
	p. 34].

	Compare: {uninteresting}, {Ninety-Ninety Rule}.

	(1996-02-22)

Charles Simonyi

	<person> {Microsoft} {programmer}, most famously responsible
	for {Hungarian Notation}.

	Simonyi was born in Budapest in 1948, and for more than a
	decade was senior {programmer} at {Microsoft} in Redmond.

	(1999-05-25)

CHARM

	<language> An explicitly {parallel programming language} based
	on {C}, for both shared and nonshared {MIMD} computers.

	{(ftp://a.cs.uiuc.edu/pub/CHARM)}.

	Mailing list: <charm@cs.uiuc.edu>.

	["The CHARM(3.2) Programming Language Manual", UIUC, Dec
	1992].

	(2006-04-29)

CHARM++

	<language> An {object-oriented} {parallel programming} system,
	similar to {CHARM} but based on {C++}.

	{(ftp://a.cs.uiuc.edu/pub/CHARM/Charm++)}.

	E-mail: Sanjeev Krishnan <sanjeev@cs.uiuc.edu>.

	[TR 1796, UIUC].

	(1994-11-29)

Charme

	<language, logic> A language with {discrete combinatorial
	constraint logic}, aimed at industrial problems such as planning
	and {scheduling}.  Implemented in {C} at {Bull} in 1989.

	Charme is an outgrowth of ideas from {CHIP}.  It is semantically
	{nondeterministic}, with choice and {backtracking}, similar to
	{Prolog}.

	["Charme Reference Manual", AI Development Centre, Bull,
	France 1990].

	(1994-11-15)

CHARYBDIS

	<mathematics, tool> A {Lisp} program to display
	mathematical expressions.  It is related to {MATHLAB}.

	[Sammet 1969, p. 522].

	(1994-11-15)

chase pointers

	<programming> To determine a chain of memory locations where
	each location holds a pointer to the next, starting from some
	initial pointer, e.g.  traversing a {linked list} or other
	{graph} structure.  This may be performed by a computer
	executing a program or by a programmer going through a {core
	dump} or using a debugger.

	[{Jargon File}]

	(2006-05-06)

CHASM

	{CHeap ASseMbler}

chat

	<chat, messaging> Any system that allows any number of
	logged-in users to have a typed, real-time, on-line
	conversation via a {network}.

	The medium of {chat} is descended from {talk}, but the terms
	(and the media) have been distinct since at least the early
	1990s.  {talk} is prototypically for a small number of people,
	generally with no provision for {channels}.  In {chat}
	systems, however, there are many {channels} in which any
	number of people can talk; and users may send private
	(one-to-one) messages.

	Some early chat systems (in use 1998) include {IRC}, {ICQ} and
	{Palace}.  More recent alternatives include {MSN Messenger}
	and {Google Talk}.

	Chat systems have given rise to a distinctive style combining
	the immediacy of talking with all the precision (and
	verbosity) that written language entails.  It is difficult to
	communicate inflection, though conventions have arisen to help
	with this.

	The conventions of chat systems include special items of
	jargon, generally abbreviations meant to save typing, which
	are not used orally.  E.g. {BCNU}, {BBL}, {BTW}, {CUL},
	{FWIW}, {FYA}, {FYI}, {IMHO}, {OT}, {OTT}, {TNX}, {WRT},
	{WTF}, {WTH}, {<g>}, {<gr&d>}, {BBL}, {HHOK}, {NHOH}, {ROTFL},
	{AFK}, {b4}, {TTFN}, {TTYL}, {OIC}, {re}.

	Much of the chat style is identical to (and probably derived
	from) {Morse code} jargon used by ham-radio amateurs since the
	1920s, and there is, not surprisingly, some overlap with {TDD}
	jargon.  Most of the jargon was in use in {talk} systems.
	Many of these expressions are also common in {Usenet} {news}
	and {electronic mail} and some have seeped into popular
	culture, as with {emoticons}.

	The {MUD} community uses a mixture of {emoticons}, a few of
	the more natural of the old-style {talk mode} abbreviations,
	and some of the "social" list above.  In general, though,
	MUDders express a preference for typing things out in full
	rather than using abbreviations; this may be due to the
	relative youth of the MUD cultures, which tend to include many
	touch typists.  Abbreviations specific to MUDs include:
	{FOAD}, ppl (people), THX (thanks), UOK? (are you OK?).

	Some {BIFF}isms (notably the variant spelling "d00d") and
	aspects of {ASCIIbonics} appear to be passing into wider use
	among some subgroups of MUDders and are already pandemic on
	{chat} systems in general.

	See also {hakspek}.

	{Suck article "Screaming in a Vacuum"
	(http://suck.com/daily/96/10/23/)}.

	(2006-05-31)

chatbot

	<chat> (Or "chatterbot") A {bot} meant to be able to interact
	conversationally with humans.  A chatbot is either an exercise
	in {AI} or merely an interface as in an {infobot}.

	One of the first and most famous chatterbots (prior to the
	Web) was {Eliza}.

	(1999-06-19)

chat room

	{channel}

chatterbot

	{chatbot}

CHeap ASseMbler

	<tool> (CHASM) A {shareware} {assembler} for {MS-DOS}.

	(1994-11-15)

cheapernet

	<networking> (Or "thinnet") A colloquial term for thin-wire
	{Ethernet} ({10base2}) that uses {RG58} {coaxial cable}
	instead of the full-spec "Yellow Cable".

	(1995-03-28)

checkdigit

	<data> A one-digit {checksum}.

Checkout Test language

	<language> (CTL)

	["Checkout Test Language: An Interpretive Language Designed
	for Aerospace Checkout Tasks", G.S. Metsker, Proc FJCC 33(2)
	1968].

	(1994-11-14)

checkpoint

	<programming> Saving the current state of a program and its
	data, including intermediate results, to disk or other
	{non-volatile storage}, so that if interrupted the program
	could be restarted at the point at which the last checkpoint
	occurred.

	This facility came into popular use in {mainframe} {operating
	systemss} such as {OS/360} in which programs frequently ran
	for longer than the mean time between system failures.  If a
	program run fails because of some event beyond the program's
	control (e.g. hardware or {operating system} failure) then the
	processor time invested before the checkpoint will not have
	been wasted.

	(1995-02-07)

checksum

	<storage, communications> A computed value which depends on
	the contents of a block of data and which is transmitted or
	stored along with the data in order to detect corruption of
	the data.  The receiving system recomputes the checksum based
	upon the received data and compares this value with the one
	sent with the data.  If the two values are the same, the
	receiver has some confidence that the data was received
	correctly.

	The checksum may be 8 bits (modulo 256 sum), 16, 32, or some
	other size.  It is computed by summing the bytes or words of
	the data block ignoring {overflow}.  The checksum may be
	negated so that the total of the data words plus the checksum
	is zero.

	{Internet} {packets} use a 32-bit checksum.

	See also {digital signature}, {cyclic redundancy check}.

	(1996-03-01)

chemist

	<jargon> (Cambridge) Someone who wastes computer time on
	{number crunching} when you'd far rather the computer were
	working out anagrams of your name or printing Snoopy calendars
	or running {life} patterns.  May or may not refer to someone
	who actually studies chemistry.

	[{Jargon File}]

	(1995-02-07)

Chen

	{Peter Chen}

CHEOPS

	<communications> A satellite-based batch data dissemination
	project between {CERN} and member state institutes.

	(2006-06-21)

Chernobyl packet

	<networking> /cher-noh'b*l pak'*t/ A {network} {packet} that
	induces a {broadcast storm} and/or {network meltdown}, named
	in memory of the April 1986 nuclear accident at Chernobyl in
	Ukraine.

	The typical scenario involves an {IP} {Ethernet} {datagram}
	that passes through a {gateway} with both source and
	destination {Ethernet address} and {IP address} set as the
	respective broadcast addresses for the subnetworks being gated
	between.

	Compare {Christmas tree packet}.

	[{Jargon File}]

	(2004-02-17)

chess

	<games> A two-player {game} with {perfect information}.

	{Usenet} newsgroup: {news:rec.games.chess}.

	See also {Internet Chess Server}.

	(1995-03-25)

CHI

	<language> A {wide spectrum language}, the forerunner of
	{Refine}.

	["Research on Knowledge-Based Software Environments at Kestrel
	Institute", D.R. Smith et al, IEEE Trans Soft Eng, SE-11(11)
	1985]

	(2006-07-11)

Chicago

	{Windows 95}

chicken head

	<graphics, abuse> The {Commodore} Business Machines logo,
	which strongly resembles a poultry part.  Rendered in {ASCII}
	as "C=".

	With the arguable exception of the {Amiga}, Commodore's
	computers are notoriously crocky little {bitty box}es (see
	also {PETSCII}).  Thus, this usage may owe something to Philip
	K. Dick's novel "Do Androids Dream of Electric Sheep?"  (the
	basis for the movie "Blade Runner"; the novel is now sold
	under that title), in which a "chickenhead" is a mutant with
	below-average intelligence.

	[{Jargon File}]

	(2006-07-12)

chicklet keyboard

	<spelling> It's spelled "{chiclet keyboard}".

	(1997-05-16)

chiclet keyboard

	<hardware, abuse> A {keyboard} with a small, flat rectangular
	or lozenge-shaped rubber or plastic keys that look like pieces
	of Chiclets chewing gum.  Used especially to describe the
	original {IBM PCjr} keyboard.  Vendors unanimously liked these
	because they were cheap, and a lot of early {portable} and
	{laptop computers} were launched with them.  Customers
	rejected the idea with almost equal unanimity, and chiclets
	are not often seen on anything larger than a digital watch any
	more.

	[{Jargon File}]

	(1997-05-16)

Chief Information Officer

	<job> (CIO) The person who determines the overall strategic
	direction and business contribution of the {information
	systems} function in a business.

	(2004-03-18)

child

	{daughter}

child process

	<operating system> A {process} created by another process (the
	{parent process}).  Each process may create many child
	processes but will have only one parent process, except for
	the very first process which has no parent.  The first
	process, called {init} in {Unix}, is started by the {kernel}
	at {boot time} and never terminates.  A child process inherits
	most of its attributes, such as open files, from its parent.
	In fact in Unix, a child process is created (using {fork}) as
	a copy of the parent.  The chid process can then overlay
	itself with a different program (using {exec}) as required.

	(1997-11-22)

child record

	<database> A {record} lower in the hierarchical tree than a
	parent record; it is also directly liked to the parent and
	hierarchical {databases}.

	(1995-04-13)

child version

	<system management> In {change management}, a {configuration item}
	derived by altering another item (its parent version).

	(2006-07-12)

CHILI

	<language> D.L. Abt. A language for {systems programming},
	based on {ALGOL 60} with extensions for {structures} and {type
	declarations}.

	["CHILI, An Algorithmic Language for Systems Programming",
	CHI-1014, Chi Corp, Sep 1975]

	(2006-07-12)

CHILL

	{CCITT HIgh-Level Language}

Chimera

	<web> A modular, {X Window System}-based
	{web browser} for {Unix}.  Chimera uses the
	{Athena} {widget} set so {Motif} is not needed.  It supports
	forms, inline images, {TERM}, {SOCKS}, {proxy servers},
	{Gopher}, {FTP}, {HTTP} and local file accesses.  Chimera can
	be extended using external programs.  New {protocols} can
	easily be added and alternate image formats can be used for
	inline images (e.g. {PostScript}).

	Version 1.60 is available for
	{(ftp://ftp.cs.unlv.edu/pub/chimera)}.

	{(http://unlv.edu/chimera/)}.

	Chimera runs on {Sun} {SPARC} {SunOS} 4.1.x, {IBM} {RS/6000}
	{AIX} 3.2.5, {Linux} 1.1.x.  It should run on anything with
	{X11}R[3-6], {imake} and a {C} compiler.

	(1994-11-08)

chine nual

	<documentation> /sheen'yu-*l/ (MIT) The {LISP Machine} Manual,
	so called because the title was wrapped around the cover so
	only those letters showed on the front.

	[{Jargon File}]

	(1994-12-02)

Chinese Army technique

	{Mongolian Hordes technique}

CHIP

	<language>

	1. An early system on the {IBM 1130}.

	[Listed in CACM 2(5):16, May 1959].

	(2004-09-14)

	2. {Constraint Handling In Prolog}.

chip

	{integrated circuit}

CHIP-48

	A reimplementation of {CHIP-8} for the {HP-48} calculator by
	Andreas Gustafson <gson@niksula.hut.fi>.

	Posted to {news:comp.sys.handhelds} in Sep 1990.

	{(ftp://vega.hut.fi/pub/misc/hp48sx/asap)}.

	(1994-12-02)

CHIP-8

	<language, games> A low-level {interpretive language} (really
	a high-level {machine code}) developed at {RCA} in the late
	1970s for {video games} on computers using {RCA}'s {CDP1802}
	processor.  It could also be used on the {DREAM 6800}.

	{Amiga interpreter
	(ftp://ftp.cso.uiuc.edu/pub/amiga/fish/f5/ff537/CHIP8.lzh)}.

	(2002-04-09)

chip art

	{microchip art}

chip box

	{chad box}

chip creep

	<hardware> Gradual loosening of an {integrated circuit}
	("chip") in its {socket} as a result of expansion and
	contraction during the normal heating and cooling cycles of an
	electronic system, combined with vibration, e.g. due to
	cooling fans.  The chip can loosen to the point that poor
	electrical contact between chip and socket reduces the signal
	quality, causing failure.  Pushing chips back into their
	sockets can cure such symptoms temporarily.  Permanent
	solutions include soldering chips directly to the {PCB} and
	clipping the component into the socket (as on some {in-line
	memory modules}).

	The same phenomenon can affect anything plugged into a socket
	but not held securely in place, e.g. a {circuit board} plugged
	into an {edge connector} on a {motherboard} or {backplane} can
	suffer "card creep".

	(2007-06-19)

chip graffiti

	{microchip art}

Chip Jewelry

	<jargon> A euphamism for old computers destined to be scrapped
	or turned into decorative ornaments.  "I paid three grand for
	that {Mac SE}, and now it's nothing but chip jewelry."

	(1997-03-30)

Chip Scale Packaging

	<hardware> (CSP) A type of {surface mount} {integrated
	circuit} packaging that provides pre-speed-sorted, pre-tested
	and pre-packaged {die} without requiring special testing.  An
	example is {Motorola}'s {Micro SMT} packaging.

	See also: {chip-on-board}, {flip chip}, {multichip module},
	{known good die}, {ball grid array}.

	["Chip scale packaging gains at SMI. (Surface Mount
	International)", Bernard Levine, Electronic News (1991), Sept
	4, 1995 v41 n2081 p1(2)].

	(2006-08-14)

chip set

	<hardware> A collection of {integrated circuits} that are
	designed to be used together for some specific purpose.
	E.g. control circuitry in an {IBM PC}.

	(1995-03-27)

Chips & Technologies

	<company> A former leading distributor and supplier of
	{integrated circuits} and {software} to {personal computer}
	manufacturers.  As well as semiconductors they also made {flat
	panel displays}, {video controllers} and other computer
	related products.

	In 1998, {Intel Corporation} bought Chips and Technologies for
	their flat panel controllers.  In January 2000, {Asiliant
	Technologies} licensed the rights from Intel to continue to
	manufacturer and sell Chips and Technologies components.

	Address: 2950 Zanker Road, San Jose, California 95134, USA.

	(2006-09-19)

CHISEL

	<language> An extension of {C} for {VLSI} design, implemented
	as a C {preprocessor}.  It produces {CIF} as output.

	["CHISEL - An Extension to the Programming language C for VLSI
	Layout", K. Karplus, PHD Thesis, Stanford U, 1982].

	(2006-09-19)

chm

	{Compiled HTML}

chmod

	<file system> ("Change mode") The {Unix} command and {system
	call} to change the access {permissions} of a named file.
	Each file (directory, device, etc.) has nine kinds of access
	which can be allowed or denied.  Different permissions apply
	to the owner of the file, the members of the group the file
	belongs to, and all users.  Each of these classes of user
	(owner, group and other) can have permission to read, write or
	execute the file.  Chmod can also set various other mode bits
	for a file or directory such as the {sticky bit} and the {set
	user id} bit.

	Unix {man} page: chmod

	(1995-01-31)

CHOCS

	<language> A generalisation of {CCS}.

	["A Calculus of Higher-Order Communicating Systems",
	B. Thomsen, 16th POPL pp. 143-154, 1989].

	(2006-09-20)

choke

	<jargon> To fail to process input or, more generally, to fail
	at any endeavor.

	E.g. "NULs make System V's "lpr(1)" choke."  See {barf},
	{gag}.

	[{Jargon File}]

	(2006-09-20)

chomp

	<jargon> To fail.

	(1996-06-01)

CHOP

	{channel op}

Chop

	<language, tool> A {code generator} by Alan L. Wendt
	<wendt@CS.ColoState.EDU> for the {lcc} {C} compiler {front
	end}.  Version 0.6 is interfaced with Fraser and Hanson's
	{lcc} {front end}.  The result is a {C} compiler with good
	code selection but no {global optimisation}.  In 1993, Chop
	could compile and run small test programs on the {VAX}.  The
	{National Semiconductor 32000} and {Motorola 68000} code
	generators are being upgraded for {lcc} compatibility.

	{(ftp://beethoven.cs.colostate.edu/pub/chop/0.6.tar.Z)}.

	["Fast Code Generation Using Automatically-Generated Decision
	Trees", ACM SIGPLAN '90 PLDI].

	(1993-04-28)

Chorus

	<operating system> A distributed {operating system} developed
	at {INRIA}.

	(2006-09-20)

Christmas tree

	<hardware, jargon> A kind of {EIA-232} {line tester} or
	{breakout box} featuring rows of blinking red and green {LEDs}
	suggestive of Christmas lights.

	[{Jargon File}]

	(2006-09-20)

Christmas tree packet

	<networking> (Or kamikaze packet) A {packet} with every single
	option set for whatever {protocol} is in use.  The term
	doubtless derives from a fanciful image of each little option
	bit being represented by a different-coloured light bulb, all
	turned on.

	{RFC 1025}, "TCP and IP Bake Off" says:

	10 points for correctly being able to process a "Kamikaze"
	packet (AKA {nastygram}, Christmas tree packet, lamp test
	segment, et al.).  That is, correctly handle a segment with
	the maximum combination of features at once (e.g. a SYN URG
	PUSH FIN segment with options and data).

	Compare: {Chernobyl packet}.

	[{Jargon File}]

	(1994-11-09)

Christopher Strachey

	<person> Professor of Computation at Oxford, England, born
	1916, died May 1975.  He invented the term "{currying}".

	See also: {General Purpose Macro-generator}.

	(1998-06-29)

chromatic number

	<mathematics> The smallest number of colours necessary to
	colour the nodes of a {graph} so that no two adjacent nodes
	have the same colour.

	See also: {four colour map theorem}.

	{Graph Theory Lessons
	(http://utc.edu/~cpmawata/petersen/lesson8.htm)}.

	{Eric Weisstein's World Of Mathematics
	(http://mathworld.wolfram.com/ChromaticNumber.html)}.

	{The Geometry Center
	(http://geom.umn.edu/~zarembe/grapht1.html)}.

	(2000-03-18)

chrome

	<jargon> (From automotive slang via wargaming) Showy
	{features} added to attract users but contributing little or
	nothing to the power of a system.

	"The 3D icons in {Motif} are just chrome, but they certainly
	are *pretty* chrome!"

	Chrome is distinguished from {bells and whistles} by the fact
	that the latter are usually added to gratify developers' own
	desires for featurefulness.  Often used as a term of contempt
	and sometimes used in conjunction with 'fluff', "all the fluff
	and chrome that comes with Motif".

	[{Jargon File}]

	(1997-09-19)

chroot

	<operating system> The {UNIX} command to make the {root
	directory} (/) become something other than its default for the
	lifetime of the current process.  It can only be run by
	privileged users and is used to give a process (commonly a
	network server such as {FTP} or {HTTP}) access to a restricted
	portion of the {file system}.

	The new root contains copies of all the essential files and
	directories, e.g. /lib, /dev/tty, /tmp.

	(1996-12-08)

CHRP

	{PowerPC Platform}

chug

	<jargon> To run slowly; to {grind} or {grovel}.  "The disk is
	chugging like crazy."

	[{Jargon File}]

	(1995-03-25)

chug report

	<humour> From "chug" - to drink heavily.  A {bug report} whose
	the submitter is thought to have had one too many.  Not as bad
	as a {drug report}.

	[{Dodgy Coder
	(http://www.dodgycoder.net/2011/11/yoda-conditions-pokemon-exception.html)}].

	(2011-12-03)

chunker

	<programming> A program like {Unix}'s "split" which breaks an
	input file into parts, usually of a pre-set size, e.g. the
	maximum size that can fit on a {floppy}.  The parts can then
	be assembled with a {dechunker}, which is usually just the
	chunker in a different mode.

	(1998-12-15)

Church, Alonzo

	{Alonzo Church}

Church integer

	<theory> A representation of integers as functions invented by
	{Alonzo Church}, inventor of {lambda-calculus}.  The integer N
	is represented as a {higher-order function} which applies a
	given function N times to a given expression.  In the {pure
	lambda-calculus} there are no constants but numbers can be
	represented by Church integers.

	A {Haskell} function to return a given Church integer could be
	written:

		church n = c
			   where
			   c f x = if n == 0 then x else c' f (f x)
				   where
				   c' = church (n-1)

	A function to turn a Church integer into an ordinary integer:

		unchurch c = c (+1) 0

	See also {von Neumann integer}.

	(1994-11-29)

Church of the SubGenius

	<body, humour> A mutant offshoot of {Discordianism} launched
	in 1981 as a spoof of fundamentalist Christianity by the
	"Reverend" Ivan Stang, a brilliant satirist with a gift for
	promotion.  Popular among hackers as a rich source of bizarre
	imagery and references such as "Bob" the divine
	drilling-equipment salesman, the Benevolent Space Xists, and
	the Stark Fist of Removal.  Much SubGenius theory is concerned
	with the acquisition of the mystical substance or quality of
	{slack}.

	{(http://sunsite.unc.edu/subgenius/slack.html)}.

	(1996-01-02)

Church-Rosser Theorem

	<theory> A property of a {reduction} system that states that
	if an expression can be reduced by zero or more reduction
	steps to either expression M or expression N then there exists
	some other expression to which both M and N can be reduced.
	This implies that there is a unique {normal form} for any
	expression since M and N cannot be different normal forms
	because the theorem says they can be reduced to some other
	expression and normal forms are irreducible by definition.  It
	does not imply that a normal form is reachable, only that if
	reduction terminates it will reach a unique normal form.

	(1995-01-25)

ci

	<networking> The {country code} for Cote d'Ivoire (the Ivory
	Coast).

	[{Jargon File}]

	(1999-01-27)

CI$

	{CompuServe Information Service}

CICERO

	<project> Control Information system Concepts based on
	Encapsulated Real-time Objects.

	A {CERN} {DRDC} proposal.

	(1995-01-25)

Cichlid

	<graphics, tool> A tool for rapidly visualising arbitrary data
	in high-quality 3D, while allowing the viewer to explore and
	interact with the data in {real time}.  Cichlid was designed
	with remote data generation and machine independence in mind;
	data is transmitted via {TCP} from any number of sources (data
	servers) to the visualisation code (the client), which
	displays them concurrently.

	[Who?  URL?]

	(2004-01-22)

CICS

	{Customer Information Control System}

CID

	{Caller ID}

CIDR

	{Classless Inter-Domain Routing}

CIEL

	<language> An {object-oriented} {Prolog}-like language.

	["CIEL: Classes et Instances En Logique", M. Gandriau, Thesis
	ENSEEIHT, 1988].

	(1995-01-25)

CIF

	{Caltech Intermediate Form}

CIFS

	{Common Internet File System}

Cigale

	<language, tool> A {parser generator} language with extensible
	{syntax}.

	["CIGALE: A Tool for Interactive Grammar Construction and
	Expression Parsing", F. Voisin, Sci Comp Prog 7:61-86, 1986].

	(1999-01-14)

CIL

	1. <project> {Component Integration Laboratories}.

	2. <language> {Common Intermediate Language}.

CIM

	1. <application> {Computer Integrated Manufacturing}.

	2. <standard> {Common Information Model}.

CIMS PL/I

	<language> A {PL/I} subset from the Courant Institute of
	Mathematical Sciences.

	["CIMS PL/I", P.W. Abrahams, Courant Inst].

	(1997-12-15)

Cinderella Book

	<publication> "Introduction to Automata Theory, Languages, and
	Computation", by John Hopcroft and Jeffrey Ullman,
	(Addison-Wesley, 1979).  So called because the cover depicts a
	girl (putatively Cinderella) sitting in front of a Rube
	Goldberg device and holding a rope coming out of it.  On the
	back cover, the device is in shambles after she has
	(inevitably) pulled on the rope.

	See also {book titles}.

	[{Jargon File}]

	(1996-12-03)

CINT92

	{SPEC CINT92}

C-Interp

	An {interpreter} for a small subset of {C}, originally part of
	a communications package.

	{(ftp://oac2.hsc.uth.tmc.edu/Mac/Misc/C_Interp.sit)}.  E-mail:
	Chuck Shotton <cshotton@oac.hsc.uth.tmc.edu>.

	(1993-05-14)

CIO

	{Chief Information Officer}

ciphertext

	<cryptography> Text which has been encrypted by some
	{encryption} system.

	Opposite: {plaintext}.

	(1994-10-27)

CIP-L

	{CIP Language}

CIP Language

	language> (CIP-L, Computer-aided Intuition-guided Programming
	Language) A {wide-spectrum language} for incremental {program
	transformation}.  There are {ALGOL}- and {Pascal}-like
	variants.

	["The Munich Project CIP, v.I: The Wide Spectrum Language
	CIP-L", LNCS 183, Springer 1984.  Version: CIP85].

	(2006-09-20)

CIR

	{Committed Information Rate}

CIRCAL

	{CIRcuit CALculus}

circuit

	1. <communications> A communications path in a {circuit
	switching} network.

	2. <electronics> A complete path through which an electric
	current can flow.

	The term is used loosely for any device or subsystem using
	electrical or electronic components.  E.g. "That lightning
	bolt fried the circuits in my GPS receiver".  An {integrated
	circuit} (IC) contains components built on a Silicon {die}.

	(2002-07-15)

CIRcuit CALculus

	(CIRCAL) A {process algebra} used to model and verify the
	design correctness of {concurrent} systems such as {digital
	logic}.

	["CIRCAL and the Representation of Communication, Concurrency
	and Time", G.J. Milne <milne@cis.unisa.edu.au>, ACM TOPLAS
	7(2):270-298, 1985].

	(2001-03-25)

circuit switch

	{circuit switching}

circuit switched

	{circuit switching}

circuit switching

	<communications> Communication via a single dedicated path
	between the sender and receiver.  The telephone system is an
	example of a circuit switched network.

	The term {connection-oriented} is used in {packet}-based
	networks in contrast to {connectionless} communication or
	{packet switching}.

	(2006-09-20)

circular buffer

	<programming> An area of {memory} used to store a continuous
	stream of data by starting again at the beginning of the
	buffer after reaching the end.  A circular buffer is usually
	written by one process and read by another.  Separate read and
	write {pointers} are maintained.  These are not allowed to
	pass each other otherwise either unread data would be
	overwritten or invalid data would be read.

	A circuit may implement a {hardware circular buffer}.

	(2000-06-17)

Cirrus Logic

	<company> A manufacturer of {integrated circuits} including
	the {Advanced RISC Machine} and display interface processors
	and cards for use as {Windows accelerators} (requiring
	dedicated driver software).

	{(http://cirrus.com/)}.

	[Other products?]

	(1996-10-13)

CIS

	1. <standard, programming> {Case Integration Services}.

	2. <networking> {Cooperative Information System}.

	3. <business> {Customer Interaction Software},
	{Customer Information Systems}.

CISC

	{Complex Instruction Set Computer}

Cisco Systems, Inc.

	<company> {Ethernet} hardware manufacturers.

	{(http://cisco.com/)}.

	Address: 170 West Tasman Drive, San Jose, CA 95134-1706, USA.
	Telephone: +1 408 526 4000, +1 800 553 6387.  Fax: +1 408 526
	4100.

	(1995-04-19)

CISI

	<company> A French software producer.

	(2006-09-20)

CITRAN

	<language> {Caltech}'s answer to {MIT}'s {JOSS}.

	[Sammet 1969, p. 217].

	(2006-09-20)

CityScape

	<company> A re-seller of {Internet} connections to the {PIPEX}
	{backbone}.

	E-Mail: <sales@cityscape.co.uk>.

	Address: CityScape Internet Services, 59 Wycliffe Rd.,
	Cambridge, CB1 3JE, England.  Telephone: +44 (1223) 566 950.

	(1994-11-08)

CIX

	1. <networking> {Commercial Internet Exchange}.

	2. <messaging> {Compulink Information eXchange}.

CJK

	<character> In {internationalisation}, a collective term for
	Chinese, Japanese, and Korean.

	The characters of these languages are all partly based on {Han
	characters} (i.e., "hanzi" or "{kanji}"), which require 16-bit
	{character encodings}.  CJK character encodings should consist
	minimally of {Han characters} plus language-specific phonetic
	scripts such as pinyin, bopomofo, hiragana, hangul, etc.

	{CJKV} is CJK plus {Vietnamese}.

	{(ftp://ftp.ora.com/pub/examples/nutshell/ujip/doc/cjk.inf)}.

	(2001-01-01)

CJKV

	<character> {CJK} plus {Vietnamese}.  Vietnamese, like the
	other three CJK languages, requires 16-bit {character
	encodings} but it does not use {Han characters}.

	["CJKV Information Processing: Chinese, Japanese, Korean &
	Vietnamese Computing", Ken Lunde, pub. O'Reilly 1998,
	{(http://oreilly.com/catalog/cjkvinfo/)}].

	(2001-03-18)

ck

	<networking> The {country code} for the Cook Islands.

	(1999-01-27)

CL

	<language>

	1. {Control Language}.

	2. {Clausal Language}.

cl

	<networking> The {country code} for Chile.

	(1999-01-27)

CLAM

	<mathematics, tool> A system for {symbolic mathematics},
	especially General Relativity.  It was first implemented in
	{ATLAS} {assembly language} and later {Lisp}.

	See also {ALAM}.

	["CLAM Programmer's Manual", Ray d'Inverno & Russell-Clark,
	King's College London, 1971].

	(1994-11-08)

C Language Integrated Production System

	<language> (CLIPS) A language produced by Gary Riley of NASA
	{JSC} in Houston, Texas, for developing {expert systems}, with
	the inferencing and representation capabilities of {OPS5} and
	support for {forward chaining} rule-based, {object-oriented}
	and {procedural} programming.  CLIPS has a {Lisp}-like
	{syntax}.  It is available for {MS-DOS} and comes with source
	code in {C}.

	COSMIC, U Georgia, (404) 542-3265.  Austin Code Works
	<info@acw.com> (512) 258-0785.

	Versions include CLIPS 5.1, CLIPS/Ada 4.3 and CLIPS6.0 (see
	{PCLIPS}).

	{(http://jsc.nasa.gov/~clips/CLIPS.html)}.

	E-mail: <service@cossack.cosmic.uga.edu>.

	Telnet: cosmic.uga.edu, user: cosline.

	{U. Michigan
	(ftp://earth.rs.itd.umich.edu/mac.bin/etc/compsci/Clips/)},
	{ENSMP, France (ftp://ftp.ensmp.fr/pub/clips/)}.

	["Expert Systems: Principles and Programming", Joseph
	Giarratano and Gary Riley, PWS Publ 1994, ISBN 0-534-93744-6].

	(1994-12-16)

Clarify

	<company> A software vendor, specialising in {Customer
	Relationship Management} software.  {Nortel Networks} sold
	Clarify to {Amdocs} in 2002.

	{(http://amdocsclarify.com/)}.

	(2003-06-20)

Clarion

	<language> A family of systems from {SoftVelocity, Inc.} for
	building {database} applications on {Microsoft Windows}.
	Clarion products include Clarion 4GL language with a {C++} and
	{Modula-2} {compiler}.  Clarion products support fast,
	efficient database application development.  Clarion was
	originally developed by Clarion Software Corporation, later to
	become TopSpeed Corporation.  In 2000, the Clarion product
	line was acquired by SoftVelocity Inc.

	(2003-10-15)

Claris

	<company> A subsidiary company of {Apple Computer, Inc.}.  In
	January 1998, Apple restructured Claris to concentrate on
	their {FileMaker} line of {database} {software} and changed
	the company's name to {FileMaker, Inc.}.

	(1998-02-18)

CLASP

	{Computer Language for AeronauticS and Programming}

class

	1. <programming> The prototype for an {object} in an
	{object-oriented language}; analogous to a {derived type} in a
	{procedural language}.  A class may also be considered to be a
	set of objects which share a common structure and behaviour.
	The structure of a class is determined by the {class
	variables} which represent the {state} of an object of that
	class and the behaviour is given by a set of {methods}
	associated with the class.

	Classes are related in a {class hierarchy}.  One class may be
	a specialisation (a "{subclass}") of another (one of its
	"{superclasses}") or it may be composed of other classes or it
	may use other classes in a {client-server} relationship.  A
	class may be an {abstract class} or a {concrete class}.

	See also {signature}.

	2. <programming> See {type class}.

	3. <networking> One of three types of {Internet addresses}
	distinguished by their most significant bits.

	3. <language> A language developed by the {Andrew Project}.
	It was one of the first attempts to add {object-oriented}
	features to {C}.

	(1995-05-01)

Class 5 switch

	<communications> The lowest designation used in {AT&T}'s
	hierarchical {General Toll Switching Plan}, developed in 1929.

	(2013-09-14)

class hierarchy

	<programming> In {object-oriented programming}, a set of {classes}
	related by {inheritance}.  Each class is a "subclass" of another
	class - its "superclass".  The subclass contains all the features
	of its superclass, but may add new features or redefine existing
	features.  The features of a class are the set of {attributes} (or
	"properties") that an object of that class has and the {methods}
	that can be invoked on it.

	If each class has a just one superclass, this is called {single
	inheritance}.  The opposite is {multiple inheritance}, under which
	a class may have multiple superclasses.  Single inheritance gives
	the class hierarchy a {tree} structure whereas multiple
	inheritance gives a {directed graph}.  Typically there is one
	class at the top of the hierarchy which is the "object" class, the
	most general class that is an ancestor of all others and which has
	no superclass.

	In computing, as in genealogy, trees grow downwards, which is why
	subclasses are considered to be "below" their superclasses.

	When {invoking a method} on an {object}, the method is first
	looked for in the object's class, then the superclass of that
	class, and so on up the hierarchy until it is found.  Thus a class
	need only define those methods which are specific to it and it
	will inherit all other methods from all its superclasses.  An
	object of the subclass can do everything that an object of the
	superclass can and possible more.

	{C++} calls the superclass the "base class" and the subclass the
	"derived class" (not to be confused with a {derived type}).

	(2014-09-06)

classic

	<jargon> An adjective used before or after a noun to describe
	the original version of something, especially if the original
	is considered to be better.

	Examples include "Star Trek Classic" - the original TV series
	as opposed to the films, ST The Next Generation or any of the
	other spin-offs and follow-ups; or "PC Classic" - {IBM}'s
	{ISA}-bus computers as opposed to the {PS/2} series.

	(1996-10-27)

Classic-Ada

	<language> An {object-oriented} extension to {Ada}, said to be
	like {Smalltalk}.  It is implemented as an {Ada}
	{preprocessor}.

	(1994-12-05)

classical logic

	<logic> Non-{intuitionistic logic}.

	(1995-04-13)

Classic C

	{K&R C}

Classless Inter-Domain Routing

	<networking> (CIDR) /sid*r/ A technique that summarises a
	block of {Internet addresses} in a {routing table} as an
	address in {dotted decimal notation} followed by a {forward
	slash} and a two-digit decimal number giving the number of
	leading one bits in the subnet mask.  For example,
	123.123.123.0/24 specifies a subnet mask of
	11111111.11111111.11111111.00000000 (binary), implying the
	block of addresses 123.123.123.0 through 123.123.123.255.

	CIDR is "classless" because it is not limited to the subnet
	masks specified by {Internet address} classes A, B and C.

	According to {RFC 1519}, CIDR was implemented to distribute
	Internet address space more efficiently and to provide a
	mechanism for {IP route aggregation}.  This in turn reduces
	the number of entries in IP routing tables, enabling faster,
	more efficient routing, e.g. using {routing} {protocols} such
	as {OSPF}.  CIDR is supported by {BGP4}.

	See also {RFC 1467}, {RFC 1518}, {RFC 1520}.

	(2006-01-26)

class library

	<programming> A {library} of reusable {class}es for use with
	an {object-oriented programming} system.

	(1994-12-05)

class method

	<programming> 1. A {method} that operates on a {class object} (an
	{object} of {class} "class").  A class method is really just an
	ordinary {object method} that happens to operate on class objects.

	A class method might, for example, return a list of objects
	representing the methods and attributes of the given class.

	2. A {static method}.

	(2014-09-06)

class object

	<programming> In {object-oriented programming}, an {object} of
	{class} "class" that represents a {class} at {run time}.  The
	existence of class objects allows {introspection} - the ability
	for a program to discover and modify attributes of its own code.
	(See {self-modifying code}).

	A class object may also be used for "housekeeping" tasks like
	keeping count of how many objects of the class have been created,
	though this may also be done by some kind of {collection} object.

	A {class method} is a {method} that operates on class objects.

	(2014-09-06)

Class Oriented Ring Associated Language

	<language> (CORAL) A language developed by L.G. Roberts at
	{MIT} in 1964 for graphical display and systems programming on
	the {TX-2}.  It used "rings" (circular lists) from
	{Sketchpad}.

	["Graphical Communication and Control Languages",
	L.B. Roberts, Information System Sciences: Proc Second
	Congress, 1965].

	[Sammet 1969, p.462].

	(1994-11-30)

Class-Relation Method

	<programming> A design technique based on the concepts of
	{object-oriented programming} and the {Entity-Relationship
	model} from the French company {Softeam}.

	(1994-12-05)

Clausal Language

	<language> (CL) A programming language and {proof system}
	developed by Paul Voda and a colleague since 1997, written in
	{Trilogy} II.

	{Paul Voda Home (http://fmph.uniba.sk/~voda)}.

	(2002-05-28)

clause

	1. <logic> A {logical formula} in {conjunctive normal form},
	which has the {schema}

	 p1 ^ ...^ pm => q1 V ... V qn.

	or, equivalently,

	 ~p1 V ... V ~pn V q1 V ... V qn,

	where pi and qi are {atoms}.

	The operators ~, ^, V, => are {connectives}, where ~ stands
	for {negation}, ^ for {conjunction}, V for {disjunction} and
	=> for {implication}.

	2. <grammar> A part of a sentence (or programming language
	statement) that does not constitute a full sentence, e.g. an
	adjectival clause in human language or a WHERE clause in a
	{SQL} statement.

	(2004-05-28)

Clean

	<language> A {lazy} {higher-order} {purely functional
	language} from the {University of Nijmegen}.  Clean was
	originally a subset of {Lean}, designed to be an experimental
	{intermediate language} and used to study the {graph
	rewriting} model.  To help focus on the essential
	implementation issues it deliberately lacked all {syntactic
	sugar}, even {infix} expressions or {complex lists},

	As it was used more and more to construct all kinds of
	applications it was eventually turned into a general purpose
	functional programming language, first released in May 1995.
	The new language is {strongly typed} (Milner/Mycroft type
	system), provides {modules} and {functional I/O} (including a
	{WIMP} interface), and supports {parallel processing} and
	{distributed processing} on {loosely coupled} parallel
	architectures.  Parallel execution was originally based on the
	{PABC} {abstract machine}.

	It is one of the fastest implementations of functional
	languages available, partly aided by programmer {annotations}
	to influence evaluation order.

	Although the two variants of Clean are rather different, the
	name Clean can be used to denote either of them.  To
	distinguish, the old version can be referred to as Clean 0.8,
	and the new as Clean 1.0 or Concurrent Clean.

	The current release of Clean (1.0) includes a compiler,
	producing code for the {ABC} {abstract machine}, a {code
	generator}, compiling the ABC code into either {object-code}
	or {assembly language} (depending on the {platform}), I/O
	libraries, a {development environment} (not all platforms),
	and {documentation}.  It is supported (or will soon be
	supported) under {Mac OS}, {Linux}, {OS/2}, {Windows 95},
	{SunOS}, and {Solaris}.

	{(http://cs.kun.nl/~clean/)}.  E-mail:
	<clean@cs.kun.nl>.  Mailing list: <clean-request@cs.kun.nl>.

	["Clean - A Language for Functional Graph Rewriting", T. Brus
	et al, IR 95, U Nijmegen, Feb 1987].

	["Concurrent Clean", M.C. van Eekelen et al, TR 89-18, U
	Nijmegen, Netherlands, 1989].

	[{Jargon File}]

	(1995-11-08)

clean

	<jargon>

	1. Used of hardware or software designs, implies "elegance in
	the small", that is, a design or implementation that may not
	hold any surprises but does things in a way that is reasonably
	intuitive and relatively easy to comprehend from the outside.
	The antonym is "grungy" or {crufty}.

	2. To remove unneeded or undesired files in a effort to reduce
	clutter: "I'm cleaning up my account."  "I cleaned up the
	garbage and now have 100 Meg free on that partition."

	[{Jargon File}]

	(1994-12-12)

cleanroom

	<programming> A software development approach aimed at
	producing software with the minimum number of {errors}.

	(1994-12-12)

CLEAR

	<language> A {specification language} based on {initial
	algebras}.

	["An Informal Introduction to Specification Using CLEAR",
	R.M. Burstall in The Correctness Problem in Computer Science,
	R.S. Boyer et al eds, Academic Press 1981, pp. 185-213].

	(1994-11-03)

clear box testing

	{white box testing}

Clear Language for Expressing Orders

	<language> (CLEO) A language developed by {ICL} in the 1960s
	and used until early 1972 on {Leo} III {mainframes}.

	(1994-11-03)

CLEO

	{Clear Language for Expressing Orders}

CLHEP

	<library> A {C++} {class library} for high energy physics
	{applications}.

	(1994-12-12)

CLI

	1. <operating system> {Command Line Interface}.

	2. <database, standard> {Call-Level Interface}.

CLiCC

	<language> A {Common Lisp} to {C} compiler by Heinz Knutzen
	<hk@informatik.uni-kiel.de>, Ulrich Hoffman
	<uho@informatik.uni-kiel.de> and Wolfgang Goerigk
	<wg@informatik.uni-kiel.de>.  CLiCC is meant to be used as a
	supplement to existing {CLISP} systems for generating
	{portable} {applications}.  Target {C} code must be linked
	with the CLiCC {run-time library} to produce an {executable}.

	Version 0.6.2 conforms to a subset of {Common Lisp} and {CLOS}
	called {CL_0} or {CommonLisp_0} and based on {CLtL1}.  It runs
	with {Lucid Lisp}, {AKCL} or {CLISP}.  Work on {CLtL2} and
	{ANSI-CL} conformance is in progress.

	{(ftp://ftp.informatik.uni-kiel.de/pub/kiel/apply/)}.

	(1994-01-04)

click

	<hardware> To press and release a {button} on a {mouse} or
	other {pointing device}.  This generates an {event}, also
	specifying the screen position, which is processed by the
	{window manager} or {application program}.

	On a mouse with more than one button, the unqualified term
	usually implies pressing the left-most button (with the right
	index finger), other buttons would be qualified,
	e.g. "{right-click}".  Multiple clicks in quick succession,
	e.g. a double-click, often have a different meaning from slow
	single clicks.  {Keyboard} modifiers may also be used,
	e.g. "shift-click", meaning to hold down the shift key on the
	keyboard while clicking the mouse button.

	If the mouse moves while the button is pressed then this is a
	{drag}.

	(1995-03-14)

client

	<programming> A computer system or process that requests a
	service of another computer system or process (a "{server}")
	using some kind of {protocol} and accepts the server's
	responses.  A client is part of a {client-server} software
	architecture.

	For example, a {workstation} requesting the contents of a file
	from a {file server} is a client of the file server.

	(1997-10-27)

client-server

	<programming> A common form of {distributed system} in which
	software is split between {server} tasks and {client} tasks.
	A client sends requests to a server, according to some
	{protocol}, asking for information or action, and the server
	responds.

	This is analogous to a customer (client) who sends an order
	(request) on an order form to a supplier (server) who
	despatches the goods and an invoice (response).  The order
	form and invoice are part of the "protocol" used to
	communicate in this case.

	There may be either one centralised server or several
	distributed ones.  This model allows clients and servers to be
	placed independently on {nodes} in a {network}, possibly on
	different {hardware} and {operating systems} appropriate to
	their function, e.g. fast server/cheap client.

	Examples are the name-server/name-resolver relationship in
	{DNS}, the file-server/file-client relationship in {NFS} and
	the screen server/client application split in the {X Window
	System}.

	{Usenet} newsgroup: {news:comp.client-server}.

	["The Essential Client/Server Survival Guide", 2nd edition,
	1996].

	(1998-01-25)

client/server

	{client-server}

Client-Server Analyst Programmer

	<job> A person who analyses and designs {application programs}
	for a {client-server architecture}.  Typical skills include
	{ODBC}, {Windows 95}, {Windows NT}, {Macintosh}, {Novell},
	{OS/2}, {Unix}, and {RPC}.

	(2004-03-09)

client-server model

	{client-server}

Client To Client Protocol

	<networking> (CTCP) A type of {protocol} created to allow
	structured data such as {font} information to be exchanged
	between users on {IRC}.  It is also used to send a query to a
	user.  The available CTCP commands include VERSION, FINGER,
	DCC CHAT, DCC SEND, TIME, PING, ECHO, CLIENTINFO.  Some
	commands are not available on some IRC {client} software.

	(1995-04-12)

C++Linda

	<language>

	["The AUC C++Linda System", C. Callsen et al, U Aalborg, in
	Linda-Like Systems and Their Implementation, G. Wilson ed, U
	Edinburgh TR 91-13, 1991].

	(1994-12-12)

C-Linda

	<language> The most widely used variant of {Linda}, with {C}
	as the base language.  It is available from Sci Comp Assocs
	<linda@sca.com>.

	(1994-12-12)

CLIP

	1. {Compiler Language for Information Processing}.

	2. {Common LISP in Parallel}.

CLiP

	<programming, tool> A {documentation} extractor by Eric W. van
	Ammers that recognises a particular style of {comments}.  This
	style can be adjusted to suit virtually any programming
	language and target documentation language.  CLiP was designed
	to be compatible with {hypertext} systems.

	Version 2.1 runs on {MS-DOS}, {VAX}/{VMS} and {Unix}

	{(ftp://sun01.info.wau.nl/clip/)}.

	(1993-11-18)

clipboard

	<operating system> A temporary memory area, used to transfer
	information within a document being edited or between
	documents or between programs.  The fundamental operations are
	"cut" which moves data from a document to the clipboard,
	"copy" which copies it to the clipboard, and "paste" which
	inserts the clipboard contents into the current document in
	place of the current selection.

	Different {Graphical User Interfaces} vary in how they handle
	the different types of data which a user might want to
	transfer via the clipboard, some (e.g. the {X Window System})
	support only plain text, others (e.g. {NEXTSTEP}) support
	arbitrarily typed data such as images.

	(1996-08-23)

Clipper

	1. <hardware, cryptography> An {integrated circuit} which
	implements the {SkipJack} {algorithm}.  The Clipper is
	manufactured by the US government to encrypt telephone data.
	It has the added feature that it can be decrypted by the US
	government, which has tried to make the chip compulsory in the
	United States.  Phil Zimmerman (inventor of {PGP}) remarked,
	"This doesn't even pass the sniff test" (i.e. it stinks).

	{(http://wired.com/clipper/)}.

	{news:alt.privacy.clipper}

	2. A compiled {dBASE} dialect from Nantucket Corp, LA.
	Versions: Winter 85, Spring 86, Autumn 86, Summer 87, 4.5
	(Japanese Kanji), 5.0.  It uses the {Xbase} programming
	language.

	(2004-09-01)

CLIPS

	{C Language Integrated Production System}

clique

	<mathematics> A {maximal} {totally connected} {subgraph}.
	Given a {graph} with {nodes} N, a clique C is a {subset} of N
	where every node in C is directly connected to every other
	node in C (i.e. C is totally connected), and C contains all
	such nodes (C is maximal).  In other words, a clique contains
	all, and only, those nodes which are directly connected to all
	other nodes in the clique.

	[Is this correct?]

	(1996-09-22)

CLISP

	<language>

	1. {Conversational LISP}.

	2. A {Common Lisp} implementation by {Bruno Haible
	(http://haible.de/bruno/)} of {Karlsruhe University} and
	{Michael Stoll (http://math.uni-duesseldorf.de/~stoll/)}.
	of {Munich University}, both in Germany.  CLISP includes an
	{interpreter}, {bytecode compiler}, almost all of the {CLOS}
	{object system}, a {foreign language interface} and a {socket
	interface}.  An {X11} interface is available through {CLX} and
	{Garnet}.  Command line editing is provided by the {GNU}
	readline library.  CLISP requires only 2 MB of {RAM}.  The
	{user interface} comes in German, English, French, Spanish,
	Dutch, and Russian and can be changed at {run time}.

	CLISP is {Free Software} and distributed under the {GPL}.  It
	runs on {microcomputers} ({OS/2}, {Microsoft Windows},
	{Amiga}, {Acorn}) as well as on {Unix} workstations ({Linux},
	{BSD}, {SVR4}, {Sun4}, {Alpha}, {HP-UX}, {NeXTstep}, {SGI},
	{AIX}, {Sun3}, and others).

	{Official web page (http://clisp.cons.org)}.  {Mailing list
	(http://lists.sourceforge.net/lists/listinfo/clisp-list)}.

	(2003-08-04)

Clive Sinclair

	<person> Sir Clive Sinclair (1939- ) The British inventor who
	pioneered the home {microcomputer} market in the early 1980s,
	with the introduction of low-cost, easy to use, {8-bit}
	computers produced by his company, {Sinclair Research}.

	Sir Clive also invented and produced a variety of electronic
	devices from the 1960s to 1990s, including pocket calculators
	(he marketed the first pocket calculator in the world),
	radios and televisions.  Perhaps he is most famous (or some
	might say notorious) for his range electric vehicles,
	especially the Sinclair C5, introduced in 1985.  He has been a
	member of MENSA, the high IQ society, since 1962.

	{Planet Sinclair (http://nvg.ntnu.no/sinclair/)}.

	["The Sinclair Story", Rodney Dale, pub. Duckworth 1985]

	(1998-11-09)

CLIX

	<language> ["Overview of a Parallel Object-Oriented Language
	CLIX", J. Hur et al, in ECOOP '87, LNCS 276, Springer 1987,
	pp. 265-273].

	(1994-12-16)

CLM

	{Career Limiting Move}

CLNP

	{ConnectionLess Network Protocol}

clobber

	<jargon> To overwrite, usually unintentionally: "I walked off
	the end of the array and clobbered the stack."

	Compare {mung}, {scribble}, {trash}, {smash the stack}.

	[{Jargon File}]

	(1994-12-16)

clock

	<processor> A circuit in a {processor} that generates a
	regular sequence of electronic pulses used to synchronise
	operations of the processor's components.  The time between
	pulses is the {cycle time} and the number of pulses per second
	is the {clock rate} (or frequency).

	The execution times of instructions on a computer are usually
	measured by a number of clock cycles rather than seconds.
	{Clock rates} for various models of the computer may increase
	as technology improves, and it is usually the relative times
	one is interested in when discussing the {instruction set}.

	(1994-12-16)

clock frequency

	{clock rate}

clock rate

	<processor, benchmark> The fundamental rate in {cycles} per
	second at which a computer performs its most basic operations
	such as adding two numbers or transfering a value from one
	{register} to another.

	The clock rate of a computer is normally determined by the
	frequency of a crystal.  The original {IBM PC}, circa 1981,
	had a clock rate of 4.77 MHz (almost five million
	cycles/second).  As of 1995, {Intel}'s Pentium chip runs at
	100 MHz (100 million cycles/second).  The clock rate of a
	computer is only useful for providing comparisons between
	computer chips in the same {processor family}.  An {IBM PC}
	with an {Intel 486} {CPU} running at 50 MHz will be about
	twice as fast as one with the same CPU, memory and display
	running at 25 MHz.  However, there are many other factors to
	consider when comparing different computers.  Clock rate
	should not be used when comparing different computers or
	different processor families.  Rather, some {benchmark} should
	be used.  Clock rate can be very misleading, since the amount
	of work different computer chips can do in one cycle varies.
	For example, {RISC} CPUs tend to have simpler instructions
	than {CISC} CPUs (but higher clock rates) and {pipelined}
	processors execute more than one instruction per cycle.

	(1995-01-12)

clock speed

	{clock rate}

clone

	<jargon> 1. An exact copy of a product, made legally or
	illegally, from {documentation} or by {reverse engineering},
	and usually cheaper.

	E.g. "PC clone": a PC-BUS/{ISA}, {EISA}, {VESA}, or {PCI}
	compatible {x86}-based {microcomputer} (this use is sometimes
	misspelled "klone" or "PClone").  These invariably have much more
	bang per buck than the {IB PCM} they resemble.

	E.g. "Unix clone": An {operating system} designed to deliver a
	{Unix}-like environment without Unix licence fees or with
	additional "mission-critical" features such as support for
	{real-time} programming.

	2. <chat> A {clonebot}.

	[{Jargon File}]

	(2000-06-15)

clone-and-hack coding

	{case and paste}

clonebot

	<chat> (Or "clone") A {bot} meant to replicate itself en masse
	on a {talk} network (generally {IRC}).  A bot appears on the
	network as several {agents}, and then carries out some task,
	typically that of {flood}ing another user.

	Compare {ghost}.

	(1997-04-07)

CLOS

	{Common LISP Object System}

close brace

	{right brace}

closed-box testing

	{functional testing}

closed set

	<mathematics> A set S is closed under an operator * if x*y is
	in S for all x, y in S.

	(1994-12-16)

closed term

	<theory> A term with no {free variables}.

	(1994-12-16)

close parenthesis

	{right parenthesis}

Clos network

	<networking> A type of {network} topology that can connect N
	inputs to N outputs with less that N^2 crosspoint switches.

	(2006-10-07)

closure

	1. <programming> In a {reduction system}, a closure is a data
	structure that holds an expression and an environment of
	variable bindings in which that expression is to be evaluated.
	The variables may be local or global.  Closures are used to
	represent unevaluated expressions when implementing
	{functional programming languages} with {lazy evaluation}.  In
	a real implementation, both expression and environment are
	represented by pointers.

	A {suspension} is a closure which includes a flag to say
	whether or not it has been evaluated.  The term "{thunk}" has
	come to be synonymous with "closure" but originated outside
	{functional programming}.

	2. <theory> In {domain theory}, given a {partially ordered
	set}, D and a subset, X of D, the upward closure of X in D is
	the union over all x in X of the sets of all d in D such that
	x <= d.  Thus the upward closure of X in D contains the
	elements of X and any greater element of D.  A set is "upward
	closed" if it is the same as its upward closure, i.e. any d
	greater than an element is also an element.  The downward
	closure (or "left closure") is similar but with d <= x.  A
	downward closed set is one for which any d less than an
	element is also an element.

	("<=" is written in {LaTeX} as {\subseteq} and the upward
	closure of X in D is written \uparrow_\{D} X).

	(1994-12-16)

closure conversion

	<theory> The transformation of {continuation passing style}
	code so that the only {free variables} of {functions} are
	names of other functions.

	See also {Lambda lifting}.

	(1994-12-16)

cloud

	{cloud computing}

cloud computing

	<architecture> A loosely defined term for any system providing
	access via the {Internet} to processing power, storage,
	software or other computing services, often via a {web
	browser}.  Typically these services will be rented from an
	external company that hosts and manages them.

	(2009-04-21)

Clover

	<communications, protocol> A {protocoll} similar to {packet
	radio} or {AMTOR}.

	(1995-03-03)

clover key

	{feature key}

CLP

	1. {Cornell List Processor}.

	2. {Constraint Logic Programming}.

CLP*

	<language, logic programming> A derivative of {Constraint
	Logic Programming} (CLP).

	["CLP* and Constraint Abstraction", T. Hickey, 16th POPL,
	pp. 125-133, 1989].

	[Difference?]

	(1994-11-01)

CLP(R)

	<language> Constraint Logic Programming (Real) A {constraint
	logic programming} language with {real} arithmetic
	{constraints} developed by Joxan Jaffar <joxan@watson.ibm.com>
	of {IBM} {TJWRC} and S. Michaylov of {Monash University} in
	1986.

	The implementation contains a {byte-code compiler} and a
	built-in {constraint} solver which deals with {linear
	arithmetic} and contains a mechanism for delaying {nonlinear}
	constraints until they become linear.  Since CLP(R) is a
	superset of {PROLOG}, the system is also usable as a
	general-purpose {logic programming} language.  There are also
	powerful facilities for {meta programming} with constraints.

	Significant CLP(R) applications have been published in diverse
	areas such as molecular biology, finance and physical
	modelling.

	Version 1.2 for {Unix}, {MS-DOS} and {OS/2} is available from
	the authors.  It is free for academic and research purposes.

	E-mail: Roland Yap <roland@bruce.cs.monash.edu.au>.

	["The CLP(R) Language and System", J. Jaffar et al, IBM RR
	RC16292 (#72336), Nov 1990].

	(1992-10-14)

CLP(sigma*)

	<language> A {constraint logic programming} language with
	{regular sets}.

	["CLP(sigma*): Constraint Logic Programming with Regular
	Sets", C. Walinsky, Proc ICLP, 1989, pp.181-190].

	(1994-12-16)

CLR

	{Consortium for Lexical Research}

CLtL1

	<publication> A report on {Common LISP}:

	["Common LISP: The Language", Guy L. Steele, Digital Press
	1984, ISBN 0-932376-41-X].

	(1994-12-16)

CLtL2

	{Aluminum Book}

CLU

	<language> (CLUster) An {object-oriented} programming language
	developed at {MIT} by {Liskov} et al in 1974-1975.

	CLU is an {object-oriented} language of the {Pascal} family
	designed to support {data abstraction}, similar to {Alphard}.
	It introduced the {iterator}: a {coroutine} yielding the
	elements of a data object, to be used as the sequence of
	values in a {for loop}.

	A CLU program consists of separately compilable {procedures},
	{clusters} and iterators, no nesting.  A cluster is a module
	naming an {abstract type} and its operations, its internal
	representation and implementation.  Clusters and iterators may
	be generic.  Supplying actual constant values for the
	{parameters} instantiates the {module}.

	There are no {implicit type conversions}.  In a cluster, the
	explicit type conversions 'up' and 'down' change between the
	abstract type and the representation.  There is a universal
	type 'any', and a procedure force[] to check that an object is
	a certain type.  Objects may be mutable or {immutable}.

	{Exceptions} are raised using 'signal' and handled with
	'except'.  {Assignment} is by sharing, similar to the sharing
	of data objects in {Lisp}.  Arguments are passed by
	{call-by-sharing}, similar to {call-by-value}, except that the
	arguments are objects and can be changed only if they are
	mutable.  CLU has {own variables} and multiple assignment.

	CLU was one of {Kamin's interpreters}.  {clu2c} compiled CLU to
	{C}.  {Concurrent CLU} was an extension designed to support
	parallel proceses.

	["CLU Reference Manual", Barbara Liskov et al, LNCS 114,
	Springer 1981].

	E-mail: Paul R. Johnson <prj@pm-prj.lcs.mit.edu>.

	{Versions for Sun and VAX/VMS
	(ftp://pion.lcs.mit.edu/pub/clu/)}.  {Portable version
	(ftp://mintaka.lcs.mit.edu/pub/dcurtis/)}.

	(1994-12-16)

clu2c

	<tool> A {CLU} to {C} {compiler}.

	{(ftp://ftp.is.titech.ac.jp/pub/clu2c/)}.

	(2000-08-06)

cluster

	1. <architecture> Multiple {servers} providing the same
	service.  The term may imply {resilience} to failure and/or
	some kind of {load balancing} between the servers.  Compare
	{RAIS}.

	2. <file system> An elementary unit of allocation of a {disk}
	made up of one or more physical {blocks}.

	A {file} is made up of a whole number of possibly
	non-contiguous clusters.  The cluster size is a tradeoff
	between space efficiency (the bigger is the cluster, the
	bigger is on the average the wasted space at the end of each
	file) and the length of the {FAT}.

	(1996-11-04)

Cluster 86

	<language> A {distributed} {object-oriented} language by
	L. Shang <lshang@inf.ethz.ch> of {Nanjing University},
	ca. 1986.  A cluster is a {metatype}.

	There are versions for {MS-DOS} and {Unix}.

	["Cluster: An Informal Report", L. Shang, SIGPLAN Notices
	26(1):57-76, Jan 1991].

	(1994-12-21)

clustergeeking

	<jargon> /kluh'st*r-gee"king/ ({CMU}) Spending more time at a
	computer cluster doing CS homework than most people spend
	breathing.

	[{Jargon File}]

	(1994-12-21)

clustering

	{cluster}

CLUT

	{colour palette}

CLV

	{Constant Linear Velocity}

CLX

	<library, graphics> The {Common Lisp} library providing a
	low-level interface to the {X Window System}, equivalent to
	{Xlib}.  {Graphics toolkits} can be built on top of CLX,
	e.g. {McCLIM}, {Garnet}, {CLUE} and {CLIO}.  Various LISP
	implementors have independently ported CLX to their own
	{platforms}, fixing {bugs} and, in some cases, adding features
	in the process.

	{CLX Wiki (http://cliki.net/CLX)}.

	(2004-08-27)

CM

	{Configuration Management}

cm

	<networking> The {country code} for Cameroon.

	(1999-01-27)

CMA

	{Concert Multithread Architecture} from {DEC}.

CMAY

	<operating system> A {microkernel}.

	["A Microkernel for Distributed Applications", R. Bagrodia et
	al, Proc 5th Intl Conf Distrib Comp Sys IEEE 1985,
	pp. 140-149].

	(1994-12-21)

CMC

	1. <messaging> {Computer Mediated Communication}.

	2. <hardware> {Common Mezzanine Card}.

cmd

	<operating system> The {command interpreter} of {Microsoft
	Disk Operating System}.  cmd.exe appears as the interactive
	"Command Prompt" window in later versions of {Microsoft
	Windows} and is also responsible for executing .bat {batch
	files}.

	(2009-11-30)

CMGA

	1. <body> {Computer Management Group of Australia}

	2. <body> {Community of Massive Gaming Agency}.

CMIP

	{Common Management Information Protocol}

CMIS

	{Common Management Information Services}

CML

	1. A {query language}.

	["Towards a Knowledge Description Language", A. Borgida et al,
	in On Knowledge Base Management Systems, J. Mylopoulos et al
	eds, Springer 1986].

	2. {Concurrent ML}.

	(1994-12-21)

CMM

	{Capability Maturity Model}

CMOS

	{Complementary Metal Oxide Semiconductor}

CMP

	1. {cellular multiprocessing}.

	2. {Container Managed Persistance}.

	3. {Configuration Management Plan}.

CMS

	<programming> A {code management} system from {DEC}.

	(1994-12-21)

CMS-2

	<language> A general purpose language used for command and
	control applications in the US Navy.  Variants: CMS-2M and
	CMS-2Y.

	["CMS-2Y Programmers Reference Manual", M-5049, PDCSSA, San
	Diego CA, Oct 1976].

	(1994-12-21)

CMU

	{Carnegie Mellon University}

CMU CL

	{CMU Common Lisp}

CMU Common Lisp

	<language> (CMU CL) A {public domain} "industrial strength"
	{Common Lisp} programming environment.  Many of the {X3J13}
	changes have been incorporated into CMU CL.  Wherever
	possible, this has been done so as to transparently allow use
	of either {CLtL1} or proposed {ANSI CL}.  Probably the new
	features most interesting to users are {SETF} functions,
	{LOOP} and the {WITH-COMPILATION-UNIT} {macro}.

	The new CMU CL compiler is called {Python}.

	Version 17c includes an {incremental compiler}, profiler,
	run-time support, documentation, an editor and a debugger.  It
	runs under {Mach} on {SPARC}, {MIPS} and {IBM PC RT} and under
	{SunOS} on {SPARC}.

	{(ftp://lisp-sun1.slisp.cs.cmu.edu/pub/)}.

	E-mail: <slisp@cs.cmu.edu>.

	(1993-11-18)

CMVC

	{Configuration Management Version Control} from {IBM}.

CMYK

	<graphics> cyan, magenta, yellow, key.

	A {colour model} that describes each {colour} in terms of the
	quantity of each secondary colour (cyan, magenta, yellow), and
	"key" (black) it contains.  The CMYK system is used for
	printing.  For mixing of pigments, it is better to use the
	secondary colours, since they mix subtractively instead of
	additively.  The secondary colours of light are cyan, magenta
	and yellow, which correspond to the primary colours of pigment
	(blue, red and yellow). In addition, although black could be
	obtained by mixing these three in equal proportions, in
	four-colour printing it always has its own ink.  This gives
	the CMYK model.  The K stands for "Key' or 'blacK,' so as not
	to cause confusion with the B in {RGB}.

	Alternative colour models are {RGB} and {HSB}.

	(1994-12-22)

CMZ

	<programming> A {portable} {interactive} {code management}
	system from {CodeME} S.A.R.L in use in the high-energy physics
	community.

	(1994-12-22)

cn

	<networking> The {country code} for China.

	(1999-01-27)

CNAME

	<networking> The {canonical name} query type for {Domain Name
	System}.  This query asks a DNS {server} for a {host}'s
	official {hostname}.

	(1994-12-22)

CNC

	{Collaborative Networked Communication}

CNET

	<body> Centre national d'Etudes des Telecommunications.  The
	French national telecommunications research centre at Lannion.

	(1994-12-22)

CNI

	{Coalition for Networked Information}

CNN

	<architecture> {Cellular Neural Network}.

CNR

	{Communication and Network Riser}

CNRI

	{Corporation for National Research Initiatives}

co

	<networking> The {country code} for Colombia.

	(1999-01-27)

CO2

	<language, database> An {object-oriented} {database} language
	combining {C} and {O2}, from GIP Altair, Versailles, France.

	[Francois Bancilon et al, in Advances in Object-Oriented
	Database Systems, K.R. Dittrich ed, LNCS 334, Springer 1988].

	(1994-12-22)

Coad/Yourdon

	<programming> An {object-oriented analysis} and design
	{methodology}, developed by {edward Yourdon} and Peter Coad.

	(1995-04-07)

COALA

	<language>

	["COALA: The Object Code of the Compiler Producing System", S.
	Kruszewski et al, MERA, Warsaw 1974].

	(1994-12-22)

coalesced sum

	<theory> (Or "smash sum") In {domain theory}, the coalesced
	sum of {domains} A and B, A (+) B, contains all the
	non-{bottom} elements of both domains, tagged to show which
	part of the sum they come from, and a new {bottom} element.

	 D (+) E = { bottom(D(+)E) }
		   U { (0,d) | d in D, d /= bottom(D) }
		   U { (1,e) | e in E, e /= bottom(E) }

	The bottoms of the constituent domains are coalesced into a
	single bottom in the sum.  This may be generalised to any
	number of domains.

	The ordering is

		bottom(D(+)E) <= v  For all v in D(+)E

		(i,v1) <= (j,v2)    iff i = j & v1 <= v2

	"<=" is usually written as {LaTeX} \sqsubseteq and "(+)" as
	{LaTeX} \oplus - a "+" in a circle.

	(1994-12-22)

Coalition for Networked Information

	<body> (CNI) A consortium formed by American Research
	Libraries, {CAUSE} and {EDUCOM} to promote the creation of,
	and access to, information resources in networked environments
	in order to enrich scholarship and enhance intellectual
	productivity.

	(1994-12-22)

coarse grain

	{granularity}

COAST

	{Cache On A STick}

coax

	{coaxial cable}

coaxial cable

	<hardware> A kind of cable with a solid central conductor
	surrounded by insulator, in turn surrounded by a cylindrical
	shield woven from fine wires.  It is used to carry high
	frequency signals such as {video} or {radio}.  The shield is
	usually connected to electrical ground to reduce electrical
	interference.

	(1995-03-28)

COBOL

	{COmmon Business Oriented Language}

COBOL-1961 Extended

	<language> A short-lived separation of {COBOL} specifications.

	[Sammet 1969, p. 339].

	(1994-10-28)

COBOL fingers

	<jargon> /koh'bol fing'grz/ Reported from Sweden, a
	hypothetical disease one might get from coding in {COBOL}.
	The language requires code verbose beyond all reason (see
	{candygrammar}); thus it is alleged that programming too much
	in COBOL causes one's fingers to wear down to stubs by the
	endless typing.

	[{Jargon File}]

	(1994-12-22)

COBRA

	<spelling> Do you mean {CORBA}?  Or is there a COBRA?

	(1996-05-10)

cobwebsite

	<jargon, web> A {website} that hasn't been updated for
	a long time.  A dead {web page}.

	(1997-04-29)

Cocktail

	{GMD Toolbox for Compiler Construction}

cocktail shaker sort

	<algorithm> A bi-directional {bubble sort}.  Passes alternate
	between ascending through array indexes, pushing the largest
	item to the bottom; and descending through array indexes,
	pushing the smallest item to the top.

	[Performace vs plain bubble?]

	(2001-03-26)

CoCo

	<computer> The {Tandy} Color Computer with a Motorola
	{MC6809E} {CPU}.  The {Dragon} is a CoCo clone.  The CoCo was
	as powerful as the {IBM XT} at the time it was made, and could
	run {OS-9}.

	(1997-02-12)

Cocol

	{Coco Language}

Coco Language

	<language> (Cocol) A language for writing left-attributed {LL1
	grammars}, used as the input language for the {Coco} LL1
	{parser generator}, which produces {Modula-2 table-driven
	parsers} as output.

	Cocol-2 is a version for the Coco-2 generator.  {Cocol/R} is
	an improvement over the original Cocol and Cocol-2.

	{(ftp://neptune.inf.ethz.ch/)}.

	["A Compiler Generator for Microcomputers", P. Rechenberg et
	al, P-H 1989].

	(1997-12-09)

Cocol/R

	<language> (Coco Language) A language for writing
	left-attributed {LL1 grammars}, used as the input language for
	the {Coco/R} LL1 {parser generators}, which produce {C++},
	{Pascal}, {Modula-2}, {Java} or {Oberon} {recursive-descent
	parsers} and associated {scanners} as output.

	Cocol/R is an improvement over the original {Cocol} and
	Cocol-2.

	[Moessenboeck, H., "A Generator for Fast Compiler Front-Ends",
	Report 127, Dept. Informatik, ETH Zurich, 1990].

	(1997-12-09)

COCOMO

	{Constructive Cost Model}

Coco/R

	<tool> A program by Hanspeter Moessenboeck
	<moessenboeck@ssw.uni-linz.ac.at> which generates {recursive
	descent parsers} and their associated {scanners} from
	{attributed grammars} (LL1).  Coco/R can {bootstrap} itself to
	generate its own driver, {parser}, scanner and {semantic
	evaluator} from an attributed grammar included in the
	distribution.

	Versions exist for generating {Oberon}, {Modula-2}, {Pascal},
	{C}, and {C++} source for {MS-DOS} and {Unix}.  A {Java}
	implementation was planned.

	Coco/R was ported to {Modula-2} by Marc Brandis, Christof
	Brass, and Pat Terry.

	{(ftp://ftp.ssw.uni-linz.ac.at/pub/Coco)}.

	Mail server: <server@ftp.psg.com> (Subject: send
	pub/modula-2/coco/).

	E-mail: Pat Terry <p.terry@ru.ac.za> (Modula/Pascal versions),
	Hanspeter Moessenboeck <moessenboeck@ssw.uni-linz.ac.at>
	(Oberon, Java versions), Frankie Arzu <farzu@uvg.edu.gt> (C,
	C++ versions).

	["A compiler generator for microcomputers", by Rechenberg and
	Mossenbock, Prentice Hall, 1989, 0-13-155136-1].

	[Moessenboeck, H., "A Generator for Fast Compiler Front-Ends",
	Report 127, Dept. Informatik, ETH Zurich, 1990].

	[Terry, P.D., "Compilers and Compiler Generators: An
	Introduction with C++", ITCP: ISBN 1-85032-298-8].

	(1997-12-09)

CODASYL

	{Conference On DAta SYstems Languages}

Codd's First Normal Form

	{database normalisation}

Codd's reduction algorithm

	<database> An {algorithm} to convert an arbitrary expression
	of the {relational calculus} to an equivalent expression of
	the {relational algebra}.  This can be used as the basis of an
	implementation of the relational calculus.

	(1998-10-05)

code

	1. <software> Instructions for a computer in some programming
	language, often {machine language} (machine code).

	The word "code" is often used to distinguish instructions from
	{data} (e.g. "The code is marked 'read-only'") whereas the
	word "{software}" is used in contrast with "{hardware}" and
	may consist of more than just code.

	(2000-04-08)

	2. <cryptography> Some method of {encryption} or the resulting
	encrypted message.

	(2006-11-10)

Code 2.0

	<language> A {coarse-grain} {dataflow} language with a graphical
	interface for users to draw communication structure.

	{(http://cs.utexas.edu/users/code)}.

	E-mail: Emery Berger <emery@cs.utexas.edu>.

	["The CODE 2.0 Parallel Programming Language", P. Newton et
	al, Proc ACM Intl Conf on Supercomput, Jul 1992].

	(1996-01-13)

codebook

	{data dictionary}

CODEC

	{coder/decoder}

CodeCenter

	<programming> (Formerly {Saber-C}) A proprietary {software
	development environment} for {C} programs, offering an
	integrated toolkit for developing, testing, debugging and
	maintainance.

	(1994-12-23)

coded character set

	<character, standard> A mapping, generally 1:1, from a set of
	{integers}, known as {character codes} or {code positions}, to
	a set of {characters} that may include letters, digits,
	punctuation, {control codes}, mathematical and typographic
	symbols.

	There are several {standard} coded character sets, the most
	widely used is {ASCII}, generally in its {Latin-1} dialect,
	with {Unicode} becoming slowly more common; while {EBCDIC} and
	{Baudot} are extinct except in {legacy systems}.

	(2009-01-06)

Code Division Multiple Access

	<communications> (CDMA) (Or "spread spectrum") A form of
	{multiplexing} where the transmitter encodes the signal using
	a {pseudorandom} sequence which the receiver also knows and
	can use to decode the received signal.  Each different random
	sequence corresponds to a different communication channel.

	{Motorola} uses CDMA for digital mobile phones.  Qualcomm
	pioneered the introduction of CDMA into wireless telephone
	services.

	(2001-03-28)

code division multiplexing

	{Code Division Multiple Access}

Code-Generator Generator Language

	<language> ("seagull") (CGGL) A {machine description language}
	based on modelling the computer as a {finite-state machine}.

	["A Code Generator Generator Language", M.K. Donegan et al,
	SIGPLAN Notices 14(8):58-64, Aug 1979].

	(1994-10-24)

code grinder

	<jargon, abuse> A {suit}-wearing minion of the sort hired in
	legion strength by banks and insurance companies in the {Real
	World} to implement payroll packages in {RPG} and other such
	unspeakable horrors.  In its native habitat, the code grinder
	often removes the suit jacket to reveal an underplumage
	consisting of button-down shirt (starch optional) and a tie.
	In times of dire stress, the sleeves (if long) may be rolled
	up and the tie loosened about half an inch.  It seldom helps.
	The {code grinder}'s milieu is about as far from hackerdom as
	one can get and still touch a computer; the term connotes
	pity.

	Used of or to a {hacker}, this term is a really serious slur
	on the person's creative ability; it connotes a design style
	characterised by primitive technique, rule-boundedness, {brute
	force} and utter lack of imagination.

	Compare {card walloper}.  Contrast {real programmer}.

	[{Jargon File}]

	(1994-11-11)

code management

	{source code management}

code police

	<humour> (By analogy with George Orwell's "Thought Police" in
	"1984") A mythical team of Gestapo-like storm troopers that
	enforce programming style rules.  Used ironically, to suggest
	that the practice under discussion is condemned mainly by
	anal-retentive {weenies}.  "Dike out that {goto} or the code
	police will get you!"  The ironic usage is perhaps more
	common.

	[{Jargon File}]

	(1994-12-08)

code position

	<character> An {integer} that a {coded character set} maps to
	a {character}.  A code position is normally stored or
	transmitted by applying a {character encoding} to turn it into
	a {byte string}.

	(2002-03-03)

coder/decoder

	<communications> (CODEC) An electronic device or component
	combining the circuits needed to convert digital signals to
	and from analog ({Pulse Code Modulation}) form.

	(1997-07-22)

codes

	1. <jargon> Programs.  This usage is common among scientific
	computing people who use {supercumputers} for heavy-duty
	{number crunching}.

	2. <cryptography> Something to do with {cryptography}.

	[{Jargon File}]

	(1994-10-28)

C-odeScript

	<language> A {Liana} interpreter, embeddable in {C} and {C++}
	programs.

	(1995-03-09)

code segment

	<memory> ({Intel 8086} CS) The area of memory containing the
	{machine code} instructions of a {program}.  The code segment
	of a program may be shared between multiple processes running
	that code so long as none of them tries to modify it.

	{Unix}, confusingly, calls this the "text segment" and the
	area for uninitialied data, the {bss segment}.

	Initialised data is located in the {data segment}.

	(1996-12-21)

code walk

	<programming> Stepping through {source code} as part of a
	{code review}.

	Where a code walk probably only follows the potential {control
	flow} of a program, a {dry run} is a more detailed manual
	execution of a program that also keeps track of the value of
	every {variable} involved.

	(2006-11-27)

codewalker

	<programming, tool> A program component that analyses other
	programs.  {Compilers} have codewalkers in their front ends;
	so do {cross-reference generators} and some database front
	ends.  Other utility programs that try to do too much with
	source code may turn into codewalkers.  As in "This new
	'vgrind' feature would require a codewalker to implement."

	[{Jargon File}]

	(1994-12-23)

CODIL

	{COntext Dependent Information Language}

codomain

	<theory> The set of values or {type} containing all possible
	results of a {function}.  The codomain of a function f of type
	D -> C is C.  A function's {image} is a subset of its
	codomain.

	(1994-12-23)

coercion

	{implicit type conversion}

COFF

	{Common Object File Format}

COGENT

	{COmpiler and GENeralized Translator}

Cogent Prolog

	<language> A full {Edinburgh standard Prolog} with {debugger},
	{listener}, {DCG}, many {built-ins}, text windows, support for
	{modules}, and support for both 16-bit and 32-bit {protected
	mode}.

	Contact: Dennis C. Merritt.

	(1999-11-24)

Cognitech

	<company> A French software company specialising in
	{artificial intelligence}.

	(1995-01-04)

cognitive architecture

	<architecture> A computer architecure involving
	{non-deterministic}, multiple {inference} processes, as found
	in {neural networks}.  Cognitive architectures model the human
	brain and contrast with single processor computers.

	The term might also refer to software architectures,
	e.g. {fuzzy logic}.

	[Origin?  Better definition?  Reference?]

	(1995-11-29)

COGO

	<application> A subsystem of {ICES} aimed at {coordinate geometry}
	problems in civil engineering.

	["Engineer's Guide to ICES COGO I", R67-46, CE Dept MIT, Aug
	1967].

	(1995-01-04)

Coherent Parallel C

	<language> A {data parallel} version of {C}.

	["Coherent Parallel C", E. Felten et al in Third Conf on
	Hypercube Concurrent Computers and Appls, ACM, 1988,
	pp. 440-450].

	(1995-01-04)

COHESION

	<programming> {DEC}'s {CASE} environment.

	[Details?].

	(1995-01-04)

COIF

	<language> {Fortran} with {interactive} graphic extensions for
	{circuit design}, on {UNIVAC 1108}.

	["An Interactive Software System for Computer-Aided Design: An
	Application to Circuit Projects", CACM 9(13), Sep 1970].

	(1995-01-04)

CoIP

	{Conferencing over IP}

cokebottle

	<character, humour> /kohk'bot-l/ Any unusual character,
	particularly one you can't type because it isn't on your
	keyboard.  {MIT} people used to complain about the
	"control-meta-cokebottle" commands at {SAIL}, and {SAIL}
	people complained about the "{altmode}-altmode-cokebottle"
	commands at {MIT}.  After the demise of the {space-cadet
	keyboard}, "cokebottle" was used less, but was often used to
	describe weird or non-intuitive keystrokes.

	The {OSF}/{Motif} {window manager}, "{mwm}" keystroke for
	switching to the default keybindings and behaviour is
	control-meta-{bang}.  Since {exclamation mark} might be
	thought to look like a Coke bottle, {Motif} hackers referred
	to this keystroke as "cokebottle".

	See also {quadruple bucky}.

	[{Jargon File}]

	(1995-01-04)

COLASL

	<mathematics, application> An early system for numerical
	problems on the {IBM 7030}.  It used a special {character set}
	for input of natural mathematical expressions.

	[Sammet 1969, pp. 265-271].

	(1995-01-04)

COLD

	1. <language> A {sugar}ed version of {COLD-K}.

	2. <storage> Computer Output to Laser Disk - see {Enterprise
	Report Management}.

	(2007-07-24)

cold boot

	<operating system> A {boot} from {power off}.

	Contrast {warm boot}.

	[{Jargon File}]

	(1995-11-27)

ColdFusion

	<web, database, tool> {Allaire Corporation}'s commercial
	{database} application development tool that allows {databases} to
	have a {web interface}, so a database can be queried and updated
	using a {web browser}.

	The ColdFusion Server application runs on the {web server} and
	has access to a {database}.  ColdFusion files on the web
	server are {HTML} pages with additional ColdFusion commands to
	{query} or {update} the database, written in {CFML}.  When the
	page is requested by the user, the {web server} passes the
	page to the Cold Fusion application, which executes the {CFML}
	commands, places the results of the {CFML} commands in the
	{HTML} file, and returns the page to the {web server}.  The
	page returned to the {web server} is now an ordinary {HTML}
	file, and it is sent to the user.

	Examples of ColdFusion applications include order entry, event
	registration, catalogue search, directories, calendars, and
	interactive training.  ColdFusion applications are robust
	because all database interactions are encapsulated in a single
	industrial-strength {CGI} script.  The formatting and
	presentation can be modified and revised at any time (as
	opposed to having to edit and recompile {source code}).

	ColdFusion Server can connect with any database that supports
	{ODBC} or {OLE DB} or one that has a native database driver.
	Native database drivers are available for {Oracle} and
	{Sybase} databases.

	ColdFusion is available for {Windows}, {Solaris}, and {HP-UX}.
	A {development environment} for creating ColdFusion files,
	called ColdFusion Studio, is also available for {Windows}.

	The {filename extension} for ColdFusion files is .cfm

	{(http://coldfusion.com/)}.

	(2003-07-27)

ColdFusion Markup Language

	<language, web> (CFML) A {tag} based {markup}
	language used to create {ColdFusion} {web applications} by
	embedding ColdFusion commands in {HTML} files.

	(1999-08-01)

COLD-K

	<language> A formal design {kernel language} for describing
	(sequential) software systems in intermediate stages of their
	design.

	["An Introduction to COLD-K", H.B.M. Jonkers in Algebraic
	Methods: Theory, Tools and Applications, M. Wirsing et al eds,
	LNCS 394, Springer 1989, pp. 139-205].

	(1995-01-04)

COLINGO

	<language> Compile On-LINe and GO.  An english-like {query}
	system from {MITRE Corporation} for the {IBM 1401}.

	["The COLINGO System Design Philosophy", Information System
	Sciences, Proc Second Congress, 1965].

	[Sammet 1969, p. 664].

	(1995-01-04)

collision

	1. <networking> When two {hosts} transmit on a {network} at
	once causing their {packets} to corrupt each other.

	See {collision detection}.

	2. <programming> {hash collision}.

	(1995-01-06)

collision detection

	<networking> A class of methods for sharing a data
	transmission medium in which {hosts} transmit as soon as they
	have data to send and then check to see whether their
	transmission has suffered a {collision} with another host's.

	If a collision is detected then the data must be resent.  The
	resending algorithm should try to minimise the chance that two
	hosts's data will repeatedly collide.  For example, the
	{CSMA/CD} protocol used on {Ethernet} specifies that they
	should then wait for a random time before re-transmitting.

	See also {backoff}.

	This contrasts with {slotted protocols} and {token passing}.

	(1997-03-18)

collocation

	{co-location}

co-location

	<networking> /koh'loh-kay`sh*n/ or /koh`loh-kay'sh*n/ (Or
	"colocation") Providing network connections such as {Internet}
	{leased lines} to several {servers} housed together in a
	{server room}.  This is typically provided as a commercial
	service.

	The hyphenated form is correct and the most common on the web,
	followed by "colocation".  "collocation" (/ko`loh-kay'sh*n/,
	not /koh'-/), is an old word with a similar meaning.  It is
	common in dictionaries and follows the pattern of other
	Latin-derived words like collect, college, and collate, but is
	least common on the web.

	The verbal form is "to colocate" or "co-locate" (commonly
	/koh'loh`kayt/, also (US) /koh`loh'kayt/).

	(2000-10-03)

colon

	<character> ":" {ASCII} character 58.  Common names: {ITU-T}:
	colon.  Rare: dots; {INTERCAL}: two-spot.

	(1995-09-25)

color

	{colour}

Color Graphics Adapter

	<hardware, graphics> (CGA) One of {IBM}'s earliest hardware
	video {display standards} for use in {IBM PCs}.  CGA can
	display 80*25 or 40*25 text in 16 colors, 640*200 {pixels} of
	graphics in two colors or 320*200 in four colors (IBM PC video
	modes 0-6).  It is now obsolete.

	(1995-11-11)

color model

	{colour model}

Colossus

	(A huge and ancient statue on the Greek island of Rhodes).

	1. <computer> The Colossus and Colossus Mark II computers used
	by {Alan Turing} at {Bletchley Park}, UK during the Second
	World War to crack the "Tunny" cipher produced by the Lorenz
	SZ 40 and SZ 42 machines.  Colossus was a semi-fixed-program
	{vacuum tube} calculator (unlike its near-contemporary, the
	freely programmable {Z3}).

	["Breaking the enemy's code", Glenn Zorpette, IEEE Spectrum,
	September 1987, pp. 47-51.]

	2. The computer in the 1970 film, "Colossus: The Forbin
	Project".  Forbin is the designer of a computer that will run
	all of America's nuclear defences.  Shortly after being turned
	on, it detects the existence of Goliath, the Soviet
	counterpart, previously unknown to US Planners.  Both
	computers insist that they be linked, whereupon the two become
	a new super computer and threaten the world with the immediate
	launch of nuclear weapons if they are detached.  Colossus
	begins to give its plans for the management of the world under
	its guidance.  Forbin and the other scientists form a
	technological resistance to Colossus which must operate
	underground.

	{The Internet Movie Database
	(http://www.imdb.com/title/tt0064177)}.

	(2007-01-04)

colour

	<graphics> (US "color") Colours are usually represented as
	{RGB} triples in a {digital} {image} because this corresponds
	most closely to the electronic signals needed to drive a
	{CRT}.  Several equivalent systems ("{colour models}") exist,
	e.g. {HSB}.  A colour {image} may be stored as three separate
	images, one for each of red, green, and blue, or each {pixel}
	may encode the colour using separate {bit-fields} for each
	colour component, or each pixel may store a logical colour
	number which is looked up in a hardware {colour palette} to
	find the colour to display.

	Printers may use the {CMYK} or {Pantone} representations of
	colours as well as RGB.

	(1999-08-02)

colour depth

	{bits per pixel}

colour look-up table

	{colour palette}

colour model

	<graphics> Any system for representing {colours} as {ordered
	sets} of numbers.  The most common colour models are {RGB},
	{CMYK}, and {HSB}.  There are several others, e.g. {CMY}, and
	the "Lab" system(?).

	See also: {Pantone}.

	(1999-10-21)

colour palette

	<graphics, hardware> (colour look-up table, CLUT) A device
	which converts the {logical} colour numbers stored in each
	{pixel} of {video} memory into {physical} colours, normally
	represented as {RGB} triplets, that can be displayed on the
	{monitor}.  The palette is simply a block of fast {RAM} which
	is addressed by the logical colour and whose output is split
	into the red, green and blue levels which drive the actual
	display (e.g. {CRT}).

	The number of entries (logical colours) in the palette is the
	total number of colours which can appear on screen
	simultaneously.  The width of each entry determines the number
	of colours which the palette can be set to produce.

	A common example would be a palette of 256 colours
	(i.e. addressed by eight-bit pixel values) where each colour
	can be chosen from a total of 16.7 million colours (i.e. eight
	bits output for each of red, green and blue).

	Changes to the palette affect the whole screen at once and can
	be used to produce special effects which would be much slower
	to produce by updating pixels.

	(1997-06-03)

Columbia AppleTalk Package

	<networking> (CAP) An implementation of {Apple Computer}'s
	{AppleTalk} {protocols} for {Unix} {4.2BSD} and its
	derivatives, from {Columbia University}.  There are two
	different {LAP} delivery mechanisms for: {IPTalk} and
	{Ethertalk} (possibly using {UAB}).

	CAP supports the following {AppleTalk} {protocols}: {AppleTalk
	Transaction Protocol} (ATP), {Name Binding Protocol} (NBP),
	{Printer Access Protocol} (PAP), {AppleTalk Session Protocol}
	(ASP), {AppleTalk Filing Protocol} (AFP) client side.  In
	addition, the {Datagram Delivery Protocol} (DDP) and {Zone
	Information Protocol} (ZIP) are partially available.  The
	structure of the {Internet Appletalk Bridge} software makes it
	impossible to provide full DDP service.  Only the Get Zone
	List ATP ZIP command is implemented for ZIP.

	(1995-01-10)

column

	1. <database> A named slice through a {database} {table} that
	includes the same field of each {row}.  For example, a
	telephone directory table might have a row for each person
	with a name column and a telephone number column.

	2. <storage> A line of memory cells in a {dynamic
	random-access memory}, that is selected by a particular column
	address.

	(2007-10-12)

Column Address Strobe

	<hardware> (CAS) A signal sent from a processor (or {memory
	controller}) to a {dynamic random-access memory} (DRAM) (qv)
	circuit to indicate that the column {address lines} are valid.

	(1996-10-17)

COM

	1. <programming> {Component Object Model}.

	2. <storage> Computer Output on Microfilm - see {Enterprise
	Report Management}.

com

	<networking> (.com, "commercial") The {top-level domain}
	originally for American companies but, since the explosion of
	the {web}, used by most companies and for {vanity
	domains} of all types, whether in the US or not, often in
	addition to {country code} domains like amazon.co.uk.

	The term "dot com" is now widely used to refer to any Internet
	business as in "My dot com turned into a dot bomb".

	(2007-02-18)

COMAL

	{COMmon Algorithmic Language}

combination

	1. <mathematics> A {set} containing a certain number of
	objects selected from another set.

	The number of combinations of r objects chosen from a set of n
	is

		n C r = n! / ((n-r)! r!)

	where "n C r" is normally with n and r as subscripts or as n
	above r in parentheses.

	See also {permutation}.

	2. <reduction> In the theory of {combinators}, a combination
	denotes an expression in which {function application} is the
	only operation.

	(1995-04-10)

combinator

	<theory> A function with no {free variables}.  A term is
	either a constant, a variable or of the form A B denoting the
	{application} of term A (a function of one argument) to term
	B.  {Juxtaposition} associates to the left in the absence of
	parentheses.  All combinators can be defined from two basic
	combinators - S and K.  These two and a third, I, are defined
	thus:

		S f g x	= f x (g x)
		K x y	= x
		I x	= x		= S K K x

	There is a simple translation between {combinatory logic} and
	{lambda-calculus}.  The size of equivalent expressions in the
	two languages are of the same order.

	Other combinators were added by {David Turner} in 1979 when he
	used combinators to implement {SASL}:

		B f g x = f (g x)
		C f g x = f x g
		S' c f g x = c (f x) (g x)
		B* c f g x = c (f (g x))
		C' c f g x = c (f x) g

	See {fixed point combinator}, {curried function},
	{supercombinators}.

	(2002-11-03)

combinatory logic

	<logic> A system for reducing the operational notation of
	{logic}, mathematics or a {functional language} to a sequence
	of modifications to the input data structure.  First
	introduced in the 1920's by {Schoenfinkel}.  Re-introduced
	independently by {Haskell Curry} in the late 1920's (who
	quickly learned of Schoenfinkel's work after he had the idea).
	Curry is really responsible for most of the development, at
	least up until work with Feys in 1958.

	See {combinator}.

	(1995-01-05)

Comdex

	<business> A computer show that is held twice yearly, once in
	the spring (in Atlanta) and once in autumn (in Las Vegas).
	Comdex is a major show during which new releases of software
	and hardware are made.  {Microsoft}, for example, often
	annouces its products at Comdex.

	(1995-01-11)

COME FROM

	<programming, humour> A semi-mythical language construct dual
	to the "go to"; "COME FROM" <label> would cause the referenced
	label to act as a sort of {trapdoor}, so that if the program
	ever reached it, control would quietly and {automagically} be
	transferred to the statement following the "COME FROM".

	"COME FROM" was first proposed in R.L. Clark's "A Linguistic
	Contribution to GOTO-less programming", which appeared in a
	1973 {Datamation} issue (and was reprinted in the April 1984
	issue of "{Communications of the ACM}").  This parodied the
	then-raging "{structured programming}" {holy wars} (see
	{considered harmful}).

	Mythically, some variants are the "assigned COME FROM" and the
	"computed COME FROM" (parodying some nasty control constructs
	in {Fortran} and some extended {BASICs}).  Of course,
	{multitasking} (or {nondeterminism}) could be implemented by
	having more than one "COME FROM" statement coming from the
	same label.

	In some ways the {Fortran} "DO" looks like a "COME FROM"
	statement.  After the terminating statement number/"CONTINUE"
	is reached, control continues at the statement following the
	DO.  Some generous Fortrans would allow arbitrary statements
	(other than "CONTINUE") for the statement, leading to examples
	like:

	      DO 10 I=1,LIMIT
	 C imagine many lines of code here, leaving the
	 C original DO statement lost in the spaghetti...
	      WRITE(6,10) I,FROB(I)
	 10   FORMAT(1X,I5,G10.4)

	in which the trapdoor is just after the statement labelled 10.
	(This is particularly surprising because the label doesn't
	appear to have anything to do with the flow of control at
	all!)

	While sufficiently astonishing to the unsuspecting reader,
	this form of "COME FROM" statement isn't completely general.
	After all, control will eventually pass to the following
	statement.  The implementation of the general form was left to
	{Univac Fortran}, ca. 1975 (though a roughly similar feature
	existed on the {IBM 7040} ten years earlier).  The statement
	"AT 100" would perform a "COME FROM 100".  It was intended
	strictly as a debugging aid, with dire consequences promised
	to anyone so deranged as to use it in production code.  More
	horrible things had already been perpetrated in production
	languages, however; doubters need only contemplate the
	"{ALTER}" verb in {COBOL}.

	{SCL} on {VME} {mainframes} has a similar language construct
	called "whenever", used like this:

		 whenever x=123345 then S;

	Meaning whenever variable x reached the value 123345 then
	execute statement S.

	"COME FROM" was supported under its own name for the first
	time 15 years later, in {C-INTERCAL} (see {INTERCAL},
	{retrocomputing}); knowledgeable observers are still reeling
	from the shock.

	[{Jargon File}]

	(1998-04-19)

COMIS

	<language> A COMpilation and Interpretation System.

	A {Fortran} {interpreter} use by the {PAW} system.

	(1994-11-30)

COMIT

	<language> The first string-handling and {pattern-matching}
	language, designed in 1957-8 for applications in {natural
	language} translation.  The user has a workspace organised
	into shelves.  Strings are made of constituents (words),
	accessed by {subscript}.  A program is a set of rules, each of
	which has a pattern, a replacement and goto another rule.

	["COMIT Programmer's Reference Manual", V.H. Yngve, MIT Press
	1961].

	[Sammet 1969, pp. 416-436].

	(1994-11-30)

Comite Europeen des Postes et Telecommunications

	<body> (CEPT, European Conference of Post and
	Telecommunications) The committee that defined the CEPT speech
	{compression} scheme.

	[Details of compression scheme?]

	(1998-03-16)

COMIT II

	<language> ["Computer Programming with COMIT II", Victor
	H. Yngve, MIT Press, 1963].

	(1995-01-11)

Comma

	<project> COMputable MAthematics.

	An {ESPRIT} project at KU {Nijmegen}.

	(1994-11-30)

comma

	<character> "," {ASCII} character 44.  Common names: {ITU-T}:
	comma.  Rare: {ITU-T}: cedilla; {INTERCAL}: tail.

	In the {C} programming language, "," is an operator which
	evaluates its first argument (which presumably has
	{side-effects}) and then returns the value of its second
	argument.  This is useful in "for" statements and {macros}.

	(1995-03-10)

command

	<operating system> A character string which tells a program to
	perform a specific action.  Most commands take {arguments}
	which either modify the action performed or supply it with
	input.  Commands may be typed by the user or read from a file
	by a {command interpreter}.  It is also common to refer to
	menu items as commands.

	(1997-06-21)

Command Control Processor

	<operating system> (CCP) {CP/M}'s {command-line interpreter}.

	(2001-11-01)

command interpreter

	<operating system> A program which reads textual commands from
	the user or from a file and executes them.  Some commands may
	be executed directly within the interpreter itself
	(e.g. setting variables or control constructs), others may
	cause it to load and execute other files.

	{Unix}'s command interpreters are known as {shells}.

	When an {IBM PC} is {boot}ed {BIOS} loads and runs the
	{MS-DOS} command interpreter into memory from file COMMAND.COM
	found on a {floppy disk} or {hard disk} drive.  The commands
	that COMMAND.COM recognizes (e.g. COPY, DIR, PRN) are called
	internal commands, in contrast to external commands which are
	executable files.

	(1995-03-16)

command key

	{feature key}

command line interface

	<operating system> A means of communication between a
	{program} and its {user}, based solely on textual input and
	output.  Commands are input with the help of a {keyboard} or
	similar device and are interpreted and executed by the
	program.  Results are output as text or graphics to the
	{terminal}.

	Command line interfaces usually provide greater flexibility
	than {graphical user interfaces}, at the cost of being harder
	for the novice to use.  Consequently, some {hackers} look down
	on GUIs as designed {For The Rest Of Them}.

	(1996-01-12)

command-line interpreter

	{command interpreter}

command line option

	<software> (Or "option", "flag", "switch", "option switch") An
	argument to a command that modifies its function rather than
	providing data.  Options generally start with "-" in {Unix} or
	"/" in {MS-DOS}.  This is usually followed by a single letter
	or occasionally a digit.  More recently, {GNU} software
	adopted the --longoptionname style, usually in addition to
	traditional, single-character, -x style equivalents.

	Some commands require each option to be a separate argument,
	introduced by a new "-" or "/", others allow multiple option
	letters to be concatenated into a single argument with a
	single "-" or "/", e.g. "ls -al".  A few Unix commands
	(e.g. {ar}, {tar}) allow the "-" to be omitted.  Some options
	may or must be followed by a value, e.g. "cc prog.c -o prog",
	sometimes with and sometimes without an intervening space.

	{getopt} and {getopts} are commands for parsing command line
	options.  There is also a {C} library routine called getopt
	for the same purpose.

	(2007-02-18)

comma separated values

	<file format> (CSV) A {file format} used as a portable
	representation of a {database}.  Each line is one entry or
	record and the fields in a record are separated by {commas}.
	Commas may be followed by arbitrary space and/or tab
	characters which are ignored.  If field includes a comma, the
	whole field must be surrounded with {double quotes}.

	(1995-05-06)

COMMEN

	[L.J. Cohen.  Proc SJCC 30:671-676, AFIPS (Spring 1967)].

	(1994-11-30)

comment

	<programming> (Or "remark") Explanatory text embedded in
	program {source} (or less often data) intended to help human
	readers understand it.

	Code completely without comments is often hard to read, but
	code with too many comments is also bad, especially if the
	comments are not kept up-to-date with changes to the code.
	Too much commenting may mean that the code is
	over-complicated.  A good rule is to comment everything that
	needs it but write code that doesn't need much of it.
	Comments that explain __why__ something is done and how the code
	relates to its environment are useful.

	A particularly irksome form of over-commenting explains
	exactly what each statement does, even when it is obvious to
	any reasonably competant programmer, e.g.

		/* Open the input file */
		infd = open(input_file, O_RDONLY);

	(2007-02-19)

commented out

	{comment out}

comment out

	<programming> To surround a section of code with {comment}
	{delimiters} or to prefix every line in the section with a
	comment marker.  This prevents it from being compiled or
	interpreted.  It is often done to temporarily disable the
	code, e.g. during {debugging} or when the code is redundant or
	obsolete, but is being left in the source to make the intent
	of the active code clearer.

	The word "comment" is sometimes replaced with whatever
	{syntax} is used to mark comments in the language in question,
	e.g. "hash out" ({shell script}, {Perl}), "REM out" ({BASIC}),
	etc.

	Compare {condition out}.

	[{Jargon File}]

	(1998-04-28)

commercial at

	<character> "@".  {ASCII} code 64.  Common names: at sign, at,
	strudel.  Rare: each, vortex, whorl, {INTERCAL}: whirlpool,
	cyclone, snail, ape, cat, rose, cabbage, amphora.  {ITU-T}:
	commercial at.

	The @ sign is used in an {electronic mail address} to separate
	the local part from the {hostname}.  This dates back to July
	1972 when {Ray Tomlinson} was designing the first[?] {e-mail}
	program.

	It is ironic that @ has become a trendy mark of Internet
	awareness since it is a very old symbol, derived from the
	latin preposition "ad" (at).

	Giorgio Stabile, a professor of history in Rome, has traced
	the symbol back to the Italian Renaissance in a Roman
	mercantile document signed by Francesco Lapi on 1536-05-04.

	In Dutch it is called "apestaartje" (little ape-tail), in
	German "affenschwanz" (ape tail).  The French name is
	"arobase".  In Spain and Portugal it denotes a weight of about
	25 pounds, the weight and the symbol are called "arroba".
	Italians call it "chiocciola" (snail).

	See {@-party}.

	(2003-04-28)

Commercial Internet eXchange

	<networking, body> (CIX) The CIX is a non-profit, 501(c)6,
	trade association coordinating {Internet} services.  Its
	member organisations provide {TCP/IP} or {OSI} data
	{internetwork} services to the general public.  The CIX gives
	them unrestricted access to other worldwide networks.  It also
	takes an interest in the development and future direction of
	the {Internet}.

	The CIX provides a neutral forum to exchange ideas,
	information, and experimental projects among suppliers of
	internetworking services.  The CIX broadens the base of
	national and international cooperation and coordination among
	member networks.  Together, the membership may develop
	consensus positions on legislative and policy issues of mutual
	interest.

	The CIX encourages technical research and development for the
	mutual benefit of suppliers and customers of data
	communications internetworking services.  It assists its
	member networks in the establishment of, and adherence to,
	operational, technical, and administrative policies and
	standards necessary to ensure fair, open, and competitive
	operations and communication among member networks.  CIX
	policies are formulated by a member-elected board of
	directors.

	{(http://cix.org/)}.

	(1995-01-13)

commercial off-the-shelf software

	{commercial software}

commercial software

	<software> (Or "commercial off-the-shelf software", COTS)
	{Software} that is produced for sale.  This contrasts with
	{free software}, which is produced for free distribution,
	meaning without charge and/or without restriction on further
	distribution.

	Some companies that sell software distribute some (versions)
	of products free of charge (but usually with restricted
	distribution rights), this would probably still be called
	commercial software.  Conversely, software that an individual
	distributes for free, but for which he accepts donations,
	would still be called free software.

	(2007-02-07)

Commercial Translator

	<language> An English-like pre-{COBOL} language for business
	{data processing}.

	[Sammet 1969, p. 378].

	(1994-11-08)

Committed Data Rate

	<communications> (CDR) The data transfer rate that an {ISP}
	guarantees a {virtual circuit} will carry.  The CDR is the
	data portion of {Committed Information Rate} (CIR).

	(2007-02-28)

Committed Information Rate

	<networking> (CIR) The guaranteed average {data rate} of a
	{virtual circuit} in a {frame relay} network.  The CIR plus
	the Excess Information Rate (EIR, burst rate) is equal to or
	less than the speed of the access port into the network.

	The term CIR includes voice and non-data packets that are not
	included in the {Committed Data Rate} (CDR).  CIR is generally
	used in reference to {leased lines} and similar classes of
	network services, not {dial-up}.

	(2010-05-07)

comm mode

	<chat> (Or "com mode") An {ITS} feature supporting interactive
	on-line {chat}.

	[{Jargon File}]

	(1998-01-18)

Commodore

	<company, computer> {Commodore Business Machines} or one of
	their computers such as the {Commodore 64}.

	(2010-09-14)

Commodore 1010

	<storage> A 3.5-inch floppy {disk drive} for the {Amiga}.

	(1998-12-23)

Commodore 128

	<computer> (C128) An expanded {Commodore 64}, {Commodore
	Business Machines}' last commercially released 8-bit computer.
	However, they did prototype the {Commodore 65} and {Commodore
	SX64}.

	(1996-06-05)

Commodore 1541

	<storage> The best known {floppy disk} drive for the
	{Commodore 64}.  The 1541 was a single-sided 160 Kb drive but
	converting to {flippy disks} would give another 160 Kb.

	The disk drive used {Group Code Recording} and contained a
	{6502} processor as a {disk controller}.  Some people wrote
	code for it to vibrate the head at different frequencies to
	play tunes.

	The transfer rate was about 300 bytes per second.  The 1541
	used a {bit-serial} version of the {IEEE 488} parallel
	protocol.  Some third-party speed-ups could transfer about 4
	kilobytes per second over the interface, and some "fast
	loaders" managed up to 10 kbps.

	The {Commodore 1570} was an upgraded 1541 for use with the
	{Commodore 128}.

	(2000-03-07)

Commodore 1570

	<storage> {Commodore Business Machines}'s allegedly "advanced"
	disk drive for use with the {C128}.  It is basically a {1541}
	with the capability to use "burst loading" (like the
	{Commodore 1571}), and lots of new {bugs}.

	The {Commodore 1571} was a double-sided version of the 1570.

	(1996-04-07)

Commodore 1571

	<storage> {Commodore Business Machines}'s "advanced" {disk
	drive} for the {C128}.  It was the double-sided version of the
	{Commodore 1570} disk drive but, unlike the 1570, worked quite
	well.

	The 1571 supported "{burst mode}" loading when used on a C128
	in native mode, which increased the transfer speed from 1541
	speed to about three kilobytes per second (about a 10-fold
	increase).  The 1571 could be told to emulate a {1541} for use
	with a {C64} or 1541 disks.

	Bugs in early releases of the 1571 {ROM} affected access to
	the second side of the disk.

	(1996-04-07)

Commodore 1581

	<storage> {Commodore Business Machines}'s 3.5 inch {disk
	drive} for the {Commodore 64} and {Commodore 128}.  The drive
	stores 800 {kilobytes} using an {MFM} format which is
	different from both {messy-dos} 720 kb, and the {Amiga} 880 kb
	formats.

	The 1581 supports a poor imitation of {directories} which are
	really just {partitions} and largely unused.  It also supports
	burst loading like the {Commodore 1571}, but is actually
	faster as it is better designed.  It has 3160 {blocks} free
	when formatted.

	The 1581 is the highest density C64 serial bus drive made by
	Commodore.  However Creative Micro Designs (CMD) make the
	{FD2000} (1.6MB) and (until recently) the {FD4000} (3.2MB)
	3.5" disk drives.  {GEOS} users like 1581s as they are very
	fast when used with GEOS.

	See also {Commodore 1541}, {Commodore 1571}.

	(1998-12-23)

Commodore 64

	<computer> (C64) An 8-bit {Commodore Business Machines}
	{personal computer} released around September 1981.
	Prototypes were (apparently) made before Christmas 1980 (and
	shown at some computer fair).

	The {CPU} was a {6510} from {MOS Technology} (who were a
	wholly owned subsiduary of Commodore at this time(?)).  The
	C64 had 64 {kilobytes} of {RAM} as standard and a 40-column
	text, 320x200 {pixel} display generating {composite video},
	usually connected to a television.

	{DMA}-based memory expanders for the C64 (and C128) allowed
	128, 256, and 512 kb of RAM.  Several third party
	manufacturers produce accelerators and RAM expanders for the
	C64 and C128.  (Some, risking a {holy war}, compare this to
	putting a brick on roller-skates).  Such accelerators come in
	speeds up to 20MHz (20 times the original) and RAM expanders
	to 16MB.

	The C64's {1541} 5.25 {floppy disk} drive had a {6502}
	processor as a {disk controller}.

	See also {Commodore 65}.

	["Assembly language programming with the Commodore 64", Marvin
	L. De Jong].

	(1996-06-05)

Commodore 64DX

	{Commodore 65}

Commodore 65

	<computer> (Or Commodore 64DX, C65, C64DX) The last 8-bit
	computer designed by {Commodore Business Machines}, about
	1989-1991.  The C65 boasts an {ugly} collection of {custom}
	{integrated circuits} which makes even the {Amiga} hardware
	look standard.

	The core of the C65 {chipset} is the {CSG 4510} and {CSG
	4569}.  The 4510 is a {65CE02} with two {6526} {CIAs}.  The
	4569 is equivalent to a combination of the {6569} VIC-II and
	the {MMU} of the {Commodore 64}.  The C65 also has a {DMA
	controller} (Commodore's purpose built {DMAgic}) which also
	functions as a simple {blitter}, and a {floppy controller} for
	the internal {Commodore 1581}-like disk drive.  The floppy
	controller, known as the {F011}, supports seven drives (though
	the {DOS} only supports 2).  The {4510} supports all the {C64}
	{video modes}, plus an 80 column text mode, and {bitplane}
	modes.  The bitplane modes can use up to eight bitplanes, and
	{resolutions} of up to 1280 x 400.  The {palette} is 12-bit
	like the {Amiga 500}.  It also has two SID's (MOS 8580/6581)
	for stereo audio.

	The C65 has two busses, D and E, with 64 {kilobytes} of {RAM}
	on each.  The VIC-III can access the D-bus while the CPU
	accesses the E-bus, and then they can swap around.  This
	effectively makes the whole 8MB {address space} both {chip
	ram} and {fast ram}.  {RAM} expansion is accomplished through
	a {trap door} slot in the bottom which uses a {grock} of a
	connector.  The C65 has a {C128}-like native mode, where all
	of the new features are enabled, and the CPU runs at 3.5
	megahertz with its {pipeline} enabled.  It also has a C64
	{incompatibility mode} which offers approx 50-80%
	compatibility with C64 software by turning off all its {bells
	and whistles}.  The {bells and whistles} can still be accessed
	from the C64 mode, which is dissimilar to the C128's
	inescapable C64 mode.

	Production of the C65 was dropped only a few weeks before it
	moved from the Alpha stage, possibly due to Commodore's cash
	shortage.  Commodore estimate that "between 50 and 10000"
	exist.  There are at least three in Australia, about 30 in
	Germany and "some" in the USA and Canada.

	(1996-04-07)

Commodore Business Machines

	<company> (CBM) Makers of the {PET}, {Commodore 64},
	{Commodore 16}, {Commodore 128}, and {Amiga} {personal
	computers}.  Their logo is a {chicken head}.

	The Commodore name is controlled by Commodore Licensing BV,
	now a subsidiary of Asiarim.  Commodore USA signed an
	agreement with Commodore Licensing BV.

	On 1994-04-29, Commodore International announced that it had
	been unable to renegotiate terms of outstanding loans and was
	closing down the business.  Commodore US was expected to go
	into liquidation.  Commodore US, France, Spain, and Belgium
	were liquidated for various reasons.  The names Commodore and
	Amiga were maintained after the liquidation.

	After 1994, the rights to the Commodore name bounced across
	several European companies.

	On 1995-04-21, German retailer {Escom AG} bought Commodore
	International for $14m and production of the Amiga resumed.
	Netherlands-based {Tulip Computers} took over the brand.

	Production of the 8-bit range alledgedly never stopped during
	the time in liquidation because a Chinese company were
	producing the {C64} in large numbers for the local market
	there.

	In 2004, Tulip sold the Commodore name to another Dutch firm,
	Yeahronimo, that eventually changed its name to Commodore
	International.

	In April 2008 three creditors took the company to court
	demanding a bankruptcy ruling.

	On 2010-03-17, Commodore USA announced that it was to release
	a new PC in June 2010 which looks very similar to the old
	Commodore 64 but comes with a {Core 2 Duo}, {Core 2 Quad},
	{Pentium D} or {Celeron D} processor and with {Ubuntu} {Linux}
	or {Windows 7} installed.  {PC World article
	(http://pcworld.com/article/192415)}.

	(2010-09-14)

Commodore SX64

	<computer> A "portable" {Commodore 64}.  Shaped vaguely like a
	seat cushion, this cumbersome experiment in transportable
	computers had a detachable keyboard on one end which, when
	removed, revealed a 6" {monitor} and a 5 1/4" {floppy disk}
	drive.  The curious combination of a bulky design and
	microscopic display are the most likely cause for the SX64's
	discontinuation.

	[Processor?  RAM?  Dates?]

	(1997-10-25)

COMmon Algorithmic Language

	<language> (COMAL) A language for beginners developed by
	Benedict Loefstedt and Borge Christensen in 1973 and popular
	in Europe and Scandinavia.  It has a {Pascal}-like structure
	added to {BASIC}.  COMAL-80 has been adopted as an
	introductory language in Denmark.

	There is a version for the {Amiga} and a well-supported
	version for the {PC}, running under {MS-DOS} and {Microsoft
	Windows}, called UniCOMAL.  Recently, it has been developed as
	a web-scripting language called WebCOMAL.

	{macharsoft (http://macharsoft.demon.co.uk/)}.

	There is a COMAL User's Group at 5501 Groveland Terr, Madison
	WI 53716, USA.

	["Beginning COMAL", B. Christensen, Ellis Harwood 1982].

	(2000-11-14)

Common Applications Environment

	<operating system> (CAE) Part of {X/Open}, based on {POSIX}
	and {C}.

	[Details?]

	(2007-03-01)

Common Applications Service Element

	{Common Application Service Element}

Common Architecture for Next Generation Internet Protocol

	<networking> (CATNIP, originally Common Architecture
	Technology for Next-generation Internet Protocol)

	A network architecture designed to provide a compressed form
	of the existing {network layer} {protocols} and to integrate
	{CLNP}, {IP}, and {IPX}.  It provides for any of the
	{transport layer} {protocols} in use, including {TP4}, {CLTP},
	{TCP}, {UDP}, {IPX}, and {SPX}, to run over any of the network
	layer protocol formats: CLNP, IP (version 4), IPX and CATNIP.

	CATNIP was originally proposed by Robert L. Ullmann of {Lotus
	Development Corporation} on 1993-12-22.  It was published as
	{RFC 1707} in October 1994 but it is not an {Internet}
	standard of any kind.

	(1996-03-23)

COmmon Business Oriented Language

	<language, business> /koh'bol/ (COBOL) A programming language
	for simple computations on large amounts of data, designed by
	the {CODASYL} Committee in April 1960.  COBOL's {natural
	language} style is intended to be largely self-documenting.
	It introduced the {record} structure.

	COBOL was probably the most widely used programming language
	during the 1960s and 1970s.  Many of the major programs that
	required repair or replacement due to {Year 2000} {software
	rot} issues were originally written in COBOL, and this was
	responsible for a short-lived increased demand for COBOL
	programmers.  Even in 2002 though, new COBOL programs are
	still being written in some organisations and many old COBOL
	programs are still running in {dinosaur} shops.

	Major revisions in 1968 (ANS X3.23-1968), 1974 (ANS
	X3.23-1974) and 1985.

	{Usenet} newsgroup: {news:comp.lang.cobol}.

	["Initial Specifications for a Common Business Oriented
	Language" DoD, US GPO, Apr 1960].

	(2002-02-21)

common carrier

	<communications, company> (Or "phone company") A private
	company that offers telecommunications services to the public.

	(1995-03-20)

Common Command Set

	<storage, standard> (CCS) Additional requirements and features
	for direct-access {SCSI} devices.

	In 1985 when the first {SCSI} standard was being finalised as
	an {American National Standard}, the {X3T9.2} Task Group was
	approached by some manufacturers who wanted changes.  Rather
	than delay the SCSI standard, X3T9.2 formed an ad hoc group to
	define CCS.

	[Spec?  Status?  "direct-access"?]

	(1997-03-23)

Common Communication Services

	<networking, IBM> (CCS) The standard program interface to
	networks in {IBM}'s {SAA}.

	(2007-05-14)

Common Data Format

	<library> (CDF) A {library} and toolkit based on a
	{self-describing} data format for {scalar} and multidimensional
	data.  CDF aims to be platform- and discipline-independent.  A
	scientific data management package (CDF Library) allows developers
	to manage data and {metadata} through APIs.  CDF has built-in
	support for {data compression} ({gZip}, {RLE}, {Huffman}) and
	files larger than two {gigabytes}.  There are interfaces for {C},
	{FORTRAN}, {Java}, {Perl}, {C#}, {Visual Basic}, {IDL} and {MATLAB}.

	{CDF Home (http://cdf.gsfc.nasa.gov/)}

	(2015-04-26)

Common Desktop Environment

	<graphics, operating system> (CDE) A {desktop manager} from
	{COSE}.

	(1994-10-31)

Common ESP

	<language> (CESP) A {Unix}-based version of ESP ({Extended
	Self-containing Prolog}) from {Mitsubishi}'s {AI Language
	Institute}.

	(2000-07-11)

Common Gateway Interface

	<web> (CGI) A {standard} for running external
	{programs} from a {web} {HTTP} {server}.  CGI
	specifies how to pass {arguments} to the program as part of
	the HTTP request.  It also defines a set of {environment
	variables} that are made available to the program.  The
	program generates output, typically {HTML}, which the web
	server processes and passes back to the {browser}.
	Alternatively, the program can request {URL redirection}.  CGI
	allows the returned output to depend in any arbitrary way on
	the request.

	The CGI program can, for example, access information in a
	{database} and format the results as HTML.  The program can
	access any data that a normal application program can, however
	the facilities available to CGI programs are usually limited
	for security reasons.

	Although CGI programs can be compiled programs, they are more
	often written in a (semi) {interpreted language} such as
	{Perl}, or as {Unix} {shell scripts}, hence the common name
	"CGI script".

	Here is a trivial CGI script written in Perl.  (It requires
	the "CGI" module available from {CPAN}).

	 #!/usr/bin/perl
	 use CGI qw(:standard);

	 print header, start_html,
	   h1("CGI Test"),
	   "Your IP address is: ", remote_host(),
	   end_html;

	When run it produces an {HTTP} header and then a simple HTML
	page containing the {IP address} or {hostname} of the machine
	that generated the initial request.  If run from a command
	prompt it outputs:

	  Content-Type: text/html; charset=ISO-8859-1

	  <!DOCTYPE html
		  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
		   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
	  <html xmlns="http://www.w3.org/1999/xhtml"
	    lang="en-US" xml:lang="en-US">
	  <head>
	  <title>Untitled Document</title>
	  <meta http-equiv="Content-Type"
	    content="text/html; charset=iso-8859-1" />
	  </head>
	  <body>
	  <h1>CGI Test</h1>Your IP address is: localhost
	  </body>
	  </html>

	The CGI program might be saved as the file "test.pl" in the
	appropriate directory on a web server,
	e.g. "/home/httpd/test".

	Accessing the appropriate {URL}, e.g.
	http://acme.com/test/test.pl, would cause the program to
	run and a custom page produced and returned.

	Early web servers required all CGI programs to be installed in
	one directory called cgi-bin but it is better to keep them
	with the HTML files to which they relate unless they are truly
	global to the site.  Similarly, it is neither necessary nor
	desirable for all CGI programs to have the extension ".cgi".

	Each CGI request is handled by a new process.  If the process
	fails to terminate for some reason, or if requests are
	received faster than the server can respond to them, the
	server may become swamped with processes.  In order to improve
	performance, {Netscape} devised {NSAPI} and {Microsoft}
	developed the {ISAPI} standard which allow CGI-like tasks to
	run as part of the main server process, thus avoiding the
	overhead of creating a new process to handle each CGI
	invocation.  Other solutions include {mod_perl} and {FastCGI}.

	{(http://hoohoo.ncsa.uiuc.edu/cgi)}.

	(2007-05-22)

Common Hardware Reference Platform

	{PowerPC Platform}

Common Information Model

	<standard> (CIM) An {open systems} management {standard}
	driven by the {Distributed Management Task Force} (DMTF).

	(2003-06-07)

Common Intermediate Format

	<communications, standard> (CIF) A {video} format used in
	{videoconferencing} systems, which supports both {NTSC} and
	{PAL} signals, with a {data rate} of 30 {frames per second}
	(fps), with each {frame} containing 288 lines and 352
	{luminance} {pixels} per line.  CIF is part of the {ITU}
	{H.261} videoconferencing standard.

	CIF is also known as Full CIF (FCIF) to distinguish it from
	{Quarter CIF} (QCIF), a related video format standard that
	transfers one fourth as much data as CIF.

	(2007-05-14)

Common Intermediate Language

	<language> (CIL)

	[Details?]

	["Construction of a Transportable, Milti-Pass Compiler for
	Extended Pascal", G.J. Hansen et al, SIGPLAN Notices
	14(8):117-126, Aug 1979].

	(1994-10-24)

Common Internet File System

	<protocol> (CIFS) An {Internet} {file system} {protocol},
	based on {Microsoft}'s {SMB}.  Microsoft has given CIFS to the
	{Internet Engineering Task Force} (IETF) as an Internet Draft.
	CIFS is intended to complement existing protocols such as
	{HTTP}, {FTP}, and {NFS}.

	CIFS runs on top of {TCP/IP} and uses the Internet's {Domain
	Name Service} (DNS).  It is optimised to support the slower
	speed {dial-up} connections common on the Internet.

	CIFS is more flexible than FTP.  FTP operations are carried
	out on entire files whereas CIFS is aimed at routine data
	access and incorporates high-performance multi-user read and
	write operations, {locking}, and file-sharing semantics.

	CIFS is probably closest in functionality to NFS.  NFS gives
	random access to files and directories, but is {stateless}.
	With CIFS, once a file is open, state about the current access
	to that file is stored on both the client and the server.
	This allows changes on the server side to be notified to the
	clients	that are interested.

	{Microsoft Overview
	(http://msdn.microsoft.com/library/en-us/fileio/base/cifs_smb_protocol_overview.asp)}.

	{SNIA page (http://snia.org/tech_activities/CIFS/)}.

	{CIFS: A Common Internet File System, Paul Leach and Dan Perry
	(http://microsoft.com/Mind/1196/CIFS.htm)}.

	{IETF Specification. CIFS version 1
	(ftp://ietf.org/internet-drafts/draft-leach-cifs-v1-spec-01.txt)}.

	(2003-03-12)

Common-ISDN-API

	{Common ISDN Application Programming Interface}

Common ISDN Application Programming Interface

	<networking> (CAPI, Common-ISDN-API) A programming interface
	standard for an application program to communicate with an
	{ISDN} card.

	Work on CAPI began in 1989, focussing on the German ISDN
	protocol, and was finished in 1990 by a CAPI working group
	consisting of application providers, ISDN equipment
	manufacturers, large customers, user groups and DBP Telekom,
	resulting in COMMON-ISDN-API Version 1.1.  Following
	completion of the international protocol specification, almost
	every telecommunication provider offers {BRI} and {PRI} with
	{protocols} based on {Q.931} / ETS 3009 102.  Common-ISDN-API
	Version 2.0 was developed to support all Q.931 protocols.

	{(http://capi.org/)}.

	[Why not CIAPI?]

	(1998-09-07)

Common Lisp

	<language> A dialect of {Lisp} defined by a consortium of
	companies brought together in 1981 by the {Defence Advanced
	Research Projects Agency} (DARPA).  Companies included
	{Symbolics}, {Lisp Machines, Inc.}, {Digital Equipment
	Corporation}, {Bell Labs}., {Xerox}, {Hewlett-Packard},
	{Lawrence Livermore Labs}., {Carnegie-Mellon University},
	{Stanford University}, {Yale}, {MIT} and {USC Berkeley}.
	Common Lisp is {lexically scoped} by default but can be
	{dynamically scoped}.

	Common Lisp is a large and complex language, fairly close to a
	superset of {MacLisp}.  It features {lexical binding}, data
	structures using defstruct and setf, {closures}, multiple
	values, types using declare and a variety of numerical types.
	Function calls allow "&optional", keyword and "&rest"
	arguments.  Generic sequence can either be a list or an
	{array}.  It provides formatted printing using escape
	characters.  Common LISP now includes {CLOS}, an extended LOOP
	{macro}, condition system, {pretty printing} and logical
	pathnames.

	Implementations include {AKCL}, {CCL}, {CLiCC}, {CLISP},
	{CLX}, {CMU Common Lisp}, {DCL}, {KCL}, {MCL} and {WCL}.

	Mailing list: <common-lisp@ai.sri.com>.

	{ANSI Common Lisp draft proposal
	(ftp://ftp.think.com/public/think/lisp:public-review.text)}.

	["Common LISP: The Language", Guy L. Steele, Digital Press
	1984, ISBN 0-932376-41-X].

	["Common LISP: The Language, 2nd Edition", Guy L. Steele,
	Digital Press 1990, ISBN 1-55558-041-6].

	(1994-09-29)

Common LISP in Parallel

	<language, parallel> (CLIP) A version of {Common LISP} from
	{Allegro} for the {Sequent Symmetry}.

	(1994-12-12)

Common LISP Object System

	<language> (CLOS) An {object-oriented} extension to {Common
	LISP}, based on {generic functions}, {multiple inheritance},
	{declarative method combination} and a {meta-object protocol}.
	A descendant of {CommonLoops} and based on {Symbolics}
	{FLAVORS} and {Xerox} {LOOPS}, among others.

	See also {PCL}.

	["Common LISP Object System Specification X3J13 Document
	88-002R", D.G.  Bobrow et al, SIGPLAN Notices 23, Sep 1988].

	(1994-11-30)

CommonLoops

	<language> {Xerox}'s {object-oriented} {Lisp} which led to
	{CLOS}.

	See also {Portable CommonLoops}.

	{(ftp://arisia.xerox.com/pub/pcl/September-16-92-PCL-c.tar.Z)}.

	["CommonLoops: Merging Lisp and Object-Oriented Programming",
	D.G. Bobrow et al, SIGPLAN Notices 21(11):17-29, Nov 1986].

	(1999-07-02)

Common Management Information Protocol

	<protocol> (CMIP) Part of the {OSI} body of {standards}
	specifying {protocol} elements that may be used to provide the
	operation and notification services described in the related
	standard, CMIS ({Common Management Information Services}).

	Document: {ISO}/{IEC} 9596, or equivalent {ITU} X.711.

	(1997-12-07)

Common Management Information Services

	<networking> (CMIS) Part of the {OSI} body of network
	{standards}.

	Network management information services are used by {peer
	process}es to exchange information and commands for the
	purpose of {network management}.  CMIS defines a message set
	(GET, CANCEL-GET, SET, CREATE, DELETE, EVENT-REPORT and
	ACTION), and the structure and content of the messages such
	that they might be used by "open" systems.  In concept, it is
	similar to {SNMP}, but more powerful (and hence more complex).

	{ISO}/{IEC} 9595.

	(2007-08-07)

Common Object File Format

	<file format> (COFF) The {executable file} and {object file}
	format used by {Unix System V} Release 3 and later.

	{Unix manual page}: coff(5).

	(2007-08-15)

Common Object Model

	{Component Object Model}

Common Object Request Broker Architecture

	<standard, programming> (CORBA) An {Object Management Group}
	specification which provides a standard messaging interface
	between distributed {objects}.

	The original CORBA specification (1.1) has been revised
	through version 2 (CORBA 2) with the latest specification
	being version 3 (CORBA 3).  In its most basic form CORBA
	consists of the {Interface Definition Language} (IDL) and the
	Dynamic Invocation Interface (DII).

	The IDL definition is complied into a Stub (client) and
	Skeleton (server) component that communicate through an
	{Object Request Broker} (ORB).  When an ORB determines that a
	request is to a remote object, it may execute the request by
	communicating with the remote ORB.

	The Corba IDL can be mapped to a number of languages including
	{C}, {C++}, {Java}, {COBOL}, {Smalltalk}, {Ada}, {Lisp},
	{Python}, and {IDLscript}.  CORBA ORBs are widely available
	for a number of platforms.  The OMG standard for inter-ORB
	communication is {IIOP}, this ensures that all CORBA 2
	compliant ORBS are able to interoperate.

	See also {COSS}, {Component Object Model}, {RMI}.

	{OMG CORBA specs
	(http://www.omg.org/technology/documents/corba_spec_catalog.htm)}.

	(2007-09-04)

Common Objects

	<language> An {object-oriented} {Lisp} from {Hewlett-Packard}.

	["Inheritance and the Development of Encapsulated Software
	Components", A. Snyder, Proc 20th Hawaii Conf on Sys Sci,
	pp. 227-238, 1987].

	(1995-01-18)

Common Program Interface

	<programming> (CPI) The {API} of {SAA}.

	(1997-12-01)

Common User Access

	<programming> (CUA) The {user interface} standard of {SAA}.

	(1997-12-01)

Commonwealth Hackish

	<jargon> Hacker jargon as spoken outside the US, especially in
	the British Commonwealth.  It is reported that Commonwealth
	speakers are more likely to pronounce truncations like "char"
	and "soc", etc., as spelled (/char/, /sok/), as opposed to
	American /keir/ and /sohsh/.  Dots in {newsgroup} names
	(especially two-component names) tend to be pronounced more
	often (so soc.wibble is /sok dot wib'l/ rather than /sohsh
	wib'l/).  The prefix {meta} may be pronounced /mee't*/;
	similarly, Greek letter beta is usually /bee't*/, zeta is
	usually /zee't*/, and so forth.  Preferred {metasyntactic
	variables} include {blurgle}, "eek", "ook", "frodo", and
	"bilbo"; "wibble", "wobble", and in emergencies "wubble";
	"banana", "tom", "dick", "harry", "wombat", "frog", {fish},
	and so on and on (see {foo}).

	Alternatives to verb doubling include suffixes "-o-rama",
	"frenzy" (as in feeding frenzy), and "city" (examples: "barf
	city!"  "hack-o-rama!"  "core dump frenzy!").  Finally, note
	that the American terms "parens", "brackets", and "braces" for
	(), [], and {} are uncommon; Commonwealth hackish prefers
	"brackets", "square brackets", and "curly brackets".  Also,
	the use of "pling" for {bang} is common outside the United
	States.

	See also {attoparsec}, {calculator}, {chemist}, {console
	jockey}, {fish}, {go-faster stripes}, {grunge}, {hakspek},
	{heavy metal}, {leaky heap}, {lord high fixer}, {loose bytes},
	{muddie}, {nadger}, {noddy}, {psychedelicware}, {plingnet},
	{raster blaster}, {RTBM}, {seggie}, {spod}, {sun lounge},
	{terminal junkie}, {tick-list features}, {weeble}, {weasel},
	{YABA}, and notes or definitions under {Bad Thing}, {barf},
	{bum}, {chase pointers}, {cosmic rays}, {crippleware},
	{crunch}, {dodgy}, {gonk}, {hamster}, {hardwarily},
	{mess-dos}, {nibble}, {proglet}, {root}, {SEX}, {tweak} and
	{xyzzy}.

	[{Jargon File}]

	(1995-01-18)

Communicating Functional Processes

	<language> (CFP) A parallel {functional programming} language.

	["Communicating Functional Processes", M.C. van Eekelen et al,
	TR 89-3, U Nijmegen, Netherlands, 1989].

	(1994-11-30)

Communicating Sequential Processes

	<language, parallel> (CSP) A notation for {concurrency} based
	on {synchronous message passing} and selective communications
	designed by {Anthony Hoare} in 1978.  It features {cobegin}
	and coend and was a precursor to {occam}.

	See also {Contextually Communicating Sequential Processes}.

	["Communicating Sequential Processes", A.R. Hoare, P-H 1985].

	(1994-11-01)

Communication and Network Riser

	<hardware, standard> (CNR) A specification for {audio},
	{modem}, {USB} and {Local Area Networking} interfaces of core
	computer logic {chip sets}.  {Intel} introduced CNR on
	2000-02-07.  It was mainly developed by hardware and software
	developers who helped release AMR ({Audio/Modem Riser}) and is
	used by several computer manufacturers.

	{(http://www.computerhope.com/jargon/c/cnr.htm)}.

	(2007-03-15)

Communications Decency Act

	<legal> (CDA) An amendment to the U.S. 1996 Telecommunications
	Bill that went into effect on 1996-02-08.  The law, originally
	proposed by Senator James Exon to protect children from
	obscenity on the Internet, ended up making it punishable by
	fines of up to $250,000 to post indecent language on the
	Internet anywhere that a minor could read it.

	Thousands of outraged {Internet} users turned their {web
	pages} black in protest or displayed the {Electronic Frontier
	Foundation}'s special {icons}.

	On 1996-06-12, a three-judge panel in Philadelphia ruled the
	CDA unconstitutional and issued an injunction against the
	United States Justice Department forbidding them to enforce
	the "indecency" provisions of the law.  Internet users
	celebrated by displaying an animated "Free Speech" fireworks
	icon to their web pages, courtesy of the {Voters
	Telecommunications Watch}.  The Justice Department appealed
	the decision to the U.S. Supreme Court.

	(1996-11-03)

Communications of the ACM

	<publication> (CACM) A monthly publication by the {Association
	for Computing Machinery} sent to all members.  CACM is an
	influential publication that keeps computer science
	professionals up to date on developments.  Each issue includes
	articles, case studies, practitioner oriented pieces, regular
	columns, commentary, departments, the ACM Forum, technical
	correspondence and advertisements.

	{(http://acm.org/cacm/)}.

	(1995-01-18)

communications port

	<hardware, communications> A connector for a communications
	interface, usually, a {serial port}.

	(1996-08-04)

Communications Server

	<operating system> {IBM}'s rebranding of {ACF}.

	(1999-01-20)

communications software

	<communications, software> {Application programs}, {operating
	system} components, and probably {firmware}, forming part of a
	{communication system}.  These different software components
	might be classified according to the functions within the
	{Open Systems Interconnect} model which they provide.

	Typical applications include a {web browser}, {Mail User
	Agent}, {chat} and {telnet}.

	(2001-03-18)

communication system

	<communications> A system or facility for transfering data
	between persons and equipment.  The system usually consists of
	a collection of individual communication {networks},
	transmission systems, relay stations, tributary stations and
	{terminal} equipment capable of interconnection and
	interoperation so as to form an integrated whole.  These
	individual components must serve a common purpose, be
	technically compatible, employ common procedures, respond to
	some form of control and generally operate in unison.

	["Communications Standard Dictionary", 2nd Edition, Martin
	H. Weik].

	(1995-02-06)

Community of Massive Gaming Agency

	<body> (CMGA) An online {gaming portal} introduced by German Telekom.

	(2003-06-15)

COMNET

	<simulation, networking> A {simulation} tool from {CACI} for
	analysing wide-area voice or data networks, based on
	{SIMSCRIPT}.

	(2008-10-13)

compact

	1. <theory> (Or "finite", "isolated") In {domain theory}, an
	element d of a {cpo} D is compact if and only if, for any
	{chain} S, a subset of D,

		d <= lub S  =>  there exists s in S such that d <= s.

	I.e. you always reach d (or better) after a finite number of
	steps up the chain.

	("<=" is written in {LaTeX} as {\sqsubseteq}).

	[{Jargon File}]

	(1995-01-13)

	2. <jargon> Of a design, describes the valuable property that
	it can all be apprehended at once in one's head.  This
	generally means the thing created from the design can be used
	with greater facility and fewer errors than an equivalent tool
	that is not compact.  Compactness does not imply triviality or
	lack of power; for example, {C} is compact and {Fortran} is
	not, but C is more powerful than Fortran.  Designs become
	non-compact through accreting {features} and {cruft} that
	don't merge cleanly into the overall design scheme (thus, some
	fans of {Classic C} maintain that {ANSI C} is no longer
	compact).

	(2008-10-13)

Compact COBOL

	<language> A subset of {COBOL} defined, but not published,
	ca. 1961.

	[Sammet 1969, p. 339].

	(2008-10-13)

Compact Disc

	<storage> (CD) (Not "disk", this spelling is part of the
	standard).

	A 4.72 inch disc developed by {Sony} and {Philips} that can
	store, on the same disc, still and/or moving images in
	monochrome and/or color; stereo or two separate sound tracks
	integrated with and/or separate from the images; and digital
	program and information files.

	The same fabrication process is used to make both audio CDs
	and {CD-ROMs} for storing computer data, the only difference
	is in the device used to read the CD (the player or drive).

	{CD Information Center
	(http://cd-info.com/cd-info/CDInfoCenter.html)}.

	(1999-06-23)

Compact Disc interactive

	<storage> (CD-i) An embedded application of {CD-ROM} allowing
	the user limited interaction with films, games and educational
	applications via a special {controller}.

	(1994-11-02)

Compact Disc Read-Only Memory

	<storage> (CD-ROM) A {non-volatile} optical data storage
	medium using the same physical format as audio {compact
	discs}, readable by a computer with a CD-ROM drive.

	CD-ROM is popular for distribution of large databases,
	software and especially {multimedia} {applications}.  The
	maximum capacity is about 600 megabytes.  A CD can store
	around 640 {megabytes} of data - about 12 billion bytes per
	pound weight.

	CD-ROM drives are rated with a speed factor relative to music
	CDs (1x or 1-speed which gives a data transfer rate of 150
	{kilobytes} per second).  12x drives were common in April
	1997.  Above 12x speed, there are problems with vibration and
	heat.  {Constant angular velocity} (CAV) drives give speeds up
	to 20x but due to the nature of CAV the actual throughput
	increase over 12x is less than 20/12.

	20x was thought to be the maximum speed due to mechanical
	constraints but on 1998-02-24, {Samsung Electronics}
	introduced the SCR-3230, a 32x CD-ROM drive which uses a ball
	bearing system to balance the spinning CD-ROM in the drive to
	reduce noise.

	CD-ROM drives may connect to an {IDE} interface, a {SCSI}
	interface or a propritary interface, of which there are three
	- Sony, Panasonic, and Mitsumi.  Most CD-ROM drives can also
	play audio CDs.

	There are several formats used for CD-ROM data, including
	{Green Book CD-ROM}, {White Book CD-ROM} and {Yellow Book
	CD-ROM}.  {ISO 9660} defines a standard {file system}, later
	extended by {Joliet}.

	See also {Compact Disc Recordable}, {Digital Versatile Disc}.

	{Byte, February 1997
	(http://byte.com/art/9702/sec17/art5.htm)}.

	(2006-09-25)

Compact Disc Read-Write

	{Compact Disc Rewritable}

Compact Disc Recordable

	<storage> (CD-R) A write-once version of {CD-ROM}.  CD-Rs can
	hold about 650 {megabytes} of data.  They are very durable and
	can be read by normal CD-ROM drives, but once data has been
	written it cannot be altered.

	Standard prerecorded CDs have their information permanently
	stamped into an aluminium reflecting layer.  CD-R discs have a
	dye-based recording layer and an additional golden reflecting
	layer.

	Digital information is written to the disc by burning
	(forming) pits in the recording layer in a pattern
	corresponding to that of a conventional CD.

	The laser beam heats the substrate and recording layer to
	approximately 250 C.  The recording layer melts and the
	substrate expands into the space that becomes available.

	{Phillips: New Technologies
	(http://www-us.sv.philips.com/newtech/cdrewritable.html)}.

	See also {CD-RW} and {DVD-RAM}.

	(1999-08-01)

Compact Disc Rewritable

	<storage> (CD-RW) A rewritable version of {CD-ROM}.  A CD-RW
	drive can write about 650 {megabytes} of data to CD-RW media
	an unlimited number of times.  Most CD-RW drives can also
	write once to {CD-R} media.

	CD-RW media cannot be read by CD-ROM drives built prior to
	1997 due to the reduced reflectivity (15% compared to 70%) of
	CD-RW media.

	CD-RW drives and media are currently (1999) more expensive
	than {CD-R} drives and media.  CD-R is sometimes considered a
	better technology for archival purposes as the data cannot be
	accidentally modified or tampered with, and encourages better
	archival practices.

	Standard prerecorded CDs have their information permanently
	stamped into an aluminium reflecting layer.  CD-WR discs have
	a phase-change recording layer and an additional silver
	(aluminium) reflecting layer.

	A laser beam can melt crystals in the recording layer into a
	non-crystalline amorphous phase or anneal them slowly at a
	lower temperature back to the crystalline state.  The different
	reflectance of the areas make them appear as the 'pits' and
	'lands' of a standard CD.

	{Phillips: New Technologies
	(http://www-us.sv.philips.com/newtech/cdrewritable.html)}.

	See also {CD-R} and {DVD-RAM}.

	(1999-08-01)

Compact Disc writer

	<storage> (CD burner) A device that can write data to {Compact
	Disc Recordable} (CD-R) or {Compact Disc Rewritable} (CD-RW)
	discs.  Now both these CD formats are often combined with a
	{DVD writer}.

	(2008-09-16)

compaction

	{compression}

compactness preserving

	<theory> In {domain theory}, a {function} f is compactness
	preserving if f c is {compact} whenever c is.

	(1995-01-13)

Compaq Computer Corporation

	<company> A US manufacturer and vendor of {IBM PC compatible}
	{personal computers} and servers.  Compaq was started in 1982
	by three ex-{Texas Instruments} employees and by 1995 had
	become the largest PC manufacturer.

	Quarterly sales $2499M, profits $210M (Aug 1994).

	Compaq was acquired by {Hewlett-Packard} in 2004.

	{(http://compaq.com/)}.

	(1995-10-24)

Compas Pascal

	The predecessor of {Turbo Pascal}, sol by {POLY Data} of
	Denmark.  It was later renamed POLY Pascal, and afterward
	sold to {Borland}.

	(1995-01-19)

COMPASS

	COMPrehensive ASSembler.

	The {assembly language} on {CDC} computers.

	(1995-01-19)

compatibility

	{compatible}

compatible

	<jargon> Different systems (e.g., {programs}, {file formats},
	{protocols}, even {programming languages}) that can work
	together or exchange data are said to be compatible.

	See also {backward compatible}, {forward compatible}.

	(1998-01-15)

Compatible Timesharing System

	<operating system> (CTSS) One of the earliest (1963)
	experiments in the design of interactive {time-sharing}
	{operating systems}.  CTSS was ancestral to {Multics}, {Unix},
	and {ITS}.  It was developed at the {MIT} Computation Center
	by a team led by Fernando J. Corbato.  CTSS ran on a modified
	{IBM 7094} with a second 32K-word bank of memory, using two
	{2301 drums} for swapping.  {Remote access} was provided to up
	to 30 users via an {IBM 7750} {communications controller}
	connected to {dial-up} {modems}.

	The name {ITS} (Incompatible {time-sharing} System) was a hack
	on CTSS, meant both as a joke and to express some basic
	differences in philosophy about the way I/O services should be
	presented to user programs.

	(1997-01-29)

Compel

	{COMpute ParallEL}

Competitive Access Provider

	<networking> (CAP, or "Bypass Carrier") A company which
	provides network links between the customer and the
	{IntereXchange Carrier} or even directly to the {Internet
	Service Provider}.  CAPs operate private networks independent
	of {Local Exchange Carriers}.

	["Getting Connected The Internet at 56k and Up", Kevin Dowd,
	First Edition, p. 49, O'Reilly & Associates, Inc., June 1996,
	ISBN 1-56592-154-2 (US), ISBN 1-56592-203-4 (international)].

	(1997-07-23)

Compiled HTML

	<filename extension> A {Microsoft} file format for
	distributing a collection of {HTML} files, along with their
	associated images, sounds, etc., as a single compressed
	archive file.

	Microsoft use this format for {Windows} {HTML Help} files.
	Most chms include a project (.hhp) file listing the included
	files and basic settings, a contents (.hhc) file, an index
	(.hhk) file, html files, and, optionally, image files.

	Users view chms with hh.exe, the HTML Help viewer installed
	with {Internet Explorer}.

	Filename extension: .chm.

	{(http://msdn.microsoft.com/library/en-us/htmlhelp/html/vsconHH1Start.asp)}.

	(2003-05-17)

compiler

	<programming, tool> A program that converts another program
	from some {source language} (or {programming language}) to
	{machine language} (object code).  Some compilers output
	{assembly language} which is then converted to {machine
	language} by a separate {assembler}.

	A compiler is distinguished from an assembler by the fact that
	each input statement does not, in general, correspond to a
	single machine instruction or fixed sequence of instructions.
	A compiler may support such features as automatic allocation
	of variables, arbitrary arithmetic expressions, control
	structures such as FOR and WHILE loops, variable {scope},
	input/ouput operations, {higher-order functions} and
	{portability} of source code.

	{AUTOCODER}, written in 1952, was possibly the first primitive
	compiler.  {Laning and Zierler}'s compiler, written in
	1953-1954, was possibly the first true working algebraic
	compiler.

	See also {byte-code compiler}, {native compiler}, {optimising
	compiler}.

	(1994-11-07)

COmpiler and GENeralized Translator

	<language> (COGENT) A {compiler} writing language with
	pattern-directed string and list processing features, for {CDC
	3600} and {CDC} 3800.  A COGENT program consists of
	{productions} defining a {context-free} language, plus
	analysis and synthesis function generators.

	["COGENT Programming Manual", J.C. Reynolds, ANL-7022, Argonne,
	Mar 1965].

	[Sammet 1969, p.638].

	["An Introduction to the COGENT System", J.C. Reynolds, Proc
	ACM 20th Natl Conf, 1965].

	(1994-12-23)

compiler compiler

	{compiler-compiler}

Compiler-Compiler

	An early {compiler generator} for the {Atlas}, with its own
	distinctive input language.

	["The Compiler-Compiler", R.A. Brooker et al, Ann Rev
	Automatic Programming 3:229-275, Pergamon 1963].

	(1994-10-24)

compiler-compiler

	A utility to generate the {source code} of a {parser},
	{interpreter} or {compiler} from an annotated language
	description (usually in {BNF}).  Most so called
	compiler-compilers are really just {parser generators}.

	Examples are {Bison}, {Eli}, {FSL}, {META 5}, {MUG2},
	{Parsley}, {Pre-cc}, {Yacc}.

	(1995-01-23)

compiler jock

	A programmer who specialises in writing {compilers}.

	[{Jargon File}]

	(1995-01-19)

Compiler Language for Information Processing

	(CLIP) A language written in 1958-1959, based on {IAL}, which
	led to {JOVIAL}.  CLIP was one of the first languages used to
	write its own {compiler}.

	[Sammet 1969, p. 635].

	(1994-12-12)

Compiler Target Language

	(CTL) The intermediate language used by the {ALICE} parallel
	machine.

	["The Design and Implementation of ALICE: A Parallel Graph
	Reduction Machine", M.D. Cripps et al, Proc Workshop on Graph
	Reduction, Springer 1987].

	(1994-11-14)

compile time

	<programming> The period of time during which a program's
	{source code} is being translated into {machine code}, as
	opposed to {run time} when the program is being executed.  As
	well as the work done by the {compiler}, this may include
	macro preprocessing as done by {cpp} for example.  The final
	stage of program construction, performed by the {linker},
	would generally also be classed as compile time but might be
	distinguished as {link time}.

	For example, {static data} in a {C} program is allocated at
	compile time whereas non-static data is allocated at {run
	time}, typically on the {stack}.

	(2004-09-28)

COMPL

	<language, operating system>

	["The COMPL Language and Operating System", A.G. Fraser et al,
	Computer J 9(2):144-156, 1966].

	(1995-01-24)

complement

	<logic> The other value or values in the set of possible
	values.

	See {logical complement}, {bitwise complement}, {set
	complement}.

	(1995-01-24)

Complementary Metal Oxide Semiconductor

	<integrated circuit> (CMOS) A {semiconductor} fabrication
	technology using a combination of n- and p-doped semiconductor
	material to achieve low {power dissipation}.  Any path through
	a {gate} through which {current} can flow includes both n and
	p type {transistors}.  Only one type is turned on in any
	{stable state} so there is no {static power dissipation} and
	current only flows when a gate switches in order to charge the
	{parasitic capacitance}.

	(1999-06-04)

complementary nondeterministic polynomial

	<complexity> (Co-NP) The set (or property) of problems with a
	yes/no answer where the complementary no/yes problem takes
	{nondeterministic polynomial time} ({NP}).

	For example, "Is n prime" is Co-NP and "Is n not prime" is NP,
	since it is only necessary to find one {factor} to prove that
	n is not {prime} whereas to prove that it is prime all possible
	factors must be eliminated.

	(2009-05-21)

complete

	See also {complete graph}, {complete inference system},
	{complete lattice}, {complete metric space}, {complete partial
	ordering}, {complete theory}.

	[1. or 2. or both?]

	(1996-04-24)

complete graph

	A {graph} which has a link between every pair of nodes.  A
	complete {bipartite graph} can be partitioned into two subsets
	of nodes such that each node is joined to every node in the
	other subset.

	(1995-01-24)

complete inference system

	<logic> An {inference} system A is complete with respect to
	another system B if A can reach every conclusion which is true
	in B.  The dual to completeness is {soundness}.

	(1998-07-05)

complete lattice

	A {lattice} is a {partial ordering} of a set under a relation
	where all finite subsets have a {least upper bound} and a
	{greatest lower bound}.  A complete lattice also has these for
	infinite subsets.  Every finite lattice is complete.  Some
	authors drop the requirement for {greatest lower bounds}.

	(1994-12-02)

complete metric space

	<theory> A {metric space} in which every sequence that
	converges in itself has a limit.  For example, the space of
	{real numbers} is complete by {Dedekind's axiom}, whereas the
	space of {rational numbers} is not - e.g. the sequence a[0]=1;
	a[n_+1]:=a[n]/2+1/a[n].

	(1998-07-05)

completeness

	{complete}

complete partial ordering

	<theory> (cpo) A {partial ordering} of a {set} under a
	{relation}, where all {directed} {subsets} have a {least upper
	bound}.  A cpo is usually defined to include a least element,
	{bottom} (David Schmidt calls this a {pointed cpo}).  A cpo
	which is {algebraic} and {boundedly complete} is a (Scott)
	{domain}.

	(1994-11-30)

complete theory

	<logic> An abstract logical {theory} in which all true
	statements have formal {proofs} within the theory.

	(1998-07-05)

complete unification

	<programming> W.P. Weijland's name for {unification} without
	{occur check}.

	(1996-01-11)

Complex Instruction Set Computer

	(CISC) A processor where each instruction can perform several
	low-level operations such as memory access, arithmetic
	operations or address calculations.  The term was coined in
	contrast to {Reduced Instruction Set Computer}.

	Before the first RISC processors were designed, many computer
	architects were trying to bridge the "{semantic gap}" - to
	design {instruction sets} to support {high-level languages} by
	providing "high-level" instructions such as procedure call and
	return, loop instructions such as "decrement and branch if
	non-zero" and complex {addressing modes} to allow data
	structure and {array} accesses to be compiled into single
	instructions.

	While these architectures achieved their aim of allowing
	high-level language constructs to be expressed in fewer
	instructions, it was observed that they did not always result
	in improved performance.  For example, on one processor it was
	discovered that it was possible to improve the performance by
	NOT using the procedure call instruction but using a sequence
	of simpler instructions instead.  Furthermore, the more
	complex the instruction set, the greater the overhead of
	decoding an instruction, both in execution time and silicon
	area.  This is particularly true for processors which used
	{microcode} to decode the (macro) instruction.  It is easier
	to debug a complex instruction set implemented in microcode
	than one whose decoding is "{hard-wired}" in silicon.

	Examples of CISC processors are the {Motorola} {680x0} family
	and the {Intel 80186} through {Intel 486} and {Pentium}.

	(1994-10-10)

complexity

	<algorithm> The level in difficulty in solving mathematically
	posed problems as measured by the time, number of steps or
	arithmetic operations, or memory space required (called time
	complexity, computational complexity, and space complexity,
	respectively).

	The interesting aspect is usually how complexity scales with
	the size of the input (the "{scalability}"), where the size of
	the input is described by some number N.  Thus an {algorithm}
	may have computational complexity O(N^2) (of the order of the
	square of the size of the input), in which case if the input
	doubles in size, the computation will take four times as many
	steps.  The ideal is a constant time algorithm (O(1)) or
	failing that, O(N).

	See also {NP-complete}.

	(1994-10-20)

complexity analysis

	In sructured program design, a quality-control operation that
	counts the number of "compares" in the logic implementing a
	function; a value of less than 10 is considered acceptable.

complexity class

	<algorithm> A collection of {algorithms} or {computable
	functions} with the same {complexity}.

	(1996-04-24)

complexity measure

	<algorithm> A quantity describing the {complexity} of a
	computation.

	(1996-04-24)

complex number

	<mathematics> A number of the form x+iy where i is the square
	root of -1, and x and y are {real numbers}, known as the
	"real" and "imaginary" part.  Complex numbers can be plotted
	as points on a two-dimensional plane, known as an {Argand
	diagram}, where x and y are the {Cartesian coordinates}.

	An alternative, {polar} notation, expresses a complex number
	as (r e^it) where e is the base of {natural logarithms}, and r
	and t are real numbers, known as the magnitude and phase.  The
	two forms are related:

		r e^it = r cos(t) + i r sin(t)
		       = x + i y
	where
		x = r cos(t)
		y = r sin(t)

	All solutions of any {polynomial equation} can be expressed as
	complex numbers.  This is the so-called {Fundamental Theorem
	of Algebra}, first proved by Cauchy.

	Complex numbers are useful in many fields of physics, such as
	electromagnetism because they are a useful way of representing
	a magnitude and phase as a single quantity.

	(1995-04-10)

complex programmable logic device

	<hardware> (CPLD) A programmable circuit similar to an {FPGA},
	but generally on a smaller scale, invented by {Xilinx, Inc}.

	(1998-09-26)

component

	<programming> An {object} adhering to a {component
	architecture}.

	(1997-11-20)

component architecture

	<programming> A notion in {object-oriented} programming where
	"components" of a program are completely generic.  Instead of
	having a specialised set of {methods} and {fields} they have
	generic methods through which the component can advertise the
	functionality it supports to the system into which it is
	loaded.  This enables completely {dynamic loading} of
	{objects}.  {JavaBeans} is an example of a component
	architecture.

	See also {design pattern}.

	(1997-11-20)

component based development

	<programming> (CBD) The creation, integration, and {re-use} of
	{components} of program code, each of which has a common
	interface for use by multiple systems.

	(1999-08-23)

Component Integration Laboratories

	<project> (CIL) An effort to create a common framework for
	interoperability between {application programs} on {desktop}
	{platforms}, formed by {Apple Computer, Inc.}, {IBM},
	{Novell}, {Oracle}, {Taligent}, {WordPerfect} and {Xerox}.

	[When?  What happened?]

	(1994-10-24)

Component Object Model

	<programming> (COM) An open software architecture from {DEC}
	and {Microsoft}, allowing interoperation between
	{ObjectBroker} and {OLE}.  Microsoft evolved COM into {DCOM}.

	On page XV of Box's book in the foreword by Charlie Kindel he
	says, "It is Mark Ryland's fault that some people call COM the
	'Common Object Model.'  He deeply regrets it and apologizes
	profusely."

	["Essential COM", Don Box].

	[Details?  URL?]

	(1999-06-12)

com port

	{communications port}

composite

	{aggregate}

composition

	1. {function composition}.

	2. {typesetting}.

Compositional C++

	<language, parallel> (CC++) Extensions to {C++} for
	{compositional parallel programming}.

	{FTP Caltech (ftp://csvax.cs.caltech.edu/pub/comp)}.

	[Did Carl Kesselman at Cal Tech develop it?]

	(2000-08-16)

Compound Document Architecture

	<file format> (CDA) {DEC}'s set of {standards} for compound
	document creation, storage, retrieval, interchange and
	manipulation.

	(1996-11-03)

compound key

	<database> (Or "multi-part key", "concatenated key") A {key}
	which consists of more than one {attribute} of the body of
	information (e.g. database "{record}") it identifies.

	(1997-04-26)

COMPREHENSIVE

	An early system on {MIT}'s {Whirlwind}.

	[Listed in CACM 2(5):16, May 1959].

	(2002-06-03)

Comprehensive Perl Archive Network

	<tool> (CPAN) A collection of {Internet} {archives} containing
	material related to the {Perl} programming language.

	{(http://perl.com/CPAN)}.

	(1999-12-04)

Comprehensive TeX Archive Network

	<text> (CTAN) An {archive site} for the {TeX} text formatting
	package.

	{(http://tex.ac.uk)}.  {Gopher
	(gopher://gopher.tex.ac.uk/)}.  {(ftp://ftp.tex.ac.uk/)}.
	NFS: nfs.tex.ac.uk.

	(1995-01-18)

compress

	1. To feed data through any {compression} {algorithm}.

	2. <tool> The {Unix} program "compress", now largely
	supplanted by {gzip}.

	Unix compress was written in {C} by Joseph M. Orost, James
	A. Woods et al., and was widely circulated via {Usenet}.  It
	uses the {Lempel-Ziv Welch} {algorithm} and normally produces
	files with the suffix ".Z".

	Compress uses variable length codes.  Initially, nine-bit
	codes are output until they are all used.  When this occurs,
	ten-bit codes are used and so on, until an
	implementation-dependent maximum is reached.

	After every 10 {kilobytes} of input the compression ratio is
	checked.  If it is decreasing then the entire string table is
	discarded and information is collected from scratch.

Compressed SLIP

	<networking> (CSLIP) {VanJacobsen TCP header compression}.  A
	version of {SLIP} using {compression}.  CSLIP has no effect on
	the data portion of the {packet} and has nothing to do with
	compression by {modem}.  It does reduce the {TCP} header from
	40 bytes to 7 bytes, a noticeable difference when doing
	{telnet} with lots of little packets.  CSLIP has no effect on
	UDP, only TCP.

	(1995-05-28)

compressed video

	{video compression}

compression

	1. <application> (Or "compaction") The coding of data to save
	storage space or transmission time.  Although data is already
	coded in digital form for computer processing, it can often be
	coded more efficiently (using fewer bits).  For example,
	{run-length encoding} replaces strings of repeated characters
	(or other units of data) with a single character and a count.
	There are many compression {algorithms} and utilities.
	Compressed data must be decompressed before it can be used.

	The standard {Unix} compression utilty is called {compress}
	though {GNU}'s superior {gzip} has largely replaced it.  Other
	compression utilties include {pack}, {zip} and {PKZIP}.

	When compressing several similar files, it is usually better
	to join the files together into an {archive} of some kind
	(using {tar} for example) and then compress them, rather than
	to join together individually compressed files.  This is
	because some common compression {algorithms} build up tables
	based on the data from their current input which they have
	already compressed.  They then use this table to compress
	subsequent data more efficiently.

	See also {TIFF}, {JPEG}, {MPEG}, {Lempel-Ziv Welch},
	"{lossy}", "{lossless}".

	{Compression FAQ
	(ftp://rtfm.mit.edu/pub/usenet/news.answers/compression-faq/)}.

	{Web Content Compression FAQ
	(http://perl.apache.org/docs/tutorials/client/compression/compression.html)}.

	{Usenet} newsgroups: {news:comp.compression},
	{news:comp.compression.research}.

	2. <multimedia> Reducing the dynamic range of an audio signal,
	making quiet sounds louder and loud sounds quieter.  Thus,
	when discussing digital audio, the preferred term for reducing
	the total amount of data is "compaction".  Some advocate this
	term in all contexts.

	(2004-04-26)

COMPROSL

	COMpound PROcedural Scientific Language.

	A language for scientists and engineers.

	[Sammet 1969, pp. 299-300].

Compu$erve

	(Or "CompuSpend", "Compu$pend") A pejorative name for
	{CompuServe Information Service} ({CI$}) drawing attention to
	perceived high charges.

	[{Jargon File}]

	(1994-11-08)

Compulink Information eXchange

	(CIX) A London-based conferencing system, also providing
	{electronic mail}, {FTP}, {telnet}, {IRC}, {Gopher} and
	{web}.  Includes conferences "archimedes" or "bbc"
	for users of {Acorn} computers.

	E-mail: <cixadmin@cix.compulink.co.uk>.

	Telephone: +44 (181) 390 8446.

	(1994-11-08)

CompuServe

	{CompuServe Information Service}

CompuServe Corporation

	<company> The parent organisation of {CompuServe Information
	Service}, CompuServe Network Services and CompuServe Remote
	Computing Services.  CompuServe was owned by H.R. Block but is
	now (1999) owned by {America On-Line}.

	{(http://compuserve.com/)}.

	(1995-09-12)

CompuServe Information Service

	<company> (CIS, CompuServe Interactive Services).  An ISP and
	on-line service {portal} based in Columbus, Ohio, USA; part of
	{AOL} since February 1998.

	CIS was founded in 1969 as a computer {time-sharing service}.
	Along with {AOL} and {Prodigy}, CIS was one of the first
	pre-Internet, on-line services for consumers, providing
	{bulletin boards}, on-line conferencing, business news, sports
	and weather, financial transactions, {electronic mail},
	{Usenet} news, travel and entertainment data and on-line
	editions of computer publications.  CIS was originally run by
	{CompuServe Corporation}.

	In 1979, CompuServe was the first service to offer {electronic
	mail} and technical support to personal computer users.  In
	1980 they were the first to offer {real-time} {chat} with its
	CB Simulator.  By 1982, the company had formed its Network
	Services Division to provide wide-area networking to corporate
	clients.

	Initially mostly serving the USA, in 1986 they developed a
	Japanese version called NIFTYSERVE.  In 1989, they expanded
	into Europe and became a leading {Internet service provider}.

	In 2001 they released version 7.0 of their client program.

	{CompuServe home (http://compuserve.com/)}.

	(2009-04-02)

CompuServe Interactive Services

	{CompuServe Information Service}

Compusult Ltd.

	A computer consulting firm (in Newfoundland, Canada?) that
	provides a public access {Unix}.

	(1994-10-20)

computability theory

	<mathematics> The area of theoretical computer science
	concerning what problems can be solved by any computer.

	A function is computable if an {algorithm} can be implemented
	which will give the correct output for any valid input.

	Since computer programs are {countable} but {real numbers} are
	not, it follows that there must exist real numbers that
	cannot be calculated by any program.  Unfortunately, by
	definition, there isn't an easy way of describing any of them!

	In fact, there are many tasks (not just calculating real
	numbers) that computers cannot perform.  The most well-known
	is the {halting problem}, the {busy beaver} problem is less
	famous but just as fascinating.

	["Computability", N.J. Cutland. (A well written
	undergraduate-level introduction to the subject)].

	["The Turing Omnibus", A.K. Dewdeney].

	(1995-01-13)

computable

	{computability theory}

Computational Adequacy Theorem

	This states that for any program (a non-function typed term in
	the {typed lambda-calculus} with constants) {normal order
	reduction} (outermost first) fails to terminate if and only if
	the {standard semantics} of the term is {bottom}.  Moreover,
	if the reduction of program e1 terminates with some {head
	normal form} e2 then the standard semantics of e1 and e2 will
	be equal.  This theorem is significant because it relates the
	operational notion of a reduction sequence and the
	{denotational semantics} of the input and output of a
	reduction sequence.

computational complexity

	<algorithm> The number of steps or arithmetic operations
	required to solve a computational problem.  One of the three
	kinds of {complexity}.

	(1996-04-24)

Computational Fluid Dynamics

	<language> (CFD) A {Fortran}-based parallel language for the
	{Illiac IV}.

	(1994-11-29)

computational geometry

	<mathematics> The study of {algorithms} for combinatorial,
	topological, and metric problems concerning sets of points,
	typically in {Euclidean space}.  Representative areas of
	research include geometric search, convexity, proximity,
	intersection, and {linear programming}.

	(1997-08-03)

computational learning

	{grammatical inference}

computational molecular biology

	<application> The area of {bioinformatics} concerning the use
	of computers to characterise the molecular components of
	living things.

	(2005-01-07)

COMpute ParallEL

	<language> (Compel) The first {single-assignment} language.

	["A Language Design for Concurrent Processes", L.G. Tesler et
	al, Proc SJCC 32:403-408, AFIPS (Spring 1968)].

	(1995-01-19)

Computer

	<publication> A journal of the {IEEE Computer Society}.

	(1995-03-10)

computer

	<computer> A machine that can be programmed to manipulate
	symbols.  Computers can perform complex and repetitive
	procedures quickly, precisely and reliably and can quickly
	store and retrieve large amounts of data.

	The physical components from which a computer is constructed
	(electronic circuits and input/output devices) are known as
	"{hardware}".  Most computers have four types of hardware
	component: CPU, input, output and memory.  The CPU ({central
	processing unit}) executes programs ("{software}") which tell
	the computer what to do.  Input and output (I/O) devices allow
	the computer to communicate with the user and the outside
	world.  There are several kinds of memory - fast, expensive,
	short term memory (e.g. {RAM}) to hold intermediate results,
	and slower, cheaper, long-term memory (e.g. {magnetic disk} and
	{magnetic tape}) to hold programs and data between jobs.

	See also {analogue computer}.

	(1995-03-10)

Computer Aided Design

	<application> (CAD) The part of {CAE} concerning the drawing
	or physical layout steps of engineering design.  Often found
	in the phrase "CAD/CAM" for ".. manufacturing".

	(1994-11-30)

Computer Aided Detector Design

	<project, standard> (CADD) A project to standardise {HEP}
	detector designer.

	(2011-02-18)

Computer Aided Engineering

	<application> (CAE) The use of {software} to help with all
	phases of engineering design work.  Like {computer aided
	design}, but also involving the conceptual and analytical
	design steps and extending into {Computer-Integrated
	Manufacturing} (CIM).

	(1994-10-28)

Computer-Aided Instruction

	<application, education> (CAI, or "- assisted", "- learning",
	CAL, Computer-Based Training CBT, "e-learning") The use of
	computers for education and training.

	The programs and data used in CAI, known as "courseware", may
	be supplied on media such as {CD-ROM} or delivered via a
	{network} which also enables centralised logging of student
	progress.  CAI may constitute the whole or part of a course,
	may be done individually or in groups ("Computer Supported
	Collaborative Learning", CSCL), with or without human
	guidance.

	(2011-11-25)

Computer-Aided Learning

	{Computer-Aided Instruction}

Computer Aided Software Engineering

	<programming> (CASE, or "- assisted -") A technique for using
	computers to help with one or more phases of the {software
	life-cycle}, including the systematic analysis, design,
	implementation and maintenance of software.  Adopting the CASE
	approach to building and maintaining systems involves software
	tools and training for the developers who will use them.

	(1996-05-10)

Computer-Aided Software Testing

	<programming> (CAST) Automated software testing in one or more
	phases of the {software life-cycle}.

	(1996-05-10)

Computer Aided Test Engineering

	<testing, electronics> (CATE) {CASE} methods applied to
	electronics testing and linked to {CAE}.

	(2007-05-03)

Computer Animation Movie Language

	<language> A programming language for generating {animation}.

	["A Computer Animation Movie Language for Educational Motion
	Pictures", D.D. Weiner et al, Proc FJCC 33(2), AFIPS, Fall
	1968].

	(2012-01-30)

Computer-Assisted Learning

	{Computer-Aided Instruction}

Computer-Assisted Software Engineering

	{Computer-Aided Software Engineering}

Computer Associates International, Inc.

	<company> (CA) A US software development company, founded in
	1976.  CA have purchased many other software companies,
	including {Spectrum Software, Inc.}, {Cheyenne Software},
	{Platinum Technology, Inc.}, {ASK Corporation}.  They produce
	a number of popular software packages, including {Unicenter
	TNG} and {Ingres}.

	They had an {Initial Public Offering} in 1981 valued at more
	than US$3.2M, had more than US$6B in revenue in 2000, and
	employ more than 17,000 people.

	{(http://ca.com/)}.

	(20002-04-20)

Computer-Based Training

	{Computer-Aided Instruction}

computer bus

	{bus}

Computer Compiler

	1. <language> A proposed language for {compiler} design.

	[Sammet 1969, p. 695].

	2. A discussion of various applications of computers to the
	design and production of computers.

	{ACM
	(http://dl.acm.org/citation.cfm?id=1464213&CFID=83216609&CFTOKEN=42516197)}.

	["A proposal for a computer compiler", Gernot Metze
	(University of Illinois), Sundaram Seshu (University of
	Illinois), AFIPS '66 (Spring) Proceedings of the 1966-04-26 -
	28, Spring joint computer conference].

	(2007-02-13)

computer confetti

	<jargon> (Or "{chad}") A common term for {punched-card}
	{chad}, which, however, does not make good confetti, as the
	pieces are stiff and have sharp corners that could injure the
	eyes.

	{GLS} reports that he once attended a wedding at {MIT} during
	which he and a few other guests enthusiastically threw chad
	instead of rice.  The groom later grumbled that he and his
	bride had spent most of the evening trying to get the stuff
	out of their hair.

	[{Jargon File}]

	(2001-06-22)

Computer Conservation Society

	<body> (CCS) A British group that aims to promote the
	conservation and study of historic computers, past and future.
	The CCS is a co-operative venture between the {British
	Computer Society}, the Science Museum of London and the Museum
	of Science and Industry in Manchester.  The CCS was
	constituted in September 1989 as a Specialist Group of the
	BCS.

	A number of active projects and working groups focus on
	specific computer restorations, early computer technologies
	and software.  Membership is open to anyone interested.

	{Home (http://computerconservationsociety.org)}.

	See also {Bletchley Park}.

	(2012-03-22)

computer cookie

	{HTTP cookie}

computer crime

	<legal> Breaking the criminal law by use of a computer.

	See also {computer ethics}, {software law}.

	(1997-07-09)

Computer Design Language

	<language> An {ALGOL}-like language for computer design.

	["An ALGOL-like Computer Design Language", Y. Chu, CACM 8(10)
	(Oct 1965)].

	(1994-11-17)

computer dictionary

	{Free On-line Dictionary of Computing}

Computer Emergency Response Team

	<security, body> (CERT) An organisation formed by {DARPA} in
	November 1988 in response to the {Internet worm} incident.
	The CERT charter is to work with the {Internet} community to
	help it responf to computer security events involving Internet
	{hosts}, to raise awareness of computer security issues and to
	conduct research targeted at improving the security of
	existing systems.  CERT products and services include 24-hour
	technical assistance for responding to computer security
	incidents, product {vulnerability} assistance, technical
	documents and tutorials.

	{CERT Home (http://cert.org/)}.

	E-mail: <cert@cert.org> (incident reports).

	Telephone +1 (412) 268 7090 (24-hour hotline).

	(2012-05-18)

computer ethics

	<philosophy> Ethics is the field of study that is concerned
	with questions of value, that is, judgments about what human
	behaviour is "good" or "bad".  Ethical judgments are no
	different in the area of computing from those in any other
	area.  Computers raise problems of privacy, ownership, theft,
	and power, to name but a few.

	Computer ethics can be grounded in one of four basic
	world-views: Idealism, Realism, Pragmatism, or Existentialism.
	Idealists believe that reality is basically ideas and that
	ethics therefore involves conforming to ideals.  Realists
	believe that reality is basically nature and that ethics
	therefore involves acting according to what is natural.
	Pragmatists believe that reality is not fixed but is in
	process and that ethics therefore is practical (that is,
	concerned with what will produce socially-desired results).
	Existentialists believe reality is self-defined and that
	ethics therefore is individual (that is, concerned only with
	one's own conscience).  Idealism and Realism can be considered
	ABSOLUTIST worldviews because they are based on something
	fixed (that is, ideas or nature, respectively).  Pragmatism
	and Existentialism can be considered RELATIVIST worldviews
	because they are based or something relational (that is,
	society or the individual, respectively).

	Thus ethical judgments will vary, depending on the judge's
	world-view.  Some examples:

	First consider theft.  Suppose a university's computer is used
	for sending an e-mail message to a friend or for conducting a
	full-blown private business (billing, payroll, inventory,
	etc.).  The absolutist would say that both activities are
	unethical (while recognising a difference in the amount of
	wrong being done).  A relativist might say that the latter
	activities were wrong because they tied up too much memory and
	slowed down the machine, but the e-mail message wasn't wrong
	because it had no significant effect on operations.

	Next consider privacy.  An instructor uses her account to
	acquire the cumulative grade point average of a student who is
	in a class which she instructs.  She obtained the password for
	this restricted information from someone in the Records Office
	who erroneously thought that she was the student's advisor.
	The absolutist would probably say that the instructor acted
	wrongly, since the only person who is entitled to this
	information is the student and his or her advisor.  The
	relativist would probably ask why the instructor wanted the
	information.  If she replied that she wanted it to be sure
	that her grading of the student was consistent with the
	student's overall academic performance record, the relativist
	might agree that such use was acceptable.

	Finally, consider power.  At a particular university, if a
	professor wants a computer account, all she or he need do is
	request one but a student must obtain faculty sponsorship in
	order to receive an account.  An absolutist (because of a
	proclivity for hierarchical thinking) might not have a problem
	with this divergence in procedure.  A relativist, on the other
	hand, might question what makes the two situations essentially
	different (e.g. are faculty assumed to have more need for
	computers than students?  Are students more likely to cause
	problems than faculty?  Is this a hold-over from the days of
	"in loco parentis"?).

	{"Philosophical Bases of Computer Ethics", Professor Robert
	N. Barger (http://nd.edu/~rbarger/metaethics.html)}.

	{Usenet} newsgroups: {news:bit.listserv.ethics-l},
	{news:alt.soc.ethics}.

	(1995-10-25)

computer file

	{file}

computer geek

	<jargon> (Or "turbo nerd", "turbo geek") One who eats
	(computer) {bugs} for a living.  One who fulfils all the
	dreariest negative stereotypes about {hackers}: an asocial,
	malodourous, pasty-faced monomaniac with all the personality
	of a cheese grater.  The term cannot be used by outsiders
	without implied insult to all {hackers}; compare
	black-on-black usage of "nigger".  A computer geek may be
	either a fundamentally clueless individual or a proto-hacker
	in {larval stage}.

	See also {Alpha Geek}, {propeller head}, {clustergeeking},
	{geek out}, {wannabee}, {terminal junkie}, {spod}, {weenie}.

	[{Jargon File}]

	(1997-06-26)

computer-generated imagery

	<graphics> (CGI) Animatied graphics produced by computer and
	used in film or television.

	(1998-10-13)

Computer Generation Incorporated

	<company> (CGI) A US software development company and systems
	integrator.

	{(http://compgen.com/)}.

	E-mail: Paul G. Smith <pauls@compgen.com>

	Telephone: +1 (404) 705 2800

	Address: Bldg. G, 4th Floor, 5775 Peachtree-Dunwoody Rd.,
	Atlanta, GA 30342, USA.

	(1997-02-11)

Computer Graphics Metafile

	<graphics, file format> (CGM) A standard file format for
	storage and communication of graphical information, widely
	used on {personal computers} and accepted by {desktop
	publishing} and technical illustration systems.

	{MIME type}: image/cgm.

	{ANSI}/{ISO} 8632-1987.  Worked on by the {ISO}/{IEC} group
	{JTC1/SC24}.

	{CGM Open Consortium (http://cgmopen.org/)}.

	See also: {WebCGM}.

	(1999-02-16)

Computer Integrated Manufacturing

	<application> (CIM) Use of computers to control multiple
	aspects of a production process in a factory.  A CIM system
	may control and/or monitor areas such as design, analysis,
	planning, purchasing, cost accounting, inventory control,
	distribution, materials handling and management.

	(2003-06-07)

computer language

	{programming language}

Computer Language for AeronauticS and Programming

	<language> (CLASP) A {real-time} language from NASA, focussing
	on {fixed-point} mathematics.  CLASP is a near subset of
	{SPL}, with some ideas from {PL/I}.

	["Flight Computer and Language Processor Study", Raymond
	J. Rubey, Management Information Services, Detroit, 1971].

	(1994-10-13)

computer law

	<legal> Legal aspects of the production, sale and use of
	computers; including areas such as {software law},
	{copyright}, patents, sale of goods, communication law and
	general media issues such as free speech.

	(2012-08-30)

computer literacy

	<education> Basic skill in use of computers, from the
	perspective of such skill being a necessary societal skill.

	The term was coined by Andrew Molnar, while director of the
	Office of Computing Activities at the {National Science
	Foundation}.

	"We started computer literacy in '72 [...] We coined that
	phrase.  It's sort of ironic.  Nobody knows what computer
	literacy is.  Nobody can define it.  And the reason we
	selected [it] was because nobody could define it, and [...] it
	was a broad enough term that you could get all of these
	programs together under one roof" (cited in Aspray, W.,
	(September 25, 1991) "Interview with Andrew Molnar," OH 234.
	Center for the History of Information Processing, Charles
	Babbage Institute, University of Minnesota).

	The term, as a coinage, is similar to earlier coinages, such
	as "visual literacy", which {Merriam-Webster
	(http://m-w.com/)} dates to 1971, and the more recent
	"media literacy".

	A more useful definition from
	{(http://www.computerliteracyusa.com/)} is:

	Computer literacy is an understanding of the concepts,
	terminology and operations that relate to general computer
	use.  It is the essential knowledge needed to function
	independently with a computer.  This functionality includes
	being able to solve and avoid problems, adapt to new
	situations, keep information organized and communicate
	effectively with other computer literate people.

	(2007-03-23)

Computer Management Group of Australia

	<body> (CMGA) An Australian group that organises conferences,
	exhibitions, meetings and seminars about IT management for its
	corporate and individual members.

	{CMGA Home (http://cmga.org.au/)}.

	(2012-10-25)

Computer Mediated Communication

	<messaging> (CMC) Communication that takes place through, or
	is facilitated by, computers.  Examples include {e-mail}, the
	{web}, real-time {chat} tools like {IRC}, {Windows
	Live Messenger} and {video conferencing}.

	(2012-10-25)

computer nerd

	{computer geek}

computer network

	{network}

Computer Output on Microfilm

	{Enterprise Report Management}

Computer Output to Laser Disc

	{Enterprise Report Management}

Computer Output to Laser Disk

	{Enterprise Report Management}

Computer Professionals for Social Responsibility

	<body> (CPSR) A non-profit organisation whose mission is to
	provide the public and policymakers with realistic assessments of
	the power, promise and problems of {Information Technology} and
	the effects of computers on society.

	CPSR was founded in the USA in 1981 but has spread to many other
	countries.  CPSR is supported by its membership.  CPSR sponsors
	conferences such as their Annual Meeting, Directions and
	Implications in Advanced Computing (DIAC), the Participatory
	Design Conference (PDC) and the Computers, Freedom and Privacy
	(CFP) conference.

	{CPSR Home (http://cpsr.org/)}.

	(2012-11-04)

computer program

	{software}

computer programming language

	<spelling> A somewhat redundant term for {programming language}.

	(2014-10-18)

Computer + Science NETwork

	<body> (CSNET) The networking organisation which combined with
	{BITNET} to form {CREN}.

	(1994-11-30)

computer security

	{security}

computer sex

	<jargon> Two computers interfaced with each other.

	(1996-02-22)

Computer Software Configuration Item

	<jargon, software> (CSCI) A {configuration item} consisting of
	{software}.

	(2012-11-07)

Computer-Supported Collaborative Learning

	<education> (CSCL) Any form of {Computer-Aided Instruction}
	that emphasises group learning as opposed to working alone.

	(2011-11-25)

Computer Supported Cooperative Work

	<tool> (CSCW) (Or "groupware") Software tools and technology
	to support groups of people working together on a project,
	often at different sites.

	See also {Lotus Notes}.

	(1994-11-30)

Computer Telephone Integration

	<communications> (CTI or "- Telephony -") Enabling computers to
	know about and control telephony functions such as making and
	receiving voice, {fax} and data calls, telephone directory
	services and {caller identification}.

	CTI is used in call centres to link incoming calls to computer
	software functions such as database look-up of the caller's
	number, supported by services such as {Automatic Number
	Identification} and {Dialled Number Identification Service}.

	Application software ({middleware}) can link {personal computers}
	and servers with telephones and/or a {PBX}.  Telephony and
	{software} vendors such as {AT&T}, {British Telecom}, {IBM},
	{Novell}, {Microsoft} and {Intel} have developed CTI services.

	The main {CTI} functions are integrating {messaging} with
	{databases}, {word processors} etc.; controlling voice, {fax},
	and {e-mail} messaging systems from a single {application
	program}; graphical call control - using a {graphical user
	interface} to perform functions such as making and receiving
	calls, forwarding and conferencing; call and {data}
	association - provision of information about the caller from
	databases or other applications automatically before the call
	is answered or transferred; {speech synthesis} and {speech
	recognition}; automatic logging of call related information
	for invoicing purposes or callback.

	CTI can improve customer service, increase productivity, reduce
	costs and enhance workflow automation.

	IBM were one of the first with workable CTI, now sold as
	"CallPath".  {Callware}'s {Phonetastic} is another {middleware}
	product.

	CTI came out of the 1980s call centre boom, where it linked
	central servers and {IVRs} with {PBX}es to provide call
	transfer and {screen popping}.  In the 1990s, efforts were
	made by several vendors, such as IBM, Novell {TSAPI} and
	Microsoft {TAPI}, to provide a version for {desktop computers}
	that would allow control of a desktop telephone and assist in
	{hot desking}.

	See also {Telephony Application Programming Interface}.

	(2012-11-18)

Computer Telephony

	{Computer Telephone Integration}

Computer Telephony Integration

	{Computer Telephone Integration}

computer virus

	{virus}

computer vision

	<application> A branch of {artificial intelligence} and {image
	processing} concerned with computer processing of images from the
	real world.  Computer vision typically requires a combination of
	low level {image processing} to enhance the image quality
	(e.g. remove noise, increase contrast), {pattern recognition} to
	recognise features such as lines, areas and colours and {image
	understanding} to translate these features into knowledge about
	the objects in the scene.

	{Usenet} newsgroup: {news:comp.ai.vision}.

	(2012-12-25)

compute server

	<computer, parallel> A kind of {parallel processor} where the
	parallel processors have no I/O except via a bus or other
	connection to a {front-end processor} which handles all I/O to
	disks, {terminals} and network.

	In some antiquated {IBM} {mainframes}, a second CPU was
	provided that could not access I/O devices, known as the slave
	or attached processor, while the CPU having access to all
	devices was known as the master processor.

	(1995-03-19)

computing

	{computer}

Computing Devices Canada Ltd.

	{General Dynamics Canada Ltd.}

computing dictionary

	{Free On-line Dictionary of Computing}

computron

	<jargon> /kom'pyoo-tron"/ 1. A notional unit of computing power
	combining execution speed and storage capacity.  E.g. "That
	machine can't run GNU Emacs, it doesn't have enough computrons!"

	2. A mythical subatomic particle that carries computation or
	information, in much the same way that an electron carries
	electric charge (see also {bogon}).

	[{Jargon File}]

	(2013-03-02)

Compuware Corporation

	<company> A US {software} and service company established in 1973.
	Since 1973, Compuware focused on optimising business software
	development, testing and operation.  In 1999 the company had grown
	to over 15,000 employees worldwide and revenues of more than
	$1.6B.  By 2013 it had shrunk to less than 5000.

	Current (2013) products and services include performance
	optimisation, availability and quality of web, non-web, mobile,
	streaming and cloud applications; project portfolio management,
	professional services automation; mainframe applications and
	developer tools; rapid application development and professional
	services.

	{(http://compuware.com/)}.

	(2013-03-08)

COMSL

	<language> ["COMSL - A Communication System Simulation Language",
	R.L. Granger, Proc FJCC 37 (1970)].

	(2013-03-08)

COMTRAN

	["Communications Computer Language COMTRAN", D.W. Clark et al,
	RADC-TR-69-190, Rose Air Development Center, Griffiss AFB, NY,
	July 1969].

	[Sammet 1969, p.324, 331].

ConC

	<language> A {concurrent} extension of {C} based on {decomposed
	Petri nets}.  It uses the 'handshake' and 'unit' constructs.

	["ConC: A Language for Distributed Real-Time Programming",
	V.K. Garg et al, Computer Langs 16(1):5-18 (1991)].

	(1995-03-02)

concatenate

	<programming> To join together two or more files or lists to form
	one big one.

	The {Unix} {cat} command can be used to concatenate files.

	(1995-12-22)

concatenated key

	{compound key}

concentrator

	<communications> A device that combines the data streams from
	many simultaneously active inputs into one shared channel in
	such a way that the streams can be separated after
	transmission.  The concentrator's output bandwidth must be at
	least as great as the total bandwidth of all simultaneously
	active inputs.  A concentrator is one kind of {multiplexing}
	device.

	For example, a concentrator may be used to connect 24 2400 bps
	TTYs to a host via a 57600 bps channel.

	(2000-03-01)

conceptualisation

	<artificial intelligence> The process or result of listing the
	types of objects, concepts and other entities that are assumed to
	exist in some area of interest and the relationships that hold
	among them.  A conceptualisation is an {abstract}, simplified view
	of the world that we wish to represent.  For example, we may
	conceptualise a family as the set of names, sexes and the
	relationships of the family members.  Choosing a
	conceptualisation is the first stage of {knowledge
	representation}.  A conceptualisation is a high-level {data model}.

	Every {knowledge base}, {knowledge-based system}, or
	{knowledge-level agent} is committed to some
	conceptualisation, explicitly or implicitly.

	(2013-04-17)

Concert/C

	<language, parallel> A {parallel} extension of {ANSI C} with
	{asynchronous} {message passing}, developed at the {IBM} {TJWRC}
	in July 1993.  Concert/C provides {primitives} to create and
	terminate {processes} and communicate between them.  The programmer
	explicitly expresses parallelization and distribution.

	{1994 Announcement
	(http://www.cs.bu.edu/~best/courses/cs551/projects/concert.txt)}.

	(2013-05-05)

ConCoord

	<programming, parallel> An environment for programming networks of
	{sequential} and {parallel} computers.  ConCoord supports
	{explicit parallelism} with different {granularity}.

	(2013-05-22)

concrete class

	<programming> In {object-oriented programming}, a {class}
	suitable to be instantiated, as opposed to an {abstract
	class}.

	(1995-05-01)

Concrete Data Structure

	<theory> (CDS) A model of programming language terms developed in
	the context of constructing fully {abstract semantics} for
	{sequential} languages.  A CDS is a 4-tuple (C,V,E,|-) where C is
	a cell, V is a value, E is an event and |- is an "enabling
	relation".  An event is a cell and a value.  A cell C is "enabled"
	by a set of events S if S |- C.  A state is a set of events which
	are consistent in that the values they give for any cell are all
	equal.  Every cell in a state is enabled.

	[G. Berry, P.-L. Curien, "Theory and practice of sequential
	algorithms: the kernel of applicative language CDS", Algebraic
	methods in semantics, CUP 1985].

	(1994-11-30)

concrete syntax

	<language, data> The {syntax} of a language including all the
	features visible in the {source code} such as {parentheses}
	and {delimiters}.  The concrete syntax is used when {parsing}
	the program or other input, during which it is usually
	converted into some kind of {abstract syntax tree} (conforming
	to an {abstract syntax}).

	In communications, concrete syntax is called {transfer
	syntax}.

	(1997-07-21)

CONCUR

	<language> A proposal for a language for programming with
	{concurrent} processes.  CONCUR was inspired by {Modula} but
	removes Modula's restrictions on the placement of process
	declarations and invocations in order to study the implications of
	process support more fully.  Anderson presents a {compiler} which
	translates CONCUR into the {object language} for a hypothetical
	machine.

	["CONCUR, A Language for Continuous Concurrent
	Processes", R.M. Salter et al, Comp Langs 5(3):163-189, 1981].

	{["Concur: a High-Level Language for Concurrent Programming",
	Karen Anderson Thesis, B. Thomas Golisano College of Computing and
	Information Sciences, 1979]
	(https://ritdml.rit.edu/handle/1850/15968?show=full)}

	(2013-06-05)

concurrency

	{multitasking}

Concurrent C

	1. <language> An extension of {C} with {rendezvous}-based
	{concurrency}.  Versions for most {Unix} systems were available
	commercially from {AT&T}.

	["Concurrent C", N.H. Gehani et al, Soft Prac & Exp
	16(9):821-844 (1986)].

	["The Concurrent C Programming Language", N. Gehani et al,
	Silicon Press 1989].

	(1994-11-11)

	2. <language> An extension of {C} with {asynchronous} {message
	passing}.

	["Concurrent C: A Language for Distributed Systems",
	Y. Tsujino et al, Soft Prac & Exp 14(11):1061-1078 (Nov
	1984)].

	(1994-11-11)

Concurrent C++

	<language> A {programming language} developed by Gehani and Roome
	at {Bell Labs} by merging their earlier {Concurrent C} language
	with {C++}.

	["Concurrent C++: Concurrent Programming with Class(es)",
	N. Gehani, W.D. Roome, Bell Labs, 1986].

	(2013-06-26)

Concurrent Clean

	<language> An alternative name for {Clean} 1.0.

	(1995-11-08)

Concurrent CLU

	<language> A {programming language} extending {CLU} for
	{concurrent} processes, developed by by Hamilton in 1984.

	["Preserving Abstraction in Concurrent
	Programming", R.C.B.  Cooper, K.G. Hamilton, IEEE
	Trans Soft Eng SE-14(2):258-263, Feb 1988].1

	(2013-09-28)

Concurrent Constraint Programming

	<language> (CCP) Not a language, but a general approach.

	[Details?]

	(2001-11-01)

Concurrent Euclid

	<language, parallel> A {concurrent} extension of a subset of
	{Euclid} ("{Simple Euclid}") developed by J.R. Cordy and
	R.C. Holt of the {University of Toronto} in 1980.

	Concurrent Euclid features {separate compilation}, {modules},
	processes and {monitors}, {signal} and {wait} on {condition
	variables}, 'converters' to defeat {strong type checking},
	absolute addresses.  All procedures and functions are
	{re-entrant}.  {TUNIS} (a {Unix}-like {operating system}) is
	written in Concurrent Euclid.

	["Specification of Concurrent Euclid", J.R. Cordy & R.C. Holt,
	Reports CSRI-115 & CSRI-133, CSRI, U Toronto, Jul 1980,
	rev. Aug 1981].

	["Concurrent Euclid, The Unix System, and Tunis," R.C. Holt,
	A-W, 1983].

	(2005-02-19)

Concurrent LISP

	<language> A {concurrent} version of {Lisp}.  Sugimoto et al
	implemented an {interpreter} on a "large scale computer" and were
	planning to implement it on multiple {microprocessors}.

	["A Multi-Processor System for Concurrent Lisp", S. Sugimoto et
	al, Proc 1983 Intl Conf parallel Proc, 1983 pp.135-143].

	(2013-10-18)

Concurrent Massey Hope

	<language, functional programming> An extension of {Massey
	Hope}, by Peter Burgess, Robert Pointon, and Nigel Perry
	<N.Perry@massey.ac.nz> of {Massey University}, NZ, that
	provides {multithreading} and {type}d inter-{thread}
	communication.  It uses {C} for {intermediate code} rather
	than {assembly language}.

	(1999-08-04)

Concurrent ML

	<language> (CML) A {concurrent} extension of {SML/NJ} written
	by J. Reppy at {Cornell University} in 1990.  CML supports
	dynamic {thread} creation and synchronous {message passing} on
	typed channels.  Threads are implemented using first-class
	{continuations}.  First-class synchronous operations allow
	users to tailor their synchronisation abstractions for their
	application.  CML also supports both {stream I/O} and
	low-level I/O in an integrated fashion.

	{(ftp://ftp.cs.cornell.edu/pub/)}.

	E-mail: <sml-bugs@research.att.com> (bugs).

	["CML: A Higher-Order Concurrent Language", John H. Reppy,
	SIGPLAN Notices 26(6):293-305, June 1991].

	(2000-08-09)

Concurrent Oberon

	<language> A {concurrent} version of {Oberon}.  There is an
	implementation the {Ceres} {workstation}.

	["Adding Concurrency to the Oberon System", S. Lalis et al,
	ETH Zurich, 1993].

	(1994-11-11)

Concurrent Object-Oriented C

	<language> (cooC) A language with {concurrent} {object} execution
	from {Toshiba}.  It has {synchronous} and {asynchronous} {message
	passing}.  It has been implemented for {SunOS}.

	{(ftp://tsbgw.isl.rdc.toshiba.co.jp/pub/toshiba/cooc-beta.1.1.tar.Z)}.

	[SIGPLAN Notices 28(2)].

	(2000-08-13)

Concurrent Object-Oriented Language

	<language> (COOL) An extension of {C++} with {task-level
	parallelism} for {shared-memory} {multi-processors}.

	["COOL: A Language for Parallel Programming", R. Chandra
	<rohit@seagull.stanford.edu> et al in Languages and Compilers
	for Parallel Computing, D. Gelernter et al eds, MIT Press
	1990, pp. 126-148].

	E-mail: Rohit Chandra <rohit@cool.stanford.edu>.

	(1994-11-30)

Concurrent Pascal

	<language> An extension of a {Pascal} subset, {Sequential Pascal},
	developed by Brinch Hansen in 1972-75.  Concurrent Pascal was the
	first language to support {monitors}.  It provided access to
	hardware devices through monitor calls and also supported
	processes and {class}es.

	["The Programming Language Concurrent Pascal", Per Brinch
	Hansen, IEEE Trans Soft Eng 1(2):199-207 (Jun 1975)].

	(1994-11-30)

concurrent processing

	{multitasking}

Concurrent Prolog

	<language> A {Prolog} variant with {guarded clauses} and
	{committed-choice nondeterminism} ({don't-care nondeterminism}) by
	Ehud "Udi" Shapiro, Yale <shapiro-ehud@yale.edu>.  A subset has
	been implemented, but not the full language.

	See also {Mandala}.

	["Concurrent Prolog: Collected Papers", E. Shapiro, V.1-2, MIT
	Press 1987].

	(1994-11-30)

Concurrent Scheme

	<language> A parallel {Lisp}, for the {Mayfly} by M. Swanson
	<swanson%teewinot@cs.utah.edu>.

	["Concurrent Scheme", R.R. Kessler et al, in Parallel Lisp:
	Languages and Systems, T. Ito et al eds, LNCS 441, Springer
	1989].

	(1994-11-30)

ConcurrentSmalltalk

	<language> A {concurrent} variant of {Smalltalk}.

	["Concurrent Programming in ConcurrentSmalltalk", Y. Yokote et
	al in Object-Oriented Concurrent Programming, A. Yonezawa et
	al eds, MIT Press 1987, pp. 129-158].

	(1994-11-30)

Concurrent SP/k

	<language> (CSP/k) A {PL/I}-like {concurrent} language.

	["Structured Concurrent Programming with Operating System
	Applications", R.C. Holt et al, A-W 1978].

	(1997-12-15)

Concurrent Versions System

	<programming> (CVS) A {cross-platform} {code management
	system} originally based on {RCS}.

	CVS tracks all revisions to a file in an associated file with
	the same name as the original file but with the string ",v"
	(for version) appended to the filename.  These files are
	stored in a (possibly centralised) repository.

	Changes are checked in or "committed" along with a comment (which
	appears in the the "commit log").  CVS has the notions of
	projects, {branches}, file locking and many others needed to
	provide a full-functioned repository.

	It is commonly accessed over over its own "anonCVS" {protocol} for
	read-only access (many {open source} projects are available by
	anonymous CVS) and over the {SSH} protocol by those with commit
	privileges ("committers").

	CVS has been rewritten several times and does not depend on
	RCS.  However, files are still largely compatible; one can
	easily migrate a project from RCS to CVS by copying the
	history files into a CVS repository.  A sub-project of the
	{OpenBSD} project is building a complete new implementation of
	CVS, to be called OpenCVS.

	{CVS Home (http://cvshome.org/)}.  {OpenCVS
	(http://opencvs.org/)}.

	(2005-01-17)

condela

	{Connection Definition Language}

condition out

	<programming> A programming technique that prevents a section of
	{code} from being executed by putting it in an {if statement}
	whose condition is always false.

	It is often easier to do this than to {comment out} the code
	because you don't need to modify the code itself (as you would if
	commenting out each line individually) or worry about {nested
	comments} within the code (as you would if putting nesting comment
	delimiters around it).

	For example, in {Perl} you could write:

	 if (0) {
	 ...code to be ignored...
	 }

	In a compiled language, the {compiler} could simply generate no
	code for the whole if statement.  Some compiled languages such as
	C provide {compile-time directives} that achieve the same effect,
	e.g.:

	 #if 0
	 ...code to be ignored...
	 #endif

	(or "#ifdef notdef").

	[{Jargon File}]

	(2013-12-08)

condom

	<jargon> 1. The protective plastic bag that accompanies {3.5-inch
	microfloppy diskettes}.  Rarely, also used of (paper) disk
	envelopes.  Unlike the {write protect tab}, the condom (when left
	on) not only impedes the practice of {SEX} but has also been shown
	to have a high failure rate as drive mechanisms attempt to access
	the disk - and can even fatally frustrate insertion.

	2. The protective cladding on a {light pipe}.

	3. "keyboard condom": A flexible, transparent plastic cover
	for a keyboard, designed to provide some protection against
	dust and {programming fluid} without impeding typing.

	4. "elephant condom": the plastic shipping bags used inside
	cardboard boxes to protect hardware in transit.

	[{Jargon File}]

	(1995-03-14)

Conference On DAta SYstems Languages

	<body> (CODASYL) A consortium that developed {database models} and
	standard {database} extensions for {COBOL}.

	CODASYL was formed in 1959 to guide the development of a
	{standard} {programming language} that could be used on many
	computers.  Members came from industry and government data
	processing departments.  Its goal was to promote more effective
	data {systems analysis}, design and implementation.  It published
	specifications for various languages over the years, handing these
	over to official standards bodies ({ISO}, {ANSI} or their
	predecessors) for formal standardisation.

	The 1965 List Processing Task Force worked on the {IDS/I} database
	extension.  It later renamed itself to the Data Base Task Group
	(DBTG) and publishing the Codasyl Data Model, the first to allow
	one-to-many {relations}.  This work also introduced {data
	definition languages} (DDLs) to define the {database schema} and a
	{data manipulation language} (DML) to be embedded in COBOL
	programs to request and update data in the database.

	Interest in CODASYL declined with the rise of {relational
	databases} beginning in the early 1980s.

	(2013-12-29)

Conferencing over IP

	<communications, standard> (CoIP) Standards for the transmission
	of {multimedia} over the {Internet}.  CoIP extends {VoIP} (voice
	over Internet Protocol) with {text}, {images}, {video}.  The main
	CoIP standard is based on {H.323}.

	The VoIP forum of the {IMTC} merged with the {H.323} Activity
	Group in January 1999 to form the Conferencing over IP (CoIP)
	Activity Group.

	VoIP uses "VoIP Devices" as {gateways} to {route} voice data
	{packets} over the Internet or {PSTN}.  {Protocols} such as {SGCP}
	and its successor {MGCP} extend VoIP to handle media other than
	voice data.

	(2013-12-29)

confidence test

	<testing> Tests to confirm that the results of a program lie
	within certain ranges according to the expected probability
	distribution.

	(1997-10-27)

CONFIG.SYS

	<operating system> A {text file} containing special system
	configuration commands, found in the {root directory} on an
	{MS-DOS} computer, typically on {drive} C (the {hard disk}).  It
	is read by {MS-DOS} at {boot time}, after the setup has been read
	from {CMOS RAM} and before running {AUTOEXEC.BAT}.  It can be
	modified by the user.

	Some example commands which CONFIG.SYS might contain are:

		DEVICE=C:\DOS\HIMEM.SYS /testmem:off

	Load the {extended memory} manager.

		DEVICE=C:\DOS\EMM386.EXE RAM

	Load the {expanded memory} manager.

		BUFFERS=10,0

	Specify memory for {disk buffers}.

		FILES=70

	Set the number of files that can be open at once.

		DOS=UMB

	DOS is located in {UppeMemoryBlock}.

		LASTDRIVE=Z

	Disk drives are A: to Z:.

		FCBS=16,0

	Set the number of {file control blocks}.

		DEVICEHIGH /L:1,12048 =C:\DOS\SETVER.EXE

	Report the DOS version to older programs.

		DOS=HIGH

	DOS should maintain a link to {UMB}.

		COUNTRY=358,437 C:\DOS\COUNTRY.SYS

	Set the {country code} for some programs.

		STACKS=9,256

	Set {dynamic stacks} for hardware control.

		SHELL=C:\DOS\COMMAND.COM C:\DOS\ /E:1024 /p

	Set the location of the {command interpreter}.

	(1995-03-16)

configuraholic

	<jargon> A {luser} who twiddles with computer settings until
	it no longer works and must be fixed by the {system
	administror}.

	(2007-03-20)

configuration item

	<jargon> Hardware or software, or an aggregate of both, which
	is designated by the project configuration manager (or
	contracting agency) for {configuration management}.

	(1996-05-29)

configuration management

	<job, system management> A discipline applying technical and
	administrative controls to identifying, documentating and
	reporting on {configuration items}, their physical and functional
	characteristics and changes to characteristics of those
	configuration items.

	{Change management} is one aspect of configuration management but
	may also refer to the softer, human side of getting people to
	adapt to changing processes and organisation.

	{Source code management} or "code management" is configuration
	management applied to {code} through the various stages of the
	{software life-cycle}.

	(2014-01-21)

configuration programming

	<programming> An approach that advocates the use of a separate
	configuration language to specify the {coarse-grain} structure
	of programs.  Configuration programming is particularly
	attractive for {concurrent}, parallel and distributed systems
	that have inherently complex program structures.

	{Darwin} is an example of a configuration language.

	(1995-03-14)

configure

	<software> A program by {Richard Stallman} to discover
	properties of the current {platform} and to set up {make} to
	compile and install {gcc}.

	{Cygnus configure} was a similar system developed by
	K. Richard Pixley in collaboration with Richard Stallman.
	In 1994, David MacKenzie and others modified {autoconf} to
	incorporate all the features of Cygnus configure and many
	{GNU} programs, including gcc now use autoconf.

	{Metaconfig} is a similar program used in building {Perl}.

	{(http://airs.com/ian/configure)}.

	(2005-04-15)

conflation

	<database> Combining or blending of two or more versions of a
	text; confusion or mixing up.  Conflation {algorithms} are
	used in {databases}.

	[Any specific technical meaning?]

	(1996-04-14)

congestion

	<communications> The condition that arises when the amount of data
	senders want to send down a communication path exceeds its
	{capacity}.  Typically this will result in some {packets} being
	delayed, thus increasing the average {latency}.

	(2014-05-04)

CONIC

	<systems> A {distributed system} language and {operating system}
	developed at {Imperial College} to support {dynamic
	configuration}.

	{Paper (http://spiral.imperial.ac.uk/bitstream/10044/1/452/1/Dynamic%20Configuration%20for%20Distributed.pdf)}.

	["Dynamic Configuration for Distributed Systems", J. Kramer et
	al, IEEE Trans Soft Eng SE-11(4):424-436, Apr 1985].

	(2014-05-04)

conjunction

	{AND}

Conjunctive Normal Form

	<logic> (CNF) A {logical formula} consisting of a
	{conjunction} of {disjunctions} of terms where no disjunction
	contains a conjunction.  Such a formula might also be
	described as a product of sums.  E.g. the CNF of

		(A and B) or C
	is
		(A or C) and (B or C).

	Contrast {Disjunctive Normal Form}.

	(1995-12-10)

connect

	<library, networking> {Unix} socket library routine to connect
	a socket that has been created on the local hosts to one at a
	specified socket address on the remote host.

	{Unix manual pages}: connect(2), accept(2).

	(1995-03-21)

connected graph

	<mathematics> A {graph} such that there is a path between any
	pair of nodes (via zero or more other nodes).

	Thus if we start from any node and visit all nodes connected
	to it by a single edge, then all nodes connected to any of
	them, and so on, then we will eventually have visited every
	node in the connected graph.

	(1996-09-22)

connected subgraph

	<mathematics> A {connected graph} consisting of a {subset} of
	the {nodes} and {edges} of some other graph.

	(1996-09-22)

Connection Definition Language

	<language> (condela) A {procedural}, parallel language for
	defining {neural networks}.

	{(ftp://tut.cis.ohio-state.edu/pub/condela)}.

	(1994-11-30)

connectionless protocol

	<protocol> The data communication method in which communication
	occurs between {hosts} with no previous setup.  {Packets} sent
	between two hosts may take different routes.

	{UDP} is a connectionless protocol.  Also called {packet
	switching}.  Contrast {circuit switching}, {connection-oriented}.

	(2014-05-04)

Connection Machine LISP

	<language> {Lisp} with a parallel data structure, the
	'xapping', an array of values assigned to an {array} of sites.

	[G.L. Steele et al, "Connection Machine LISP: Fine-Grained
	Parallel Symbolic Processing", in Proc 1986 ACM Conf on LISP
	and Functional Prog, Aug 1986, pp.279-297].

	["Connection Machine LISP Reference Manual", Thinking Machines
	Corp, Feb 1987].

	(1995-02-28)

connection-oriented

	<networking> (Or connection-based, stream-oriented).  A type of
	{transport layer} data communication service that allows a {host}
	to send data in a continuous stream to another host.  The
	transport service will guarantee that all data will be delivered
	to the other end in the same order as sent and without
	duplication.  Communication proceeds through three well-defined
	phases: connection establishment, data transfer, connection
	release.  The most common example is {Transmission Control
	Protocol} (TCP), another is {ATM}.

	The network nodes at either end needs to inform all intermediate
	nodes about their service requirements and traffic parameters in
	order to establish communication.

	Opposite of {connectionless}, {datagram}.  See also {circuit
	switching}, {packet switching}, {virtual circuit}.

	(2014-11-27)

connection-oriented network service

	<networking> (CONS) Because of the relatively long transit
	delays and inferior bit error rate of {WANs}, a more
	sophisticated {connection-oriented} {protocol} is normally
	used.

	(1997-11-08)

connective

	<logic> An operator used in {first order logic} to combine two
	logical formulas.

	(2014-05-04)

connector conspiracy

	<business, standard> The tendency of manufacturers (or, by
	extension, other designers) to come up with products that
	don't fit with the old stuff, thereby making you buy either
	all new stuff or expensive interface devices.

	The term probably came into prominence with the appearance of
	the DEC {KL-10}, none of whose connectors matched anything
	else.  The KL-10 {Massbus} connector was actually *patented*
	by {DEC}, who reputedly refused to licence the design, thus
	effectively locking out competition for the lucrative Massbus
	peripherals market.  This policy was a source of frustration
	for the owners of dying, obsolescent disk and tape drives.

	A related phenomenon is the invention of new screw heads so
	that only Designated Persons, possessing the magic
	screwdrivers, can remove covers and make repairs or install
	options.  Older Apple {Macintosh}es took this one step
	further, requiring not only a hex wrench but a specialised
	case-cracking tool to open the box.

	With the advent of more open-systems computing this term has
	fallen somewhat into disuse.

	Compare {backward combatability}.

	[{Jargon File}]

	(2010-02-04)

CONNIVER

	<language> An {artificial intelligence} {programming language} for
	{automatic theorem proving} from {MIT}.  CONNIVER grew out of
	{PLANNER} and was based on {coroutines} rather than
	{backtracking}.  It allowed multiple database contexts with
	hypothetical assertions.

	["The CONNIVER Reference Manual", D. McDermott & G.J. Sussman
	<gjs@zurich.ai.mit.edu>, AI Memo 259, MIT AI Lab, 1973].

	(1995-01-10)

Co-NP

	{complementary nondeterministic polynomial}

CONS

	{connection-oriented network service}

cons

	<programming> The {Lisp} {function} that creates a {cons cell}.

	(2014-11-09)

cons cell

	<programming> /konz sel/ or /kons sel/ A {Lisp} {pair} object
	containing any two objects.  In {Lisp}, "cons" (short for
	"construct") is the fundamental operation for building structures
	such as {lists} and other {binary trees}.  The application of
	"cons" to objects H and T is written

		(cons H T)

	and returns a pair object known as a "cons", "cons cell" or
	{dotted pair}.

	Typically, a cons would be stored in memory as a two consecutive
	{pointers}.

	The two objects in a cons, and the functions to extract them, are
	called "car" and "cdr" after two 15-bit fields of the {machine
	code} {instruction} format of the {IBM 7090} that hosted the
	original LISP implementation.  These fields were called the
	"address" and "decrement" parts so "car" stood for "Contents of
	Address part of Register" and "cdr" for "Contents of Decrement
	part of Register".

	In the typical case where the cons holds one node of a {list}
	structure, the car is the {head} of the list (first element) and
	the cdr is the {tail} of the list (the rest).  If the list had
	only one element then the tail would be an empty list, represented
	by the cdr containing the special value "nil".

	To aid in working with nested structures such as lists of lists,
	Lisp provides functions to access the car of the car ("caar"), the
	car of the cdr ("cadr"), the cdr of the car ("cdar") and the cdr
	of the cdr ("cddr").

	(2014-11-09)

conservative evaluation

	<programming> Under this {parallel evaluation strategy}, no
	evaluation is started unless it is known to be needed.  The
	opposite of conservative evaluation is {speculative evaluation}.

	(2014-06-21)

considered harmful

	<programming, humour> A type of phrase based on the title of
	{Edsger W. Dijkstra}'s famous note in the March 1968
	{Communications of the ACM}, "Goto Statement Considered Harmful",
	which fired the first salvo in the {structured programming wars}.

	Amusingly, the {ACM} considered the resulting acrimony
	sufficiently harmful that it will (by policy) no longer print
	articles taking so assertive a position against a coding practice.

	In the ensuing decades, a large number of both serious papers and
	parodies bore titles of the form "X considered Y".  The
	structured-programming wars eventually blew over with the
	realisation that both sides were wrong, but use of such titles has
	remained as a persistent minor in-joke.

	[{Jargon File}]

	(2014-06-21)

consistently complete

	{boundedly complete}

console

	1. <hardware, operating system, history> The {operator}'s station
	of a {mainframe} as opposed to an ordinary user's {terminal}.  In
	times past, the console was a privileged location that conveyed
	godlike powers to anyone with fingers on its keys.  Under {Unix}
	and other modern {time-sharing} {operating systems}, such
	privileges are guarded by {passwords} instead, and the console is
	just the {tty} the system was booted from.  On Unix the device is
	called /dev/console.

	On a {microcomputer} {Unix} box, the console is the main screen
	and keyboard.  Other, character-only, terminals may be connected
	to {serial ports}.  Typically only the console can do real
	{graphics} or run {X}.  See also {CTY}.

	2. <games> A self-contained {microcomputer} optimised for gaming,
	with powerful graphical output designed to be displayed on a
	television; equipped with one or more {joystick} controllers for
	input and an {optical drive} to load software.  Later generations
	also feature {Internet} connection via {wireless} or wired
	{Ethernet} for downloading games and multiplayer networked play.
	Typically such devices have no keyboard so text must be input
	using the controller to operate an on-screen keyboard, e.g. to
	enter player names.

	The most successful recent examples are the {Sony Playstation} and
	{Microsoft Xbox} families.

	[{Jargon File}]

	(2014-07-01)

console jockey

	{terminal junkie}

consortium

	<body> A group of two or more companies, educational
	institutions, governments or other bodies with some shared
	purpose.

	Examples from computing include the {World Wide Web
	Consortium} (W3C), {Apache Software Foundation}, {The Open
	Group}, {X Consortium}.

	(2009-06-05)

Consortium for Lexical Research

	<body> (CLR) A repository for {natural language processing}
	software, {lexical} data, tools and resources; set up in July 1991
	in the Computing Research Laboratory of {New Mexico State
	University}, Las Cruces, New Mexico, USA.

	CLR maintained a public {FTP} {archive site} and a separate
	members-only library.  As of 1994-02-01, CLR had about 60 members,
	mostly academic institutions, including most US natural language
	processing centres.  Materials could be contributed in exchange
	for membership.

	In 2006, the CRL closed down due to lack of funding.  The CLR
	FTP server and e-mail address seems to have disappeared with it.

	[{The Consortium for Lexical Research, Y. Wilks, Principal
	Investigator, Computing Research Laboratory, New Mexico State
	University
	(http://clair.eecs.umich.edu/aan/paper.php?paper_id=H92-1114)}].

	(2014-07-06)

constant angular velocity

	<storage> (CAV) One of the two schemes for controlling the rate of
	rotation of the disk in a {disk drive}.  Constant {angular
	velocity} keeps the rate of rotation constant.  This means that
	the {linear velocity} of the disk under the head is larger when
	reading or writing the outer {tracks}.  This in turn implies
	either a variation in the data rate to and from the heads or the
	bits per unit length along the track.

	The alternative, {constant linear velocity}, requires the rate of
	rotation of the disk to accelerate and decelerate according to the
	radial postion of the heads, increasing the energy use and
	vibration.

	(2014-07-16)

constant applicative form

	<functional programming> (CAF) A {supercombinator} which is
	not a {lambda abstraction}.  This includes truly constant
	expressions such as 12, (+ 1 2), [1, 2, 3] as well as partially
	applied functions such as (+ 4).  Note that this last example
	is equivalent under {eta abstraction} to \ x . + 4 x which is
	not a CAF.

	Since a CAF is a supercombinator, it contains no free
	variables.  Moreover, since it is not a lambda abstraction it
	contains no variables at all.  It may however contain
	identifiers which refer to other CAFs, e.g.

		c 3 where c = (* 2).

	A CAF can always be lifted to the top level of the program.
	It can either be compiled to a piece of graph which will be
	shared by all uses or to some shared code which will overwrite
	itself with some graph the first time it is evaluated.  A CAF
	such as

		ints = from 1  where  from n = n : from (n+1)

	can grow without bound but may only be accessible from within
	the code of one or more functions.  In order for the {garbage
	collector} to be able to reclaim such structures, we associate
	with each function a list of the CAFs to which it refers.
	When garbage collecting a reference to the function we collect
	the CAFs on its list.

	[{The Implementation of Functional Programming Languages, Simon
	Peyton Jones (http://research.microsoft.com/%7Esimonpj/papers/slpj-book-1987/PAGES/224.HTM)}].

	(2006-10-12)

constant folding

	<compiler> A {compiler} {optimisation} technique where
	constant subexpressions are evaluated at {compile time}.  This
	is usually only applied to built-in numerical and {boolean}
	operators whereas {partial evaluation} is more general in that
	expressions involving user-defined functions may also be
	evaluated at compile time.

	(1997-02-20)

Constantine/Yourdon

	{Yourdon/Constantine}

constant linear velocity

	<storage> (CLV) A way of controlling the rotation of the {disks}
	in a {disk drive} in which the {linear velocity} of the disk
	surface relative to the {read/write heads} is kept constant.

	In order to achieve constant linear velocity, the disk must rotate
	faster (at a higher {angular velocity}) when reading or writing
	tracks closer to the centre.

	Having a constant linear read/write speed along the track means
	that the electrical signal to and from the heads has a constant
	{data rate} (bits per second), thus simplifying the timing of the
	drive electronics somewhat.  However, rotating at less than the
	maximum possible rate sacrifices some potential performance
	compared to the alternative, {constant angular velocity}.  Also,
	varying the rate causes more vibration and consumes more energy.

	(2014-07-27)

constant mapping

	<networking> A precursor to {ARP} used by some {TCP} software in
	which the destination {Ethernet address} is constructed from the
	top 24 {bits} of the source Ethernet address followed by the low
	24 bits of the (class A) destination {Internet address}.  For this
	scheme the top 24 bits of the Ethernet address must be the same on
	all hosts on the network.

	(2014-08-06)

constraint

	<programming, mathematics> A {Boolean} {relation}, often an
	equality or {ineqality} relation, between the values of one or
	more mathematical {variables}.  E.g. x>3 is a constraint on x.
	The process of {constraint satisfaction} attempts to assign values
	to variables so that all constraints are true.

	{Usenet} newsgroup: {news:comp.constraints}.  {FAQ
	(http://cs.unh.edu/ccc/archive/)}.

	(2002-06-08)

constraint functional programming

	<programming> (CFP) {functional programming} plus {constraints}.

	(2002-06-08)

Constraint Handling In Prolog

	<language> (CHIP) A {constraint logic programming} language
	developed by M. Dincbas at {ECRC}, Munich, Germany in 1985 which
	includes {Boolean unification} and a symbolic {simplex}-like
	{algorithm}.  CHIP introduced the {domain-variable model}.

	["The Constraint Logic Programming Language CHIP", M. Dincbas
	et al, Proc 2nd Intl Conf on Fifth Generation Computer Sys,
	Tokyo (Nov 1988), pp.249-264].

	["Constraint Satisfaction in Logic Programming", Van
	Hentenryck.  Available from COSYTEC, 4 rue Jean Rostand,
	F91893 Orsay, France].

	(1994-11-15)

ConstraintLisp

	<language> An {object-oriented} {constraint} language based on
	{CSP}.  An extension of {Common Lisp} and {CLOS}.

	["ConstraintLisp: An Object-Oriented Constraint Programming
	Language", Bing Liu (ex bing@iti.gov.sg) et al, SIGPLAN
	Notices 27(11):17-26, Nov 1992].

	(2000-04-02)

Constraint Logic Programming

	<programming> (CLP) A programming framework based (like {Prolog})
	on {LUSH} (or {SLD}) {resolution}, but in which {unification} has
	been replaced by a {constraint solver}.  A CLP {interpreter}
	contains a Prolog-like {inference engine} and an {incremental
	constraint solver}.  The engine sends constraints to the solver
	one at a time.  If the new constraint is consistent with the
	collected constraints it will be added to the set.  If it is
	inconsistent, it will cause the engine to {backtrack}.

	{CLP*} is a variant.

	["Constraint Logic Programming", J. Jaffar et al, 14th POPL,
	ACM 1987].

	(1994-11-01)

CONSTRAINTS

	<programming> A {programming language} for solving {constraints}
	using {value inference}.

	["CONSTRAINTS: A Language for Expressing Almost-Hierarchical
	Descriptions", G.J. Sussman et al, Artif Intell 14(1):1-39, Aug
	1980].

	(1994-11-01)

constraint satisfaction

	<application> The process of assigning values to {variables} while
	meeting certain requirements or "{constraints}".  For example, in
	{graph colouring}, a node is a variable, the colour assigned to it
	is its value and a link between two nodes represents the
	constraint that those two nodes must not be assigned the same
	colour.  In {scheduling}, constraints apply to such variables as
	the starting and ending times for tasks.

	The {Simplex} method is one well known technique for solving
	numerical constraints.

	The search difficulty of constraint satisfaction problems can be
	determined on average from knowledge of easily computed structural
	properties of the problems.  In fact, hard instances of
	{NP-complete} problems are concentrated near an abrupt transition
	between under- and over-constrained problems.  This transition is
	analogous to phase transitions in physical systems and offers a
	way to estimate the likely difficulty of a constraint problem
	before attempting to solve it with search.

	{Phase transitions in search
	(ftp://parcftp.xerox.com/pub/dynamics/constraints.html)} (Tad
	Hogg, {XEROX PARC}).

	(1995-02-15)

constructed type

	<types> A {type} formed by applying some {type constructor
	function} to one or more other types.  The usual constructions are
	functions: t1 -> t2, products: (t1, t2), sums: t1 + t2 and
	lifting: lift(t1).

	(In {LaTeX}, the lifted type is written with a subscript
	{\perp}).

	See also {algebraic data type}, {primitive type}.

	(1995-02-03)

Constructive Cost Model

	<programming> (COCOMO) A method for estimating the cost of a
	{software} package, proposed by Dr Barry Boehm.

	The Basic COCOMO Model estimates the effort required to develop
	software in three modes of development ({Organic Mode},
	{Semidetached Mode}, or {Embedded Mode}) using only {DSIs} as an
	input.  The Basic model is good for quick estimates.

	The Intermediate Model extends the Basic Model with an {Effort
	Adjustment Factor} (EAF) and different coefficients for the effort
	equation.  The user supplies settings for cost drivers that
	determine the effort and duration of the software projects.  It
	also allows DSI values and cost drivers to be chosen for
	individual components instead of for the system as a whole.

	The Detailed COCOMO Model uses effort multipliers for each phase
	of the project and provides a three-level product hierarchy and
	has some other capabilities such as a procedure for adjusting the
	phase distribution of the development schedule.

	["Software Engineering Economics", B. Boehm, Prentice-Hall,
	1981].

	(1996-05-29)

constructive proof

	<mathematics> A proof that something exists that provides an
	example or a method for actually constructing it.

	For example, for any pair of finite real numbers n < 0 and p > 0,
	there exists a real number 0 < k < 1 such that

		f(k) = (1-k)*n + k*p = 0.

	A constructive proof would proceed by rearranging the above to
	derive an equation for k:

		k = 1/(1-n/p)

	From this and the constraints on n and p, we can show that 0 < k <
	1.

	A few mathematicians actually reject *all* non-constructive
	arguments as invalid; this means, for instance, that the law of
	the {excluded middle} (either P or not-P must hold, whatever P is)
	has to go; this makes {proof by contradiction} invalid.  See
	{intuitionistic logic}.

	Constructive proofs are popular in theoretical computer science,
	both because computer scientists are less given to abstraction
	than mathematicians and because {intuitionistic logic} turns out
	to be an appropriate theoretical treatment of the foundations of
	computer science.

	(2014-08-24)

constructive solid geometry

	<graphics> (CSG) A method used in {solid modeling} to describe the
	geometry of complex three-dimensional scenes by applying {set
	operations} (union, difference, intersection) to {primitive}
	shapes (cuboids, cylinders, prisms, pyramids, spheres and cones).

	See also {CSG-tree}.

	{CSG in JavaScript (http://evanw.github.io/csg.js/)}.

	(2014-09-22)

constructor

	<programming> 1. In {object-oriented languages}, a {function}
	provided by a {class} to initialise a newly created {object}.  The
	constructor function typically has the same name as the class.  It
	may take arguments, e.g. to set various attributes of the object
	or it may just leave everything undefined to be set elsewhere.

	A class may also have a {destructor} function that is called when
	objects of the class are destroyed.

	2. In {functional programming} and {type theory}, one of the
	symbols used to create an object with an {algebraic data type}.

	(2014-10-04)

Consul

	<language> A {constraint}-based {declarative language} based on
	{axiomatic set theory} and designed for {parallel} execution on
	{MIMD} architectures.  Consul's fundamental {data type} is the
	{set} and its fundamental {operators} are the {logical
	connectives} ("and", "or", "not") and {quantifiers} ("forall",
	"exists").  It is written in {Lisp}-like {syntax}, e.g.,

	 (plus x y z)

	which means the relation x = y+z (not an {assignment statement}).

	{["Design of the CONSUL Programming Language", D. Baldwin,
	C. A. Quiroz Gonzalez, University of Rochester. Computer Science
	Department, TR208, 1987 Feb (http://hdl.handle.net/1802/6372)]}

	{["Consul: A Parallel Constraint Language", D. Baldwin, IEEE
	Software 6(4):62-71, 1989 July
	(http://dx.doi.org/10.1109/52.31653)]}

	(2014-10-04)

consultant

	<job> A person who facilitates organisational change and/or
	provides subject matter expertise on technical, functional and
	business topics during development or implementation.  Consultants
	perform {business requirements analysis}, recommend selection of
	packaged {software}, develop proposals for consulting services and
	manage implementation projects at client sites.  They provides
	expert knowledge of products such as {SAP R/3}, {PeopleSoft},
	{HRMS/Financials} and {SmartStream}.

	(2004-03-09)

container class

	<programming> A {class} whose {instances} are collections of
	other objects.  Examples include {arrays}, {lists}, {queues}
	and {stacks}.  A container class typically provides {methods}
	such as count, insert, delete and search.

	(2014-10-15)

content addressable memory

	<hardware, storage> (CAM, or "associative memory") A kind of
	{storage} device which includes comparison logic with each {bit}
	of storage.  A data value is broadcast to all {words} of storage
	and compared with the values there.  Words which match are flagged
	in some way.  Subsequent operations can then work on flagged
	words, e.g. read them out one at a time or write to certain bit
	positions in all of them.  A CAM can thus operate as a {data
	parallel} ({SIMD}) processor.

	CAMs are often used in {caches} and {memory management units}.

	(1995-02-16)

content-based information retrieval

	<image, algorithm> (CBIR, query by image content, QBIC,
	content-based visual information retrieval, CBVIR) A general
	term for methods using {image analysis} to try to identify
	objects and features in images to allow them to indexed and
	searched.

	This contrasts with the use of image {metadata} such as
	keywords or tags associated with (and possibly stored in) the
	image.

	[IEEE Computer, September 1995].

	(2017-12-12)

content-based visual information retrieval

	{content-based information retrieval}

Content Data Model

	<standard, documentation, language> (CDM) An {SGML}-based
	specification for interactive maintenance manuals, developed by
	the Air Force Human Resourceas Laboratory (AFHRL) with assistance
	from RJO Enterprises, Incorporated.  CDM models data hierachically
	and data are identified by their content structure with SGML
	mark-up used to identify information classes such as "system
	information", "functions", "tasks" and "steps".

	{(http://www.dtic.mil/dtic/tr/fulltext/u2/a205916.pdf)}.

	["Final Report - Content Data Model of Organizational Maintenance
	Information for Automated Interchange of Technical Source Data.",
	Chicago, Illinois, Datalogics, Inc., 1998-07-07].

	(2014-10-20)

content-free

	<jargon> 1. (By analogy with "context-free") Used of a message
	that adds nothing to the recipient's knowledge.  Though this
	adjective is sometimes applied to {flamage}, it more usually
	connotes derision for communication styles that exalt form over
	substance or are centred on concerns irrelevant to the subject
	ostensibly at hand.  Perhaps most used with reference to speeches
	by company presidents and other professional manipulators.

	See also {four-colour glossies}.

	<education> 2. Within British schools the term refers to
	general-purpose {software} such as a {word processor}, a
	{spreadsheet} or a program that tests spelling of words supplied
	by the teacher.  This is in contrast to software designed to teach
	a particular topic, e.g. a plant growth simulation, an interactive
	periodic table or a program that tests spelling of a predetermined
	list of words.  Content-free software can be more cost-effective
	as it can be reused for many lessons throughout the syllabus.

	[{Jargon File}]

	(2014-10-30)

contention slot

	<networking> In a communication system where only one node at a
	time may transmit successfully on a shared channel, the contention
	slot or contention period is the time a node must wait before it
	can be sure that no other node's transmission has {collided
	(collision)} with its transmission.

	If node A starts to transmit at time t0 and then another node
	starts to transmit just before it recieves A's transmission at
	time t0 + T, then the transmissions will collide but node A will
	not detect the collision until time t0 + 2T.  The contention slot,
	2T, for nodes seperated by the maximum propagation delay thus
	determines how much data the node must be prepared to re-transmit
	in the event of a collision.

	(2014-11-06)

Contents of Address part of Register

	<programming> (car) /kar/ The left-hand element of a {Lisp} {cons
	cell}.

	(2014-11-09)

Contents of Decrement part of Register

	<programming> (cdr) /ku'dr/ or /kuh'dr/ The right-hand element of
	a {Lisp} {cons cell}.

	(2014-11-09)

context

	<grammar> In a {grammar}, context refers to the {symbols} before
	and after the symbol under consideration.  If the {syntax} of a
	symbol is independent of its context, the grammar is a
	{context-free grammar}.

	(2014-11-24)

context clash

	<grammar> When a {parser} cannot tell which alternative
	{production} of a {syntax} applies by looking at the next
	input {token} ("lexeme").  For example, given syntax

		C -> A | b c

		A -> d | b e

	If you're parsing non-terminal C and the next token is 'b',
	you don't know whether it's the first or second alternative of
	C since they both can start with b.

	If a grammar can generate the same sentence in multiple different
	ways (with different parse tress) then it is ambiguous.  An
	ambiguity must start with a context clash (but not all context
	clashes imply ambiguity).  To see if a context clash is also a
	case of ambiguity you would need to follow the alternatives
	involved in each context clash to see if they can generate the
	same complete sequence of tokens.

	(1995-04-05)

COntext Dependent Information Language

	<language> (CODIL) An early language for non-numerical
	business problems.

	["CODIL, Part1.  The Importance of Flexibility", C.F. Reynolds
	et al, Computer J 14(3):217-220, May 1971].

	(1994-12-23)

context-free grammar

	<grammar> (CFG) A {grammar} where the {syntax} of each constituent
	({syntactic category} or {terminal symbol}) is independent of the
	symbols occuring before and after it in a sentence.  A
	context-free grammar describes a context-free language.

	Context-free grammars can be expressed by a set of "production
	rules" or syntactic rules.  For example, a language with symbols
	"a" and "b" that must occur in unequal numbers can be represented
	by the CFG:

	 S â†’ U | V
	 U â†’ TaU | TaT | UaT
	 V â†’ TbV | TbT | VbT
	 T â†’ aTbT | bTaT | Îµ

	meaning the top-level category "S" consists of either a "U" or a
	"V" and so on.  The special category "Îµ" represents the empty
	string.  This grammar is context-free because each rule has a
	single symbol on its left-hand side.

	{Parsers} for context-free grammars are simpler than those for
	context-dependent grammars because the parser need only know the
	current symbol.

	{Algol} was (one of?) the first languages whose syntax was
	described by a context-free grammar.  This became a common
	practice for programming languages and led to the notation for
	grammars called {Backus-Naur Form}.

	(2014-11-24)

context-sensitive menu

	<operating system> A {menu} which appears in response to a
	user action (typically a {mouse} click) and whose contents are
	determined by which {application window} was clicked or has
	the {input focus}.

	Most {GUIs} use a secondary mouse button (right or middle) to
	call up a context-sensitive menu as the {primary mouse button}
	is normally used to interact with objects which are already
	visible.

	The context-sensitive menu often contains functions that are
	also available in a {menu bar} but the context-sensitive menu
	provides quick access to a subset of functions that are
	particularly relevant to the window area clicked on.

	The {RISC OS} {WIMP} uses only context-sensitive menus (always
	invoked using the middle mouse button).  This saves screen
	space and reduces mouse movement compared to a {menu bar}.

	(1999-09-22)

context switch

	<operating system> When a {multitasking} {operating system}
	stops running one {process} and starts running another.  Many
	operating systems implement concurrency by maintaining
	separate environments or "contexts" for each process.  The
	amount of separation between processes, and the amount of
	information in a context, depends on the operating system but
	generally the OS should prevent processes interfering with each
	other, e.g. by modifying each other's memory.

	A context switch can be as simple as changing the value of the
	{program counter} and {stack pointer} or it might involve
	resetting the {MMU} to make a different set of memory {pages}
	available.

	In order to present the user with an impression of parallism,
	and to allow processes to respond quickly to external events,
	many systems will context switch tens or hundreds of times per
	second.

	(1996-12-18)

Contextually Communicating Sequential Processes

	<language> (CCSP) A notation based on {CSP}.

	["Contextually Communicating Sequential Processes - A Software
	Engineering Approach", M. Hull et al, Software Prac & Exp
	16(9):845-864, Sept 1986].

	(1994-11-01)

continental drift

	<humour> Very, very slow.  In 1980 {David Turner} remarked that
	{KRC} ran "at the speed of the continental drift".

	(1994-12-06)

continuation

	{continuation passing style}

Continuation Passing Style

	<language> (CPS) An intermediate language for {Scheme} that
	implements {continuation passing style}.  The CPS language is
	semantically clean and is used for the {SML/NJ} {compiler}.

	["Rabbit: A Compiler for Scheme", G.L. Steele, AI-TR-474, MIT
	(May 1978)].

	["Compiling With Continuations", A. Appel, Cambridge U Press
	1992].

	(2014-09-24)

continuation passing style

	<programming> (CPS) A style of programming in which every user
	function f takes an extra argument c known as a "continuation".
	Whenever f would normally return a result r to its caller, it
	instead returns the result of applying the continuation to r.  The
	continuation thus represents the whole of the rest of the
	computation.  Some examples:

	 normal (direct style)		continuation passing style

	 square x = x * x			square x k = k (x * x)

	 g (square 23)				square 23 g

	 (square 3) + 1				square 3 ( \ s . s + 1 )

	(1995-04-04)

continuations

	{continuation passing style}

continuous function

	<mathematics> A {function} f : D -> E, where D and E
	are {cpos}, is continuous if it is {monotonic} and

		f (lub Z) = lub { f z | z in Z }

	for all {directed} sets Z in D.  In other words, the image of
	the lub is the lub of any directed image.

	All {additive} functions (functions which preserve all lubs)
	are continuous.  A continuous function has a {least fixed
	point} if its {domain} has a least element, {bottom} (i.e. it
	is a cpo or a "pointed cpo" depending on your definition of a
	cpo).  The {least fixed point} is

		fix f = lub {f^n bottom | n = 0..infinity}

	(1994-11-30)

Continuous System Modeling Program

	<simulation> (CSMP) A program for {simulation} of dynamics of
	{continuous systems} by numerical integration of complex systems
	of differential equations.  CSMP is similar to {CSSL}.

	["A Guide to Using CSMP - The Continuous System Modeling
	Program", Frank H. Speckhart et al, P-H 1976].

	(1995-02-23)

Continuous System Simulation Language

	<simulation> (CSSL) Versions include {ACSL}, {HYTRAN}, {SL-I},
	{S/360} and {CSMP}.

	CSSL(Continuous System Simulation Language) versions I, II,
	III, IV and V have been commercially available since 1968.
	CSSL-I was developed for {Jet Propulsion Labs} in 1968.
	CSSL-III was widely distributed from 1969-1975.  CSSL-IV
	(interactive version) was developed by R. Nilsen and ran on
	over 30 different computers.  Currently CSSL-V is marketed by
	{Simulation Services International} and available on {PCs} and
	{workstations}.

	["The SCi Continuous System Simulation Language (CSSL)",
	Simulation, 9(6), Dec 1967].

	(2003-04-15)

continuous wave

	<communications, history> (CW) A term from early {radio} history
	for a {transmitter} using an {electron tube} (valve) {oscillator}
	to constantly add energy to a {tuned circuit} connected to an
	{antenna}.

	The term is used in contrast with the use of a {spark gap} to
	initiate a damped {sinusoidal wave} in a tuned circuit consisting
	of an {inductor} and {capacitor}.  The energy in this circuit
	constantly changes between the capacitor's {electrostatic field}
	and the inductor's {magnetic field}.  The energy is then coupled
	to the radiating antenna, loosely (so as not to dampen the wave
	too quickly).

	Some radio amateurs understand "CW" to mean transmission by
	means a single frequency signal which is either on or off
	(e.g. {Morse code}), as opposed to a carrier which varies
	continuously in amplitude, frequency or phase.  Some would
	even call the former "unmodulated" even though turning on and
	off is actually the most extreme form of amplitude modulation.

	(2009-11-24)

contraction

	{reduction}

contract programmer

	<job, programming> A {programmer} who works on a fixed-length or
	temporary contract, and is often employed to write certain types
	of code or to work on a specific project.

	Despite the fact that contractors usually cost more than hiring a
	permanent employee with the same skills, it is common for
	organisations to employ them for extended periods, sometimes
	renewing their contracts for many years, due to lack of certainty
	about the future or simple lack of planning.

	A contract programmer may be independent or they may work in a
	supplier's {professional services} department, providing
	consultancy and programming services for the supplier's products.

	(2015-03-07)

control

	1. <character, hardware> A {control key} on a {keyboard} used to
	input {control characters}.

	2. <programming, operating system, graphics> A component in a
	{graphical user interface}, e.g. an {Active-X control}.

Control and Status Register

	<hardware> (CSR) A special {register} in most {CPUs} that
	stores additional information about the results of {machine
	instructions}, e.g. {comparisons}.  The CSR consists of
	several independent {flag bits} such as {carry}, {overflow}
	and zero.  The CSR is chiefly used to determine the outcome of
	{conditional branch} instructions or other forms of
	{conditional execution}.

	(2018-01-29)

control bus

	<architecture> In a {digital computer}, the signal paths that
	carry commands from the {instruction decode} logic to various
	{functional units} such as the {ALU}, {memory address
	register}, {memory data register} and other {buffers}.

	Named by analogy with the {address bus} and {data bus}, each
	of which carries a set of related signals, the signals carried
	by the control bus are more varied and independent.

	(2018-01-29)

control-C

	<character> (Or ETX, End of Text) The {ASCII} character with
	code 3.

	Control-C is the {interrupt} character used in the
	{command-line interface} of many {operating systems},
	including {Unix} and {MS-DOS}, to force the currently running
	program to stop and return control to the user.

	[{Jargon File}]

	(1995-03-16)

control character

	<character> Any of a number of special characters that exist in
	most {coded character sets} and that are input or output to cause
	some special action rather than as part of the normal textual
	data.

	Control characters are input by holding down a {control key} on
	the {keyboard} and simultaneously pressing a letter key or
	(depending on the keyboard and {operating system}) certain
	punctuation characters.  Some control codes have their own special
	keys: {escape}, {tab}, {delete}, {backspace}, {return}, allowing
	them to be entered with a single key press.

	Control characters may be output for their effect on the
	output device, e.g. moving the {cursor} or {print head} to the
	start of a new line ({carriage return}, Control-M), advancing
	down to the next line ({line feed}, Control-J) or ringing the
	bell (Control-G).

	Different {operating systems} and {application programs} have
	different conventions for what effect typing certain control
	characters will have, such as interrupting the current process
	({Unix} {Control-C}) or suspending or resuming output
	({Control-S}, {Control-Q}).

	See {ASCII character table}.

	(2015-03-07)

control code

	<character> A {character code} for a {control character}, normally
	including the values 0..31 or 127, inherited from {ASCII},
	possibly extended to include other characters by the {operating
	system} or {application program}.

	(2017-07-30)

control flow

	<programming> (Or "flow of control") The sequence of
	{execution} of the {instructions} in a {program}.  Control
	flow is normally linear, executing the instructions in the
	order they were written.  It can be changed at {run time} by
	{control structures} such as {if statements}, {loops} or
	{goto} statements).  These {high-level} language statements
	are translated by the {compiler} or {interpreter} into
	{machine instructions}, most commonly {conditional branch}
	instructions.

	{Interrupts} and {exception handling} also change the sequence
	of execution of instructions but are not part of normal
	control flow.

	Not to be confused with "{flow control}".

	(2017-07-30)

control-G

	{bell}

control key

	<hardware> A {modifier key} found on modern {keyboards}.

	Holding down a control key while pressing and releasing letter
	keys or certain other keys generates a "{control character}".
	E.g. holding control and hitting "A" generates control-A ({ASCII}
	code 1).  The ASCII code for the control character is generally 64
	less than that for the unmodified character.

	Standard {PC} keyboards have two control keys, both labeled
	"Ctrl", at the bottom left and bottom right of the main block of
	keys.

	The control key does not generate any character on its own but
	most modern keyboards and {operating systems} allow a program
	to tell whether each of the individual keys on the keyboard
	(including modifier keys) is pressed at any time.

	(2015-03-07)

Control Language

	<language> (CL) The {batch} language for {IBM RPG}/38, used in
	conjunction with {RPG III}.

	See also {OCL}.

	(2000-04-08)

controller

	<hardware> Part of a computer, typically a separate circuit
	board, which allows the computer to use certain kinds of
	{peripheral} devices.  A {disk controller} is used to connect
	{hard disks} and {floppy disks}, a {network controller} is
	used for {Ethernet}.  Other controllers are: {keyboard
	controller}, {interrupt controller} and {graphics controller}.

	(1998-03-16)

control-O

	<character> {ASCII} character 15 (SI).

	The character used on some {operating systems} to abort output
	but allow the program to keep on running.  The name "SI" comes
	from its use on some terminals to "shift in" an alternative
	character set.  "SO" is {Control-N}.

	Compare {control-S}.

	[{Jargon File}]

	(1995-03-16)

Control Program

	<operating system> (CP) The component of {IBM}'s {Virtual
	Machine} (VM) that provides "guest support" for {operating
	systems} that run on IBM {mainframe} compatible processors.
	Cp does this by providing a seamless {emulation} of privileged
	functions in the problem program environment.

	(1999-01-19)

Control Program for Microcomputers

	<operating system> (CP/M) An early {microcomputer} {operating
	system} written by Gary Kildall of {Digital Research} for
	{8080} and {Zilog Z80}-based 8-bit computers.  CP/M was very
	popular in the late 1970s but was virtually wiped out by
	{MS-DOS} after the release of the {IBM PC} in 1981.

	Many of CP/M's features and conventions strongly resemble
	those of early {DEC} operating systems such as {TOPS-10},
	{OS/8}, {RSTS} and {RSX-11}.

	CP/M might have been the {OS} for the {IBM PC} instead of
	{MS-DOS} but Kildall wanted to keep control of his creation
	and only license it to IBM.  Big Blue however wanted to own
	and control it completely.  Kildall spent the day IBM's reps
	wanted to meet him enjoying the perfect flying weather in his
	private plane.

	[Did CP/M use the same {FAT} file system as MS-DOS?]

	(1996-01-07)

control-Q

	<character> (Or XON, DC1, {Device Control} 1) The character
	with {ASCII} code 17, used in {software handshaking} to resume
	output after a previous {control-S}.

	[{Jargon File}]

	(1996-06-28)

control-S

	<character> (Or XOFF, DC3, {Device Control} 3) The character
	with {ASCII} code 19, used in {software handshaking} to
	temporarily suspend output until a {control-Q} is received.

	[{Jargon File}]

	(1996-06-28)

control structure

	<programming> One of the instructions, statements or groups of
	statements in a programming language which determines the
	sequence of execution of other instructions or statements (the
	{control flow}).

	In {assembly language} this typically consists of {jumps} and
	{conditional jumps} along with {procedure} call and return
	though some architectures include other constructs such as an
	instruction which skips the following instruction depending on
	some condition ({PDP}?), various kinds of {loop} instructions
	(later {Motorola 680x0}) or conditional execution of all
	instructions (Advanced RISC Machine).

	Basic control structures (whatever their names in particular
	languages) include "if CONDITION then EXPRESSION else
	EXPRESSION", the {switch statement}, "while CONDITION do
	EXPRESSION", "gosub", the suspect "{goto}" and the much-feared
	"{come from}".  Other constructs handle errors and
	{exceptions} such as {traps} and {interrupts}.

	(1997-09-14)

control tty

	(/dev/ptyp*) The network side of a {pseudo-tty}.

control unit

	1. <processor> The part of a {CPU} that sends control signals
	to other components to cause them to execute the {machine
	cycle} - fetch, decode, execute, store.

	2. <architecture> Any device that controls the I/O operations
	of one or more {peripheral} devices, e.g. a {disk controller}.

	(2008-05-21)

conventional memory

	<storage> The first 640 {kilobytes} of an {IBM PC}'s memory.
	Prior to {EMS}, {XMS}, and {HMA}, {real mode} application
	could use only this part of the memory.

	(1996-01-10)

converged network

	<networking> A single {network} that can carry {voice},
	{video} and {data}.

	(2007-06-07)

Convergent Technologies

	<company> A company formed by a small group of people who left
	{Intel Corporation} in 1979.  Convergent Technologies' first
	product was the IWS (Integrated Workstation) based on the
	{Intel 8086}, which ran {Convergent Technologies Operating
	System} - their first {operating system}.

	Unisys bought {Convergent Technologies} in 1988.

	[Who bought/merged with who and when?]

	(1998-04-03)

Convergent Technologies Operating System

	<operating system> (CTOS, BTOS, STARSYS) /see-toss/ A modular,
	{message-passing}, {multi-process} based {operating system}.

	{Convergent Technologies}' first product was the IWS
	(Integrated Workstation) based on the {Intel 8086}, which had
	CTOS as its operating system.  It is a modular operating
	system with built in {local area networking}.  CTOS supports
	multiple processes or {threads}, and message-based
	{inter-process communication}.

	Companies which have licensed CTOS include {Burroughs} (BTOS)
	and {Bull} (STARSYS).  The largest customer was {Unisys}, with
	whom Convergent Technologies merged to become one company in
	1988.  CTOS now has over 800,000 users worldwide.

	CTOS runs on Intel {Pentium} computers, and can run
	concurrently with {Microsoft} {Windows NT}.

	For some reason, CTOS is no longer marketted to new customers,
	although there is a support comittment for existing customers
	until 2001.  Major customers include Police Forces, Banks, and
	Airlines.

	["Exploring CTOS", Miller E., Crook J., Loy J. - Prentice
	Hall, ISBN 0-13-297342-1, 1991].

	(1996-09-24)

Conversational LISP

	<language> (CLISP) A mixed English-like, {ALGOL}-like surface
	{syntax} for {Interlisp}.

	["CLISP: Conversational LISP", W. Teitelman, in Proc Third
	Intl Joint Conf on AI, Stanford, Aug 1973, pp.686-690].

	(1994-11-01)

Conversational Monitor System

	{Virtual Machine/Conversational Monitor System}

converse

	<logic> The truth of a {proposition} of the form A => B and
	its converse B => A are shown in the following truth table:

		A   B | A => B   B => A
		------+----------------
		f   f |	  t	   t
		f   t |	  t	   f
		t   f |	  f	   t
		t   t |	  t	   t

	(2002-07-12)

conversion to iteration

	A transformation applied to functional programs to replace
	recursion with iteration.  A tail-recursive function can be
	compiled to an iterative loop where the recursive call becomes
	a jump back to the start and the parameters are held in
	registers which are updated with new values each time around
	the loop.  See Iteration, Tail recursion optimisation.

CONVERT

	<language> 1. (Or "REC", "Regular Expression Converter") A
	{string processing} language that combined the {pattern
	matching} and transformation operations of {COMIT} with the
	{recursive data structures} of {Lisp}.

	["Convert", A. Guzman et al, CACM 9(8):604-615, Aug 1966].

	2. An early language to convert programs and data from one
	language to another.

	["CONVERT Manual", OLI Systems Inc, Oct 1976].

	(2007-02-05)

convert.f90

	A {Fortran77} to {Fortran90} translator by Michael Metcalf
	<metcalf@cernvm.cern.ch>.  The significant differences between
	the two Fortrans make this package useful.

	{(ftp://jkr.cc.rl.ac.uk/pub/MandR/convert.f90)}.

	(1993-07-17)

Convex Computer Corporation

	<company> A mini-super-computer manufacturer.

	Address: Richardson, Texas, USA.

	(1995-03-01)

convex hull

	<mathematics, graphics> For a {set} S in space, the smallest
	{convex set} containing S.  In the plane, the convex hull can
	be visualized as the shape assumed by a rubber band that has
	been stretched around the set S and released to conform as
	closely as possible to S.

	(1997-08-03)

Conway, John Horton

	{John Horton Conway}

Conway's Game of Life

	<simulation> The first popular {cellular automata} based
	{artificial life} simulation.  Life was invented by British
	mathematician {John Horton Conway} in 1970 and was first
	introduced publicly in "Scientific American" later that year.

	Conway first devised what he called "The Game of Life" and
	"ran" it using plates placed on floor tiles in his house.
	Because of he ran out of floor space and kept stepping on the
	plates, he later moved to doing it on paper or on a
	checkerboard and then moved to running Life as a computer
	program on a {PDP-7}.  That first implementation of Life as a
	computer program was written by M. J. T. Guy and
	{S. R. Bourne} (the author of {Unix}'s {Bourne shell}).

	Life uses a rectangular grid of binary (live or dead) cells
	each of which is updated at each step according to the
	previous state of its eight neighbours as follows: a live cell
	with less than two, or more than three, live neighbours dies.
	A dead cell with exactly three neighbours becomes alive.
	Other cells do not change.

	While the rules are fairly simple, the patterns that can arise
	are of a complexity resembling that of organic systems -- hence
	the name "Life".

	Many hackers pass through a stage of fascination with Life,
	and hackers at various places contributed heavily to the
	mathematical analysis of this game (most notably {Bill Gosper}
	at {MIT}, who even implemented Life in {TECO}!; see
	{Gosperism}).  When a hacker mentions "life", he is more
	likely to mean this game than the magazine, the breakfast
	cereal, the 1950s-era board game or the human state of
	existence.

	{On-line implementation
	(http://pmav.eu/stuff/javascript-game-of-life-v3.1.1/)}.

	["Scientific American" 223, October 1970, p120-123, 224;
	February 1971 p121-117, Martin Gardner].

	["The Garden in The Machine: the Emerging Science of
	Artificial Life", Claus Emmeche, 1994].

	["Winning Ways, For Your Mathematical Plays", Elwyn
	R. Berlekamp, John Horton Conway and Richard K. Guy, 1982].

	["The Recursive Universe: Cosmic Complexity and the Limits of
	Scientific Knowledge", William Poundstone, 1985].

	[{Jargon File}]

	(1997-09-07)

Conway's Law

	<project, humour> The rule (presumably formulated by {Melvin
	Conway}) that the organisation of software and the
	organisation of the software team will be congruent;
	originally stated as "If you have four groups working on a
	compiler, you'll get a 4-pass compiler".

	[{Jargon File}]

	(2015-12-30)

Conway's Life

	{Conway's Game of Life}

cooC

	{Concurrent Object-Oriented C}.

cooccurrence matrix

	<mathematics> Given a position operator P(i,j), let A be a nxn
	matrix whose element A[i][j] is the number of times that
	points with grey level (intensity) g[i] occur, in the position
	specified by P, relative to points with grey level g[j].  Let
	C be the nxn matrix that is produced by dividing A with the
	total number of point pairs that satisfy P.  C[i][j] is a
	measure of the joint probability that a pair of points
	satisfying P will have values g[i], g[j].  C is called a
	cooccurrence matrix defined by P.  Examples for the operator P
	are: "i above j", "i one position to the right and two below
	j", etc.

	(1995-05-11)

cookbook

	<programming> (From amateur electronics and radio) A book of
	small code segments that the reader can use to do various
	{magic} things in programs.

	One current example is the "{PostScript} Language Tutorial and
	Cookbook" by Adobe Systems, Inc (Addison-Wesley, ISBN
	0-201-10179-3), also known as the {Blue Book} which has
	recipes for things like wrapping text around arbitrary curves
	and making 3D fonts.

	Cookbooks, slavishly followed, can lead one into {voodoo
	programming}, but are useful for hackers trying to {monkey up}
	small programs in unknown languages.  This function is
	analogous to the role of phrasebooks in human languages.

	[{Jargon File}]

	(1994-11-04)

cooked mode

	The normal{Unix} character-input mode, with interrupts enabled
	and with erase, kill and other special-character
	interpretations performed directly by the tty driver.
	Opposite of {raw mode}.  See also {rare mode}.  Other
	operating systems often have similar mode distinctions, and
	the raw/rare/cooked way of describing them has spread widely
	along with the {C} language and other Unix exports.  Most
	generally, "cooked mode" may refer to any mode of a system
	that does extensive preprocessing before presenting data to a
	program.

	[{Jargon File}]

cookie

	1. <web> {HTTP cookie}.

	2. <protocol> A handle, transaction ID, or other token of
	agreement between cooperating programs.  "I give him a packet,
	he gives me back a cookie".

	The ticket you get from a dry-cleaning shop is an example of a
	cookie; the only thing it's useful for is to relate a later
	transaction to this one (so you get the same clothes back).

	Compare {magic cookie}; see also {fortune cookie}.

	3. <security, jargon> A {cracker} term for the {password} list
	on a {multi-user} computer.

	4. <jargon> An adjective describing a computer that just
	became {toast}.

	(1997-04-14)

cookie bear

	{cookie monster}

cookie file

	<operating system> A collection of {fortune cookies} in a
	format that facilitates retrieval by a {fortune} program.
	There are many cookie files in public distribution, and site
	admins often assemble their own from various sources.

	[{Jargon File}]

	(1997-01-07)

cookie jar

	1. <programming> An area of memory set aside for storing
	{cookies}.  Most commonly heard in the {Atari ST} community;
	many useful ST programs record their presence by storing a
	distinctive {magic number} in the jar.  Programs can inquire
	after the presence or otherwise of other programs by searching
	the contents of the jar.

	2. <security> A {cracker} term for the password file of a
	multi-user computer.

	[{Jargon File}]

	(1997-02-12)

cookie monster

	<recreation> (From the children's TV program "Sesame Street")
	Any of a family of early (1970s) hacks reported on {TOPS-10},
	{ITS}, {Multics} and elsewhere that would lock up either the
	victim's terminal (on a {time-sharing} machine) or the
	{console} (on a batch {mainframe}), repeatedly demanding "I
	WANT A COOKIE".  The required responses ranged in complexity
	from "COOKIE" through "HAVE A COOKIE" and upward.

	See also {wabbit}.

	[{Jargon File}]

	(1997-02-12)

cooky

	{cookie}

COOL

	1. {Concurrent Object-Oriented Language}.

	2. CLIPS Object-Oriented Language?

	3. A C++ class library developed at {Texas Instruments} that
	defines {containers} like {Vectors}, {List}, {Hash_Table},
	etc.  It uses a shallow hierarchy with no common {base class}.
	The functionality is close to {Common Lisp} data structures
	(like {libg++}).  The {template} {syntax} is very close to
	{Cfront} 3.x and {g++} 2.x.

	JCOOL's main difference from COOL and GECOOL is that it uses
	real C++ templates instead of a similar syntax that is
	preprocessed by a special 'cpp' distributed with COOL and
	GECOOL.

	{(ftp://csc.ti.com/pub/COOL.tar.Z)}.

	GECOOL, JCOOL: {(ftp://cs.utexas.edu/pub/COOL/)}.

	E-mail: Van-Duc Nguyen <nguyen@crd.ge.com>

	(1992-08-05)

CooL

	<language> Combined object-oriented Language.

	An {object-oriented} language from the {ITHACA} {Esprit}
	project, which combines {C}-based languages with {database}
	technology.

	(1995-03-15)

COOL:Gen

	{Advantage Gen}

Co-operative Development Environment

	<tool, product> (CDE) A set of tools from {Oracle} for
	enterprise-wide, {client/server} {application} development.

	(1995-03-15)

Cooperative Information System

	<networking> (CIS) Networked computers which support
	individual or collaborative human work, and manage access to
	information and computing services.  Computation is done
	{concurrent}ly over the network by cooperative {database}
	systems, {expert systems}, multi-agent planning systems, and
	other software application systems ranging from the
	conventional to the advanced.

	(1995-05-11)

cooperative multitasking

	<parallel, operating system> A form of {multitasking} where it
	is the responsibility of the currently running task to give up
	the processor to allow other tasks to run.  This contrasts
	with {pre-emptive multitasking} where the task {scheduler}
	periodically suspends the running task and restarts another.

	Cooperative multitasking requires the programmer to place
	calls at suitable points in his code to allow his task to be
	{deschedule}d which is not always easy if there is no obvious
	top-level {main loop} or some routines run for a long time.
	If a task does not allow itself to be descheduled all other
	tasks on the system will appear to "freeze" and will not
	respond to user action.

	The advantage of cooperative multitasking is that the
	programmer knows where the program will be descheduled and can
	make sure that this will not cause unwanted interaction with
	other processes.  Under {pre-emptive multitasking}, the
	scheduler must ensure that sufficient state for each process
	is saved and restored that they will not interfere.  Thus
	cooperative multitasking can have lower {overheads} than
	pre-emptive multitasking because of the greater control it
	offers over when a task may be descheduled.

	Cooperative multitasking is used in {RISC OS}, {Microsoft
	Windows} and {Macintosh} {System 7}.

	(1995-03-20)

coordinate

	<mathematics> One member of a {tuple} of numbers which defines
	the position of a point in some space.  Commonly used
	coordinate systems have as many coordinates as their are
	dimensions in the space, e.g. a pair for two dimensions.  The
	most common coordinate system is {Cartesian coordinates},
	probably followed by {polar coordinates}.

	(1997-07-09)

Coordinated Universal Time

	<time, standard> (UTC, World Time) The standard time common to
	every place in the world.  UTC is derived from {International
	Atomic Time} (TAI) by the addition of a whole number of "leap
	seconds" to synchronise it with {Universal Time} 1 (UT1), thus
	allowing for the eccentricity of the Earth's orbit, the
	rotational axis tilt (23.5 degrees), but still showing the
	Earth's irregular rotation, on which UT1 is based.

	Coordinated Universal Time is expressed using a 24-hour clock
	and uses the {Gregorian calendar}.  It is used in aeroplane
	and ship navigation, where it also sometimes known by the
	military name, "Zulu time".  "Zulu" in the phonetic alphabet
	stands for "Z" which stands for longitude zero.

	UTC was defined by the International Radio Consultative
	Committee ({CCIR}), a predecessor of the {ITU-T}.  CCIR
	Recommendation 460-4, or ITU-T Recommendation X.680 (7/94),
	contains the full definition.

	The language-independent international abbreviation, UTC, is
	neither English nor French.  It means both "Coordinated
	Universal Time" and "Temps Universel CoordonnÃ©".

	{BIPM
	(http://www.bipm.org/enus/5_Scientific/c_time/time_1.html)}.

	{The Royal Observatory Greenwich
	(http://rog.nmm.ac.uk/leaflets/time/time.html)}.

	{History of UTC and GMT
	(http://ecco.bsee.swin.edu.au/chronos/GMT-explained.html)}.

	{U.S. National Institute of Standards & Technology
	(http://its.bldrdoc.gov/fs-1037/dir-009/_1277.htm)}.

	{UK National Physical Laboratory
	(http://npl.co.uk/npl/ctm/time_scales.html)}.

	{US Naval Observatory
	(http://tycho.usno.navy.mil/systime.html)}.

	{International Telecommunications Union
	(http://itu.int/radioclub/rr/arts02.htm)}.

	{Earth's irregular rotation (/pub/misc/earth_rotation)}.

	(2001-08-30)

Coordinating Committee for Intercontinental Research Networks

	(CCIRN) A committee that includes the United States FNC and
	its counterparts in North America and Europe.  Co-chaired by
	the executive directors of the Federal Networking Council and
	the European Association of Research Networks (RARE), the
	CCIRN provides a forum for cooperative planning among the
	principal North American and European research networking
	bodies.

	(1994-11-30)

coordination language

	<networking, protocol> A language defined specifically to
	allow two or more parties ({components}) to communicate in
	order to accomplish some shared goal.

	Examples of coordination languages are {Linda} and {Xerox}'s
	{CLF} ({STITCH}).

	(2004-04-18)

copious free time

	<jargon> (Apple; originally from the introduction to Tom
	Lehrer's song "It Makes A Fellow Proud To Be A Soldier") Used
	ironically to indicate the speaker's lack of the quantity in
	question; a mythical schedule slot for accomplishing tasks
	held to be unlikely or impossible.  Sometimes used to indicate
	that the speaker is interested in accomplishing the task, but
	believes that the opportunity will not arise.  "I'll implement
	the automatic layout stuff in my copious free time."

	The phrase is also used for time reserved for bogus or
	otherwise idiotic tasks, such as implementation of bad
	{chrome}, or the stroking of {suits}.  "I'll get back to him
	on that feature in my copious free time."

	[{Jargon File}]

	(1994-11-30)

copper

	Conventional electrical network cable with a core conductor of
	copper (or aluminium!)

	Opposed to {light pipe} or, say, a short-range microwave link.

	[{Jargon File}]

	(1994-11-30)

Copper Distributed Data Interface

	(CDDI) {FDDI} running over conventional copper cables.  A
	{Cisco}/{Crescendo} copyright term(?).  All {FDDI}
	connections, {single-attached} or {dual-attached}, can be
	either {optical fibre} or copper.

	(1994-12-14)

coprocessor

	Any computer processor which assists the main processor (the
	"{CPU}") by performing certain special functions, usually much
	faster than the main processor could perform them in software.
	The coprocessor often decodes instructions in parallel with
	the main processor and executes only those instructions
	intended for it.

	The most common example is a {floating point} coprocessor (or
	"{FPU}"), others are graphics and networking.

	(1995-01-05)

copy and paste

	<text> (Or "cut and paste", after the paper, scissors and glue
	method of document production) The system supported by most
	document editing applications (e.g. {text editors}) and most
	{operating systems} that allows you to select a part of the
	document and then save it in a temporary buffer (known
	variously as the "clipboard", "cut buffer", "kill ring").  A
	"copy" leaves the document unchanged whereas a "cut" deletes
	the selected part.

	A "paste" inserts the data from the clipboard at the current
	position in the document (usually replacing any currently
	selected data).  This may be done more than once, in more than
	one position and in different documents.

	More sophisticated {operating systems} support copy and paste
	of different data types between different applications,
	possibly with automatic format conversion, e.g from {rich
	text} to plain {ASCII}.

	{GNU Emacs} uses the terms "kill" instead of "cut" and "yank"
	instead of "paste" and data is stored in the "kill ring".

	[Origin?  Macintosh?  Xerox?]

	(1998-07-01)

copybook

	<programming, library> (Or "copy member", "copy module") A
	common piece of {source code} designed to be copied into many
	source programs, used mainly in {IBM} {DOS} {mainframe}
	programming.

	In {mainframe} {DOS} (DOS/VS, DOS/{VSE}, etc.), the copybook
	was stored as a "book" in a {source} library.  A library was
	comprised of "books", prefixed with a letter designating the
	language, e.g., A.name for Assembler, C.name for Cobol, etc.,
	because {DOS} didn't support multiple libraries, private
	libraries, or anything.  This term is commonly used by {COBOL}
	programmers but is supported by most {mainframe} languages.
	The {IBM} {OS} series did not use the term "copybook", instead
	it referred to such files as "libraries" implemented as
	"partitioned data sets" or {PDS}.

	Copybooks are functionally equivalent to {C} and {C++}
	{include} files.

	(1997-07-31)

copybroke

	<security> /kop'ee-brohk/ (Or "copywronged" - a play on
	"{copyright}") 1. Used to describe an instance of a
	{copy-protected} program that has been "broken"; that is, a
	copy with the copy-protection scheme disabled or removed.

	2. Copy-protected software which is unusable because of some
	{bit-rot} or {bug} that has confused the {copy protection}.

	3. Used to describe data damaged because of a side effect of a
	copy protection system.

	[{Jargon File}]

	(1997-03-16)

copying garbage collection

	A {garbage collection} method where memory is divided into two
	equal halves, known as the "from space" and "to space".
	Garbage collection copies active cells from the from space to
	the to space and leaves behind an invisible pointer (an
	"indirection") from the old position to the new copy.  Once
	all active cells have been copied in one direction, the spaces
	are swapped and the process repeated in the opposite
	direction.

copyleft

	<legal> /kop'ee-left/ (A play on "copyright") The {copyright}
	notice and {General Public License} applying to the works of
	the {Free Software Foundation}, granting reuse and
	reproduction rights to everyone.

	Typically copyrights take away freedoms; copyleft preserves
	them.  It is a legal instrument that requires those who pass
	on a program to include the rights to use, modify, and
	redistribute the code; the code and the freedoms become
	legally inseparable.

	The copyleft used by the GNU Project combines a regular
	copyright notice and the "GNU General Public License" (GPL).
	The GPL is a copying license which basically says that you
	have the aforementioned freedoms.  The license is included in
	each GNU source code distribution and manual.

	See also {General Public Virus}.

	[{Jargon File}]

	(1995-04-18)

copy member

	{copybook}

copy module

	{copybook}

copy protection

	<security> Any technique designed to prevent unauthorised
	copying of software.  Such techniques will only hinder the
	most incompetant attempts at {software theft} but often
	prevent legitimate customers from using products they have
	paid for in the way they want.  Considered silly.

	[{Jargon File}]

	(2010-02-03)

copyright

	<legal> The exclusive rights of the owner of the copyright on
	a work to make and distribute copies, prepare derivative
	works, and perform and display the work in public (these last
	two mainly apply to plays, films, dances and the like, but
	could also apply to software).

	A work, including a piece of software, is under copyright by
	default in most coutries, whether of not it displays a
	copyright notice.  However, a copyright notice may make it
	easier to assert ownership.  The copyright owner is the person
	or company whose name appears in the copyright notice on the
	box, or the disk or the screen or wherever.  Most countries
	have agreed to uphold each others' copyrights.

	A copyright notice has three parts.  The first can be either the
	{copyright symbol} (a letter C in a circle), the word "Copyright"
	or the abbreviation "Copr".  Only the first of these is recognised
	internationally and the common {ASCII} rendering "(C)" is not
	valid anywhere.  This is followed by the name of the copyright
	holder and the year of publication.  The year should be the year
	of _first_ publication, it is not necessary as some believe to
	update this every year to the current year.  Copyright protection
	in most countries extends for 50 years after the author's death.

	Originally, most of the computer industry assumed that only
	the program's underlying instructions were protected under
	copyright law but, beginning in the early 1980s, a series of
	lawsuits involving the video screens of game programs extended
	protections to the appearance of programs.

	Use of copyright to restrict redistribution is immoral,
	unethical and illegitimate.  It is a result of brainwashing by
	monopolists and corporate interests and it violates everyone's
	rights.  Such use of copyrights and patents hamper
	technological progress by making a naturally abundant resource
	scarce.  Many, from communists to right wing libertarians, are
	trying to abolish intellectual property myths.

	See also {public domain}, {copyleft}, {software law}.

	{Universal Copyright Convention
	(http://www.unesco.org/new/en/culture/themes/creativity/creative-industries/copyright/)}.

	{US Copyright Office (http://copyright.gov/)}.

	{Usenet} newsgroup: {news:misc.legal.computing}.

	[Is this definition correct in the UK?  In the US?  Anywhere?]

	(2014-01-08)

copyright symbol

	<character, legal> "&copy;" The internationally recognised
	symbol required to introduce a {copyright} notice, a letter C
	with a circle around it.  This can be encoded in {ISO 8859-1}
	as character code decimal 169, hexadecimal A9, in {HTML} as
	&amp;copy;, &amp;#169; or &amp;#xA9;.

	A "c" in parentheses: "(c)" is sometimes used in documents
	stored in a {coded character set} such as {ASCII} that does
	not include the C in a circle, but this has no legal meaning.

	(2009-01-06)

copywronged

	{copybroke}

CORAL

	1. {Class Oriented Ring Associated Language}.

	2. A {deductive database} and {logic programming} system based
	on {Horn-clause} rules with extensions like {SQL}'s {group-by}
	and {aggregation} operators.  CORAL was developed at the
	University of Wisconsin-Madison.  It is implemented in C++ and
	has a {Prolog}-like {syntax}.

	Many evaluation techniques are supported, including {bottom-up
	fixpoint evaluation} and top-down {backtracking}.  {Modules}
	are separately compiled; different evaluation methods can be
	used in different modules within a single program.
	Disk-resident data is supported via an interface to the
	{Exodus} storage manager.  There is an on-line help facility.
	It requires {AT&T} {C++} 2.0 (or {G++} soon) and runs on
	{Decstation} and {Sun-4}.

	{(ftp://ftp.cs.wisc.edu/)}.

	(1993-01-29)

CORAL 66

	A real-time system programming language derived from {JOVIAL}
	and {ALGOL 60}.  It was adopted as the British military
	standard from 1970 until the arrival of {Ada}.

	["Official Definition of CORAL 66", P.M. Woodward et al, HMSO,
	London, 1970].

CORBA

	{Common Object Request Broker Architecture}

CORBIE

	<language> An early system on the {IBM 704}.

	[Listed in CACM 2(5):16, May 1959].

	(1996-05-10)

CORC

	CORnell Compiler.  Simple language for student math problems.

	["The Cornell Computing Language", R.W. Conway et al, CACM
	6(6):317-320 (Jun 1963) Sammet 1969, p.294-296].

core

	1. <storage> {Main memory} or {RAM}.  This term dates from the
	days of {ferrite core memory} and, like the technology, is now
	archaic.

	Some derived idioms outlived the hardware: for example, "in
	core" (meaning {paged in}), {core dump}, "core image", "core
	file".  Some varieties of Commonwealth hackish prefer {store}.

	[{Jargon File}]

	(2009-11-06)

	2. <processor> An {integrated circuit} design, usually for a
	{microprocessor}, which includes only the {CPU} and which is
	intended to be incorporated on a chiip with other circuits
	such as {cache}, {memory management unit}, I/O ports and
	timers.  The trend in 2009 is to have multiple cores per chip.

	The {ARM6}, {ARM7} and {ARM8} are early examples, the {Intel}
	{Core i9} more recent.

	3. <language> A varient on {kernel} as used to describe
	features built into a language as opposed to those provided by
	{libraries}.

	(2009-11-06)

core cancer

	<jargon> A process that exhibits a slow but inexorable
	{resource leak} - like a cancer, it kills by crowding out
	productive "tissue".

	[{Jargon File}]

	(1997-11-10)

core dump

	<programming, operating system, jargon> Common {Iron Age}
	jargon, preserved by {Unix} for a {memory dump}.

	The term is also used for a complete account of a human's
	knowledge on some subject (also {brain dump}), especially in a
	lecture or answer to an exam question.

	[{Jargon File}]

	(2007-05-09)

core gateway

	Historically, one of a set of gateways ({routers}) operated by
	the {Internet Network Operations Center} at Bolt, Beranek and
	Newman (BBN).  The core gateway system formed a central part
	of {Internet} routing in that all groups must advertise paths
	to their networks from a core gateway.

Corel Corporation

	<company> A software publisher best known for the {CorelDraw}
	{application}.  Founded in June 1985 by Dr. Michael Cowpland,
	Corel Corporation was originally a {systems integration}
	company.  In January 1989, however they entered the software
	publishing market with the introduction of CorelDraw.  Corel
	became the second largest maker of personal {productivity
	software} in January 1996 when they purchased the
	{WordPerfect} family of software from {Novell, Inc.}.

	{(http://corel.com/)}.

	(1997-03-12)

core leak

	{memory leak}

Corel VENTURA

	<text, graphics> (Previously "Ventura Publisher") The first
	full-featured {desktop publishing} program available for the
	{IBM personal computer} and compatibles.  Ventura Publisher
	was originally distributed by {Ventura}, a wholy owned
	subsiduary of {Xerox Corporation} but was acquired by {Corel
	Corporation} in September 1993.

	{Home
	(http://corelnet.com/products/graphicsandpublishing/ventura8/index.htm)}.

	(1999-04-05)

Core Protocol Stack

	<architecture>

	1. A portion of the {Web Services} {architecture} for
	defining and describing various {Web Services}.

	2. The architectural {protocol} layers of a {Bluetooth}
	{wireless} {communication} system, comprising the {Host
	Control Interface} (HCI), {Logical Link Control and Adaptation
	Protocol} (L2CAP), {RS232 Serial Cable Emulation Profile}
	(RFCOMM), {Service Discovery Protocol} (SDP), and {Object
	Exchange} (OBEX).

	(2002-06-28)

Core War

	<games> (Or more recently, "Core Wars") A game played between
	{assembly code} programs running in the {core} of a simulated
	machine (and vicariously by their authors).  The objective is
	to kill your opponents' programs by overwriting them.

	The programs are written using an {instruction set} called
	"{Redcode}" and run on a {virtual machine} called "{MARS}"
	(Memory Array Redcode Simulator).

	Core War was devised by Victor Vyssotsky, Robert Morris Sr.,
	and {Dennis Ritchie} in the early 1960s (their original game
	was called "{Darwin}" and ran on a {PDP-1} at {Bell Labs}).
	It was first described in the "Core War Guidelines" of March,
	1984 by D. G. Jones and A. K. Dewdney of the Department of
	Computer Science at The University of Western Ontario
	(Canada).

	Dewdney wrote several "Computer Recreations" articles in
	"Scientific American" which discussed Core War, starting with
	the May 1984 article.  Those articles are contained in the two
	anthologies cited below.  A.K. Dewdney's articles are still
	the most readable introduction to Core War, even though the
	{Redcode} dialect described in there is no longer current.

	The International Core War Society (ICWS) creates and
	maintains Core War standards and the runs Core War
	tournaments.  There have been six annual tournaments and two
	standards (ICWS'86 and ICWS'88).

	["The Armchair Universe: An Exploration of Computer Worlds",
	A. K. Dewdney, W. H. Freeman, New York, 1988, ISBN
	0-7167-1939-8, LCCN QA76.6 .D517 1988]

	["The Magic Machine: A Handbook of Computer Sorcery",
	A. K. Dewdney, W. H. Freeman, New York, 1990, ISBN
	0-7167-2125-2 (Hardcover), 0-7167-2144-9 (Paperback), LCCN
	QA76.6 .D5173 1990].

	(1998-10-30)

corge

	/korj/ Yet another {metasyntactic variable}, named after a cat
	invented by Mike Gallaher and propagated by the {GOSMACS}
	documentation.

	See {grault}.

	[{Jargon File}]

	(1994-12-08)

Cornell List Processor

	(CLP) A list processing language, an extension of {CORC}, used
	for {simulation}.

	[Sammet 1969, p. 461].

	(1994-11-01)

Cornell Theory Center

	(CTC) One of four supercomputing centers funded by the US
	{National Science Foundation}.  The CTC also receives funding
	from the {Advanced Research Projects Agency}, the National
	Institutes of Health, New York State, {IBM} Corporation, and
	other members of the center's Corporate Research Institute.

	{(http://tc.cornell.edu/)}.

	(1994-12-08)

Cornell University

	<body, education> A US Ivy League University founded in 1868
	by businessman Ezra Cornell and respected scholar Andrew
	Dickson White.  Cornell includes thirteen colleges and
	schools.  On the Ithaca campus are the seven undergraduate
	units and four graduate and professional units.  The Medical
	College and the Graduate School of Medical Sciences are in New
	York City.  Cornell has 13,300 undergraduates and 6,200
	graduate and professional students.

	See also {Concurrent ML}, {Cornell Theory Center}, {Cornell
	University Programming Language}, {CU-SeeMe}, {ISIS}.

	{(http://cornell.edu/)}.

	(1996-12-01)

Coroutine Pascal

	["Control Separation in Programming languages", Lemon et al,
	ACM Ann Conf 1977].

	(1994-12-08)

Corporation for National Research Initiatives

	<body> (CNRI) A US research and development organisation that
	leads and funds research and development of network-based
	information technology including the {National Information
	Infrastructure}.

	Address: Reston, VA, USA.

	{CNRI Home (http://cnri.reston.va.us/)}.

	(2004-08-27)

Corporation for Open Systems

	(COS) An international consortium of computer users and
	vendors set up to provide ways of testing {OSI}
	implementations.

	(1994-11-30)

Corporation for Research and Educational Networking

	<body> (CREN) The organisation responsible for providing
	networking service to {BITNET} and {CSNET} users.  CREN was
	formed in October 1989, when {BITNET} and {CSNET} were
	combined under one authority.  {CSNET} is no longer
	operational, but CREN still runs {BITNET}.

	[Still true?]

	(1996-05-17)

CORREGATE

	Based on {Internal Translator} (IT).

	[Sammet 1969, p. 139].

	(1994-11-30)

Correlatives and Conversions

	The {data description language} used in the {Pick} {operating
	system}.

	["Exploring the Pick Operating System", J.E. Sisk et al,
	Hayden 1986].

	(1994-11-30)

Cortex

	An experimental slow controls project at {CERN}.

	(1994-11-30)

CORTL

	An intermediate language, a form of {RTL}, by Carl McConnell
	<mcconnell@cs.uiuc.edu>.

	(1994-11-30)

COS

	1. {Cray Operating System}.

	2. {Corporation for Open Systems}.

COSE

	Common Open Software Environment.  An initiative by
	Hewlett-Packard, Sun, IBM, Novell, Univel and SCO to move
	toward consistency and interoperability between Unix
	suppliers.

COSINE

	Cooperation for Open Systems Interconnection Networking in
	Europe.  A EUREKA project.

cosmic rays

	Notionally, the cause of {bit rot}.  However, this is a
	semi-independent usage that may be invoked as a humorous way
	to {handwave} away any minor {randomness} that doesn't seem
	worth the bother of investigating.  "Hey, Eric - I just got
	a burst of garbage on my {tube}, where did that come from?"
	"Cosmic rays, I guess."  Compare {sunspots}, {phase of the
	moon}.  The British seem to prefer the usage "cosmic showers";
	"alpha particles" is also heard, because stray alpha particles
	passing through a memory chip can cause single bit errors
	(this becomes increasingly more likely as memory sizes and
	densities increase).

	Factual note: Alpha particles cause bit rot, cosmic rays do
	not (except occasionally in spaceborne computers).  Intel
	could not explain random bit drops in their early chips, and
	one hypothesis was cosmic rays.  So they created the World's
	Largest Lead Safe, using 25 tons of the stuff, and used two
	identical boards for testing.  One was placed in the safe, one
	outside.  The hypothesis was that if cosmic rays were causing
	the bit drops, they should see a statistically significant
	difference between the error rates on the two boards.  They
	did not observe such a difference.  Further investigation
	demonstrated conclusively that the bit drops were due to alpha
	particle emissions from thorium (and to a much lesser degree
	uranium) in the encapsulation material.  Since it is
	impossible to eliminate these radioactives (they are uniformly
	distributed through the earth's crust, with the statistically
	insignificant exception of uranium lodes) it became obvious
	that one has to design memories to withstand these hits.

	[{Jargon File}]

COSS

	{Common Object Services Specification} in {CORBA}.

cost control callback

	<communications> A system where a computer automatically
	rejects incoming {dial-up} calls from certain telephone
	numbers and calls them back, with the result that the caller
	pays nothing for the connection.  This differs from security
	{callback} in that it applies to certain phone numbers instead
	of to certain user names.

	(2003-07-13)

Cost Driver Attribute

	<programming> Factors affecting the productivity of software
	development.  These include attributes of the software,
	computers, personnel, and project.

	(1996-05-28)

Cost/Schedule Control System Criteria

	<project> (C/SCSC) A set of criteria specified by the Federal
	Government for reporting project schedule and financial
	information.

	(1996-05-29)

COTS

	<software> commercial off-the-shelf.  See {commercial software}.

	(2007-02-08)

Cougar

	<web, standard> A former (development) name for the
	{W3C}'s {HTML} 4 standard.

	(2001-02-06)

cough and die

	<jargon> {barf}.  Connotes that the program is throwing its
	hands up by design rather than because of a bug or oversight.
	"The parser saw a control-A in its input where it was looking
	for a printable, so it coughed and died."

	Compare {die}, {die horribly}, {scream and die}.

	[{Jargon File}]

	(1995-03-07)

count

	<programming> One of the built-in {aggregate functions} in
	{relational database} systems, that returns the number of rows
	in a result.  The argument to the function is nearly always
	"*", e.g.

	  SELECT COUNT(*) FROM books

	which returns the number of rows in the "books" table.  If,
	instead, we say

	  SELECT COUNT(publisher) FROM books

	then only rows with a non-{null} value in the "publisher"
	column will be counted.

	(2010-09-26)

countable

	<mathematics> A term describing a {set} which is {isomorphic}
	to a subet of the {natural numbers}.  A countable set has
	"countably many" elements.  If the isomorphism is stated
	explicitly then the set is called "a counted set" or "an
	{enumeration}".

	Examples of countable sets are any {finite} set, the {natural
	numbers}, {integers}, and {rational numbers}.  The {real
	numbers} and {complex numbers} are not [proof?].

	(1999-08-29)

countably many

	{countable}

counted

	<mathematics> A term describing a {set} with an explicit
	{isomorphism} to the {natural numbers}.

	Compare: {countable}.

	(1995-04-13)

counterbug

	<humour> A {bug} used as a relpy to refute another person's
	bug report, as in "counterargument".

	[{Dodgy Coder
	(http://www.dodgycoder.net/2011/11/yoda-conditions-pokemon-exception.html)}].

	(2012-10-24)

country code

	<networking, standard> Originally, a two-letter abbreviation
	for a particular country (or geographical region), generally
	used as a {top-level domain}.

	Originally country codes were just for countries; but country
	codes have been allocated for many areas (mostly islands) that
	aren't countries, such as Antarctica (aq), Christmas Island
	(cx) and Saint Pierre et Miquelon (pm).

	Country codes are defined in {ISO 3166} and are used as the
	top level domain for {Internet} {hostnames} in most countries
	but hardly ever in the USA (code "us").  ISO 3166 defines
	short and full english and french names, two- and three-letter
	codes and a three-digit code for each country.

	There are also {language codes}.

	{Latest list (http://www.iso.org/iso/en/prods-services/iso3166ma/02iso-3166-code-lists/list-en1.html)}.

	(2006-12-11)

coupling

	<programming, hardware> The degree to which components depend
	on one another.  There are two types of coupling, "tight" and
	"loose".  Loose coupling is desirable for good {software
	engineering} but tight coupling may be necessary for maximum
	performance.  Coupling is increased when the data exchanged
	between components becomes larger or more complex.

	(1996-08-01)

Course Author Language

	<language> (CAL) The {CAI} language for the {IBM 360}.

	["Design of a Programming Language for Computer Assisted
	Learning", F.M. Tonge, Proc IFIP Congress 1968, v2].

	(1994-11-08)

courseware

	<application> Programs and data used in {Computer-Based
	Training}.

	(1995-03-13)

Coursewriter III

	<language, education> A simple {CAI} language, developed
	around 1976.

	["Coursewriter III, Version 3 Author's Guide", SH20-1009,
	IBM].

	(1995-03-13)

cowboy

	[Sun, from William Gibson's {cyberpunk} SF]  Synonym
	for {hacker}.  It is reported that at Sun this word is often
	said with reverence.

	[{Jargon File}]

COWSEL

	COntrolled Working SpacE Language.  Burstall and Popplestone,
	U Edinburgh, 1964-66.  LISP-like semantics with FORTH-like
	stack, and reverse Polish syntax.  Forerunner of POP.
	EPU-R-12, U Edinburgh (Apr 1966).

CP

	A concurrent Prolog.

	"The Concurrent Logic Programming Language CP": Definition and
	Operational Semantics", V. Saraswat, 14th POPL, ACM 1987,
	pp.49-62.

CPAN

	{Comprehensive Perl Archive Network}

CParaOps5

	<language> A {parallel} version of {OPS5} written at CMU, in
	{C} and compiling to C.  CParaOps5 is available for {Unix},
	{Mach}, {Encore Multimaxen}, and {Sequent}.

	{(http://cs.ucsb.edu/~acha/software.html)}.

	(1999-08-30)

CPE

	{Customer Premises Equipment}

CPGA

	{Ceramic Pin Grid Array}

CPI

	{Common Program Interface}

CPL

	Combined Programming Language.  U Cambridge and U London.  A
	very complex language, syntactically based on ALGOL 60, with a
	pure functional subset.  Provides the ..where.. form of local
	definitions.  Strongly typed but has a "general" type enabling
	a weak form of polymorphism.  Functions may be defined as
	either normal or applicative order.  Typed array and
	polymorphic list structures.  List selection is through
	structure matching.  Partially implemented on the Titan (Atlas
	2) computer at Cambridge.  Led to the much simpler BCPL.  "The
	Main Features of CPL", D.W. Barron et al, Computer J
	6(2):134-143 (Jul 1963).

CPLD

	{complex programmable logic device}

CPM

	{Control Program for Microcomputers}

CP/M

	{Control Program for Microcomputers}

cpo

	{complete partial ordering}

cpp

	{C preprocessor}.

cppp

	<tool> A compiler {front-end} for {C++} by Tony Davis
	<ted@cs.brown.edu> with complete semantic processing.  cppp is
	based on {Yacc} and outputs an {abstract syntax graph}.
	Version: 1.14.

	{(ftp://wilma.cs.brown.edu/pub/cppp.tar.Z)}.

	(1993-05-26)

C preprocessor

	<tool, programming> (cpp) The standard {Unix}
	{macro}-expansion utility run as the first phase of the {C}
	compiler, {cc}.  Cpp interprets lines beginning with "#" such
	as

		#define BUFFER_SIZE 256

	as a textual {assignment} giving the symbol BUFFER_SIZE a
	value "256".  Symbols defined with cpp are traditionally given
	upper case names to distinguish them from C identifiers.  This
	symbol can be used later in the input, as in

		char input_buffer[BUFFER_SIZE];

	This use of cpp to name constants, rather than writing these
	{magic numbers} inline, makes a program easier to read and
	maintain, especially if there is more than one occurrence of
	BUFFER_SIZE all of which must all have the same value.

	Cpp macros can have parameters:

		#define BIT(n) (1<<(n))

	This can be used with any appropriate actual argument:

		msb = BIT(nbits-1);

	Note the parentheses around the "n" in the definition of BIT.
	Without these, operator precedence might mean that the
	expression substituted in place of n might not be interpreted
	correctly (though the example above would be OK).

	Cpp also supports conditional compilation with the use of

		#ifdef SYMBOL
		...
		#else
		...
		#endif
	and
		#if EXPR
		...
		#else
		...
		#endif

	constructs, where SYMBOL is a Cpp symbol which may or may not
	be defined and EXPR is an arithmetic expression involving only
	Cpp symbols, constants and C operators which Cpp can evaluate
	to a constant at {compile time}.

	{Decus cpp} is a free implementation for {VMS}.

	The most widely used C preprocessor today is the {GNU} CPP,
	distributed as part of {GCC}.

	(2001-12-31)

C Programmer's Disease

	<programming> The tendency of the undisciplined {C} programmer
	to set arbitrary but supposedly generous static limits on
	table sizes (defined, if you're lucky, by constants in header
	files) rather than taking the trouble to do proper dynamic
	storage allocation.  If an application user later needs to put
	68 elements into a table of size 50, the afflicted programmer
	reasons that he or she can easily reset the table size to 68
	(or even as much as 70, to allow for future expansion) and
	recompile.  This gives the programmer the comfortable feeling
	of having made the effort to satisfy the user's (unreasonable)
	demands, and often affords the user multiple opportunities to
	explore the marvellous consequences of {fandango on core}.  In
	severe cases of the disease, the programmer cannot comprehend
	why each fix of this kind seems only to further disgruntle the
	user.

	[{Jargon File}]

	(2001-12-31)

C-Prolog

	<language, Prolog> An implementation of {Prolog} in {C},
	developed by F. Pereira <pereira@research.att.com> et al in
	July 1982.  It had no {garbage collection}.

	It is not in the {public domain}.

	(1994-10-13)

cproto

	<programming, tool> A translator , written by Chin Huang at
	canrem.com, that generates {ANSI C} {function prototypes} from
	{K&R} {C} function definitions.  It can also translate
	function definition heads between {K&R} style and {ANSI C}
	style.

	Posted to {comp.sources}.misc, volume 29.  Runs under {Unix},
	{MS-DOS}.

	(1992-07-18)

CPS

	1. Conversational Programming System.  An interactive extended
	subset of {PL/I} from {Allen-Babcock} Corp in 1965.

	["Conversational Programming System under TSO (PBPO), Terminal
	User's Manual", SH20-1197, IBM].

	[Sammet 1969, p. 232-240].

	2. {Continuation Passing Style}.

CPSR

	{Computer Professionals for Social Responsibility}

CPU

	{central processing unit}

CPU Info Center

	<processor> An old {website} at the {University of
	California at Berkeley} describing many different computers
	and their performance.

	{(http://bwrc.eecs.berkeley.edu/CIC/)}.

	(2000-01-12)

CPU time

	{processor time}

CPU Wars

	/C-P-U worz/ A 1979 large-format comic by Chas Andres
	chronicling the attempts of the brainwashed androids of IPM
	(Impossible to Program Machines) to conquer and destroy the
	peaceful denizens of HEC (Human Engineered Computers).  This
	rather transparent allegory featured many references to
	{ADVENT} and the immortal line "Eat flaming death,
	minicomputer mongrels!" (uttered, of course, by an IPM
	stormtrooper).  It is alleged that the author subsequently
	received a letter of appreciation on IBM company stationery
	from the head of IBM's Thomas J. Watson Research Laboratories
	(then, as now, one of the few islands of true hackerdom in the
	IBM archipelago).  The lower loop of the B in the IBM logo, it
	is said, had been carefully whited out.  See {eat flaming
	death}.

	[{Jargon File}]

CR

	{Carriage Return}

cr

	<networking> The {country code} for Costa Rica.

	(1999-01-27)

cracker

	<jargon> An individual who attempts to gain unauthorised
	access to a computer system.  These individuals are often
	malicious and have many means at their disposal for breaking
	into a system.  The term was coined ca. 1985 by hackers in
	defence against journalistic misuse of "{hacker}".  An earlier
	attempt to establish "worm" in this sense around 1981--82 on
	{Usenet} was largely a failure.

	Use of both these neologisms reflects a strong revulsion
	against the theft and vandalism perpetrated by cracking rings.
	The neologism "cracker" in this sense may have been influenced
	not so much by the term "safe-cracker" as by the non-jargon
	term "cracker", which in Middle English meant an obnoxious
	person (e.g., "What cracker is this same that deafs our ears /
	With this abundance of superfluous breath?"  -- Shakespeare's
	King John, Act II, Scene I) and in modern colloquial American
	English survives as a barely gentler synonym for "white
	trash".

	While it is expected that any real hacker will have done some
	playful cracking and knows many of the basic techniques,
	anyone past {larval stage} is expected to have outgrown the
	desire to do so except for immediate practical reasons (for
	example, if it's necessary to get around some security in
	order to get some work done).

	Contrary to widespread myth, cracking does not usually involve
	some mysterious leap of hackerly brilliance, but rather
	persistence and the dogged repetition of a handful of fairly
	well-known tricks that exploit common weaknesses in the
	security of target systems.  Accordingly, most crackers are
	only mediocre hackers.

	Thus, there is far less overlap between hackerdom and
	crackerdom than the {mundane} reader misled by
	sensationalistic journalism might expect.  Crackers tend to
	gather in small, tight-knit, very secretive groups that have
	little overlap with the huge, open hacker poly-culture; though
	crackers often like to describe *themselves* as hackers, most
	true hackers consider them a separate and lower form of life,
	little better than {virus} writers.  Ethical considerations
	aside, hackers figure that anyone who can't imagine a more
	interesting way to play with their computers than breaking
	into someone else's has to be pretty {losing}.

	See also {Computer Emergency Response Team}, {dark-side
	hacker}, {hacker ethic}, {phreaking}, {samurai}, {Trojan
	horse}.

	[{Jargon File}]

	(1998-06-29)

cracking

	{cracker}

crack root

	<security, jargon> To defeat the security system of a {Unix}
	machine and gain {root} privileges thereby.  The sort of thing
	a {cracker} wants to do.

	[{Jargon File}]

	(2010-02-04)

crank

	(Automotive slang) Verb used to describe the performance of a
	machine, especially sustained performance.  "This box cranks
	(or, cranks at) about 6 megaflops, with a burst mode of twice
	that on vectorised operations."

	[{Jargon File}]

	(1994-12-01)

crapplet

	<web, abuse> A badly written or profoundly useless
	{Java} {applet}.  "I just wasted 30 minutes downloading this
	stinkin' crapplet!"

	(1997-03-30)

CrApTeX

	/krap'tekh/ (University of York, England) Term of abuse used
	to describe {TeX} and {LaTeX} when they don't work (when used
	by TeXhackers), or all the time (by everyone else).  The
	non-TeX enthusiasts generally dislike it because it is more
	verbose than other formatters (e.g. {troff}) and because
	(particularly if the standard Computer Modern fonts are used)
	it generates vast output files.

	See {religious issues}.

	[{Jargon File}]

	(1994-12-01)

crash

	1. A sudden, usually drastic failure.  Most often said of the
	{system}, especially of magnetic disk drives (the term
	originally described what happened when the air gap of a hard
	disk collapses).  "Three {lusers} lost their files in last
	night's disk crash."  A disk crash that involves the
	read/write heads dropping onto the surface of the disks and
	scraping off the oxide may also be referred to as a "head
	crash", whereas the term "system crash" usually, though not
	always, implies that the operating system or other software
	was at fault.

	2. To fail suddenly.  "Has the system just crashed?"
	"Something crashed the OS!" See {down}.  Also used
	transitively to indicate the cause of the crash (usually a
	person or a program, or both).  "Those idiots playing
	{SPACEWAR} crashed the system."

	[{Jargon File}]

	(1994-12-01)

crash and burn

	<jargon> A spectacular crash, in the mode of the conclusion of
	the car-chase scene in the movie "Bullitt" and many subsequent
	imitators (compare {die horribly}).  A {Sun-3} {display
	screen} losing the flyback transformer and lightning strikes
	on {VAX-11/780} backplanes are notable crash and burn
	generators.

	The construction "crash-and-burn machine" is reported for a
	computer used exclusively for alpha or {beta} testing, or
	reproducing bugs (i.e. not for development).  The implication
	is that it wouldn't be such a disaster if that machine
	crashed, since only the testers would be inconvenienced.

	[{Jargon File}]

	(1996-02-22)

crawler

	{robot}

crawling horror

	<jargon> Ancient {crufty} hardware or software that is kept
	obstinately alive by forces beyond the control of the hackers
	at a site.  Like {dusty deck} or {gonkulator}, but connotes
	that the thing described is not just an irritation but an
	active menace to health and sanity.  "Mostly we code new stuff
	in C, but they pay us to maintain one big Fortran II
	application from nineteen-sixty-X that's a real crawling
	horror."

	Compare {WOMBAT}.

	[{Jargon File}]

	(1994-12-01)

Cray instability

	A shortcoming of a program or {algorithm} that manifests
	itself only when a large problem is being run on a powerful
	machine such as a {Cray}.  Generally more subtle than {bugs}
	that can be detected in smaller problems running on a
	{workstation} or {minicomputer}.

	[{Jargon File}]

	(1994-10-13)

crayola

	/kray-oh'l*/ A {super-minicomputer} or {super-microcomputer}
	that provides some reasonable percentage of {supercomputer}
	performance for an unreasonably low price.  A crayola might
	also be a {killer micro}.

	[{Jargon File}]

	(1994-10-13)

crayola books

	<publication> A humorous and/or disparaging term for the
	{rainbow series} of National Computer Security Center (NCSC)
	computer security standards.

	See also {Orange Book}.

	[{Jargon File}]

	(1996-12-03)

crayon

	1. Someone who works on {Cray} {supercomputers}.  More
	specifically, it implies a programmer, probably of the {CDC}
	ilk, probably male, and almost certainly wearing a tie
	(irrespective of gender).  Systems types who have a {Unix}
	background tend not to be described as crayons.

	2. A {computron} that participates only in {number crunching}.

	3. A unit of computational power equal to that of a single
	{Cray-1}.  There is a standard joke about this usage that
	derives from an old Crayola crayon promotional gimmick: When
	you buy 64 crayons you get a free sharpener.

	[{Jargon File}]

	(1994-10-13)

Cray Research, Inc.

	<company> US manufacturer of large powerful {mainframe}
	{supercomputers}, co-founded by noted computer architect,
	{Seymour Cray}.

	Quarterly sales $216M, profits $8M (Aug 1994).

	Cray were bought by {Silicon Graphics, Inc.}.

	[More details?]

	(1999-10-19)

CRC

	{cyclic redundancy check}

creationism

	The (false) belief that large, innovative software designs can
	be completely specified in advance and then painlessly
	magicked out of the void by the normal efforts of a team of
	normally talented programmers.  In fact, experience has shown
	repeatedly that good designs arise only from evolutionary,
	exploratory interaction between one (or at most a small
	handful of) exceptionally able designer(s) and an active user
	population - and that the first try at a big new idea is
	always wrong.  Unfortunately, because these truths don't fit
	the planning models beloved of {management}, they are
	generally ignored.

	[{Jargon File}]

creeping elegance

	Describes a tendency for parts of a design to become {elegant}
	past the point of diminishing return, something which often
	happens at the expense of the less interesting parts of the
	design, the schedule, and other things deemed important in the
	{Real World}.  See also {creeping featurism}, {second-system
	effect}, {tense}.

creeping featurism

	<jargon> /kree'ping fee'chr-izm/ (Or "feature creep") A
	systematic tendency to load more {chrome} and {features} onto
	systems at the expense of whatever elegance they may have
	possessed when originally designed.  "The main problem with
	{BSD} Unix has always been creeping featurism."

	More generally, creeping featurism is the tendency for
	anything to become more complicated because people keep saying
	"Gee, it would be even better if it had this feature too".
	The result is usually a patchwork because it grew one ad-hoc
	step at a time, rather than being planned.  Planning is a lot
	of work, but it's easy to add just one extra little feature to
	help someone, and then another, and another, ....  When
	creeping featurism gets out of hand, it's like a cancer.

	Usually this term is used to describe computer programs, but
	it could also be said of the federal government, the IRS 1040
	form, and new cars.  A similar phenomenon sometimes afflicts
	conscious redesigns; see {second-system effect}.  See also
	{creeping elegance}.

	[{Jargon File}]

	(1997-08-03)

creeping featuritis

	<jargon> /kree'ping fee'-chr-i:`t*s/ A variant of {creeping
	featurism}, with its own spoonerism: "feeping creaturitis".
	Some people like to reserve this form for the disease as it
	actually manifests in {software} or {hardware}, as opposed to
	the lurking general tendency in designers' minds.  -ism means
	"condition" or "pursuit of", whereas -itis usually means
	"inflammation of".

	[{Jargon File}]

	(1997-08-03)

C-Refine

	A {preprocessor} for {C} and languages with similar syntax by
	Lutz Prechelt <prechelt@ira.uka.de>.  C-Refine allows symbolic
	naming of code fragments so as to redistribute complexity and
	provide running commentary.

	Version 3.0 is available from comp.sources.reviewed archives.
	It is highly portable and has been ported to {Unix}, {MS-DOS},
	{Atari}, {Amiga}.

	{(ftp://ftp.uu.net/usenet/comp.sources.reviewed/volume02/crefine)}.

	(1992-07-16)

CREN

	{Corporation for Research and Educational Networking}

CREW PRAM

	concurrent read, exclusive write {PRAM}.

crippleware

	1. Software that has some important functionality deliberately
	removed, so as to entice potential users to pay for a working
	version.

	2. (Cambridge) {Guiltware} that exhorts you to donate to some
	charity.

	Compare {careware}, {nagware}.

	3. Hardware deliberately crippled, which can be upgraded to a
	more expensive model by a trivial change (e.g. removing a
	jumper).  A correspondant gave the following example:

	In 1982-5, a friend had a {Sharp} {scientific calculator}
	which was on the list of those permitted in exams.  No
	programmable calculators were allowed.

	A very similar, more expensive, programmable model had two
	extra keys for programming where the cheaper version just had
	blank metal.

	My friend took his calculator apart (as you would) and lo and
	behold, the rubber switches of the program keys were there on
	the circuit board.  So all he had to do was cut a hole in the
	face.  For exams he would pre-load the calculator with any
	useful routines, put a sticker with his name on it over the
	hole, and press the buttons through the sticker with a pen.

	[{Jargon File}]

	(2001-05-12)

criptography

	<spelling> It's spelled "{cryptography}".

	(1996-12-13)

Crisis Software

	A small UK company producing {software} for the {Acorn}
	{Archimedes} range of computers.

	{(http://dcs.warwick.ac.uk/~phid/Crisis/)}.

	(1994-11-10)

CRISP

	A {Lisp}-like language and {compiler} for the {IBM 370}
	written by Jeff Barnett of SDC, Santa Monica, CA, USA in the
	early 1970s.  It generalised {Lisp}'s two-part {cons nodes} to
	n-part nodes.

	(1994-11-10)

crisp

	(Or "discrete") The opposite of "{fuzzy}".

	(1994-12-23)

Crispy Critters

	<jargon> (Or "Crispy Crittered".  From the "Post" breakfast
	cereal of the same name) {hardware} which is {fried} or
	{toast}.

	(1995-01-31)

critical mass

	In physics, the minimum amount of fissionable material
	required to sustain a chain reaction.  Of a software product,
	describes a condition of the software such that fixing one bug
	introduces one plus {epsilon} bugs.  (This malady has many
	causes: {creeping featurism}, ports to too many disparate
	environments, poor initial design, etc.)  When software
	achieves critical mass, it can never be fixed; it can only be
	discarded and rewritten.

	[{Jargon File}]

	(1994-12-23)

critical section

	A non-{re-entrant} piece of code that can only be executed by
	one process at a time.  It will usually terminate in bounded
	time and a process will only have to wait a bounded time to
	enter it.  Some synchronisation mechanism is required at the
	entry and exit of the critical section to ensure exclusive
	use.

CRL

	Carnegie Representation Language.

	{Carnegie Group, Inc.}  Frame language derived from SRL.
	Written in Common LISP.  Used in the product Knowledge Craft.

CRLF

	<character> /ker'l*f/, sometimes /kru'l*f/ or /C-R-L-F/ A
	{carriage return} (CR, {ASCII} 13) followed by a {line feed}
	(LF, {ASCII} 10).  Under {Unix} influence this usage has
	become less common because Unix uses just line feed as its
	line terminator.

	See {newline}, {terpri}.

	[{Jargon File}]

	(1995-03-27)

CRM

	1. <business> {Customer Relationship Management}.

	2. <networking> {Cisco Resource Manager}.

crock

	[American scatologism "crock of shit"] 1. An awkward feature
	or programming technique that ought to be made cleaner.  For
	example, using small integers to represent error codes without
	the program interpreting them to the user (as in, for example,
	Unix "make(1)", which returns code 139 for a process that dies
	due to {segfault}).

	2. A technique that works acceptably, but which is quite prone
	to failure if disturbed in the least.  For example, a
	too-clever programmer might write an assembler which mapped
	{instruction mnemonics} to numeric {opcodes}
	{algorithm}ically, a trick which depends far too intimately on
	the particular bit patterns of the opcodes.  (For another
	example of programming with a dependence on actual opcode
	values, see {The Story of Mel}.)  Many crocks have a tightly
	woven, almost completely unmodifiable structure.  See {kluge},
	{brittle}.  The adjectives "crockish" and "crocky", and the
	nouns "crockishness" and "crockitude", are also used.

	[{Jargon File}]

cron

	<operating system> The Unix clock {daemon} that executes
	commands at specified dates and times according to
	instructions in a "crontab" file.

	{Unix manual page}: cron(8).

	(1997-04-10)

cross-assembler

	An {assembler} which runs on one type of processor and
	produces {machine code} for another.

	There is a set of {6502}, 68xx and {Zilog Z80} and {8085}
	cross-assemblers in {C} by <msmakela@cc.helsinki.fi> and Alan
	R. Baldwin.  They run under {MS-DOS} and could be compiled to
	run under {Unix} and on the {Amiga} and {Atari ST}.

	See also {fas}.

	{(ftp://ccosun.caltech.edu/)}.

	(1993-03-10)

cross-compiler

	<programming> A {compiler} which runs on one {platform} and
	produces code for another, as opposed to a {native} code
	compiler which produces code for the platform on which it
	runs.

	(1998-02-24)

cross-platform

	<software, hardware> A term that describes a language,
	software application or hardware device that works on more
	than one system {platform} (e.g. {Unix}, {Microsoft Windows},
	{Macintosh}).  E.g. {Netscape Navigator}, {Java}.

	(1998-02-24)

cross-post

	[{Usenet}] To post a single article simultaneously to several
	{newsgroups}.  Distinguished from posting the article
	repeatedly, once to each newsgroup, which causes people to see
	it multiple times (which is very bad form).  Gratuitous
	cross-posting without a Followup-To line directing responses
	to a single followup group is frowned upon, as it tends to
	cause {followup} articles to go to inappropriate newsgroups
	when people respond to only one part of the original posting.

	[{Jargon File}]

cross software

	Software developed on one kind of computer for use on another
	(usually because the other computer does not have itself
	adequate facilities for software development).

CROSSTABS

	Simple language for statistical analysis of tabular data.
	"User's Manual for the CROSSTABS System", Cambridge Computer
	Assoc (Feb 1977).

crosstalk

	<electronics> Interference caused by two signals becoming
	partially superimposed on each other due to electromagnetic
	(inductive) or electrostatic (capacitive) coupling between the
	conductors carrying the signals.  A common example of
	crosstalk is where the magnetic field from changing current
	flow in one wire induces current in another wire running
	parallel to the other, as in a transformer.  Crosstalk can be
	reduced by using shielded cables and increasing the distance
	between conductors.

	(1995-12-20)

CROW PRAM

	concurrent read, owner write {PRAM}.

CRT

	{cathode ray tube}

CRUD

	<programming, testing> A mnemonic for the four most important
	kinds of activity that almost any system of any type needs to
	support: create, read, update, delete.  The absence or failure of
	any one of these is often a sign of a bad design or poor testing.

	(2014-08-06)

crudware

	/kruhd'weir/ Pejorative term for the hundreds of megabytes of
	low-quality {freeware} circulated by user's groups and {BBSs}
	in the micro-hobbyist world.

	[{Jargon File}]

cruft

	<jargon> (back-formation from "crufty") Anything unpleasant
	that accumulates over time.  Also used as a verb, as in {cruft
	together}, {hand cruft}.

	[{Jargon File}]

	(2006-01-19)

crufted

	{cruft}

cruft together

	<jargon> To {hack together} though with the suggestion that
	the result may be {cruft}.

	[{Jargon File}]

	(2006-01-19)

crumb

	<data, jargon> (Or tayste /tayst/) Silly suggested term for
	two {binary digits}.

	The term "quarter" has also been suggested, referring to the
	US 25-cent coin.  This was once equal in value to two of the
	eight "bits" - pie-slice-shaped "pieces of eight" - into which
	Spanish silver crowns were cut to make change.

	[{Jargon File}]

	(2007-05-31)

crunch

	1. <jargon> To process, usually in a time-consuming or
	complicated way.  Connotes an essentially trivial operation
	that is nonetheless painful to perform.  The pain may be due
	to the triviality's being embedded in a loop from 1 to
	1,000,000,000.  "Fortran programs do mostly {number
	crunching}."

	2. <compression> To reduce the size of a file without losing
	information by a scheme such as {Huffman coding}.  Since such
	{lossless compression} usually takes more computations than
	simpler methods such as {run-length encoding}, the term is
	doubly appropriate.

	3. The {hash character}.  Used at {XEROX} and {CMU}, among
	other places.

	4. To squeeze program source to the minimum size that will
	still compile or execute.  The term came from a {BBC
	Microcomputer} program that crunched {BBC BASIC} {source} in
	order to make it run more quickly (apart from storing
	{keywords} as byte codes, the language was wholly interpreted,
	so the number of characters mattered).  {Obfuscated C Contest}
	entries are often crunched; see the first example under that
	entry.

	[{Jargon File}]

	(2007-11-12)

cruncha cruncha cruncha

	<jargon> /kruhn'ch* kruhn'ch* kruhn'ch*/ An encouragement
	sometimes muttered to a machine bogged down in a serious
	{grovel}.  Also describes a notional sound made by grovelling
	hardware.

	See {grind} (sense 3).

	(2003-06-02)

crunchy

	{floppy disk}

cryppie

	<job, cryptography> /krip'ee/ A cryptographer.  One who hacks
	or implements software or hardware for {cryptography}.

	[{Jargon File}]

	(1996-08-23)

crypt

	{Unix} command to perform {encryption} and {decryption}.

cryptanalysis

	The branch of {cryptography} concerned with decoding encrypted
	messages when you're not supposed to be able to.

	(1994-12-06)

Crypt Breakers Workbench

	(cbw) A freely distributable multi-window integrated workbench
	of tools for {cryptanalysis} of files encrypted with the
	{4.2BSD} {Unix} {crypt} command.  It was originally written by
	Robert W. Baldwin at {MIT}.

	{(ftp://black.ox.ac.uk/src/security)},
	{(ftp://scitsc.wlv.ac.uk/pub/infomagic/usenet.cdrom/sources/unix/volume10)},
	{(ftp://ftp.sunet.se/pub/usenet/comp.sources.unix/volume10)}.

	(1994-12-06)

cryptography

	<cryptography> The practise and study of {encryption} and
	{decryption} - encoding data so that it can only be decoded by
	specific individuals.  A system for encrypting and decrypting
	data is a cryptosystem.  These usually involve an {algorithm}
	for combining the original data ("{plaintext}") with one or
	more "keys" - numbers or strings of characters known only to
	the sender and/or recipient.  The resulting output is known as
	"{ciphertext}".

	The security of a cryptosystem usually depends on the secrecy
	of (some of) the keys rather than with the supposed secrecy of
	the {algorithm}.  A strong cryptosystem has a large range of
	possible keys so that it is not possible to just try all
	possible keys (a "{brute force}" approach).  A strong
	cryptosystem will produce ciphertext which appears random to
	all standard statistical tests.  A strong cryptosystem will
	resist all known previous methods for breaking codes
	("{cryptanalysis}").

	See also {cryptology}, {public-key encryption}, {RSA}.

	{Usenet} newsgroups: {news:sci.crypt},
	{news:sci.crypt.research}.

	{FAQ} {MIT
	(ftp://rtfm.mit.edu/pub/usenet/news.answers/cryptography-faq/)}.

	{Cryptography glossary
	(http://io.com/~ritter/GLOSSARY.HTM#BruteForceAttack)}.

	{RSA cryptography glossary
	(http://rsasecurity.com/rsalabs/faq/glossary.html)}.

	{Cryptography, PGP, and Your Privacy
	(http://draco.centerline.com:8080/~franl/crypto.html)}.

	(2000-01-16)

CryptoLocker

	<security> The best known example of the kind of {malware} known
	as {ransomware}.  CryptoLocker {encrypts} files on your computer
	and then demands that you send the malware operator money in order
	to have the files decrypted.

	According to FBI estimates, CryptoLocker had more than 500,000
	victims between September 2013 and May 2014.  Around 1.3 percent
	paid to free their files, earning the malware makers around $3
	million.  The criminal network was smashed by authorities and
	security researchers in May 2014 and a tool put online to decryt
	victim's files for free.

	{(http://thehackernews.com/2014/08/CryptoLocker-Decryption-Keys-Tool.html)}.

	(2015-01-22)

cryptology

	<cryptography> The study of {cryptography} and {cryptanalysis}.

	(1994-12-06)

Crystal

	Concurrent Representation of Your Space-Time ALgorithms.

	A {recursion equation} parallel language.

	["A Parallel Language and its Compilation to Multiprocessor
	Machines or VLSI", M.C. Chen, 13th POPL, ACM 1986 pp.131-139].

	(1994-12-06)

CS-4

	["CS-4 Language Reference Manual and Operating System
	Interface", Ben M. Brosgol et al, Report IR-130-2,
	Intermetrics, Cambridge MA, Oct 1975].

	(1995-01-19)

C-Scheme

	{MIT Scheme}

CSCI

	{Computer Software Configuration Item}

C/SCSC

	{Cost/Schedule Control System Criteria}

CSCW

	{Computer Supported Cooperative Work}

CSG

	{constructive solid geometry}

CSG-tree

	<graphics> (Or "status tree"?) An approach used in {ray
	tracing} to evaluate {constructive solid geometry} structures.

	[Better explanation?  "Evaluate"?]

	(1998-06-09)

csh

	{C shell}

C-sharp

	{C#}

C shell

	<operating system> (csh) The {Unix} {command-line interpreter}
	{shell} and {script language} by {William Joy}, originating
	from {Berkeley} {Unix}.

	{Unix} systems up to around {Unix Version 7} only had one
	shell - the {Bourne shell}, sh.  Csh had better {interactive}
	features, notably command input {history}, allowing earlier
	commands to be recalled and edited (though it was still not as
	good as the {VMS} equivalent of the time).

	Presumably, csh's {C}-like {syntax} was intended to endear it
	to programmers but sadly it lacks some {sh} features which are
	useful for writing {shell scripts} so you need to know two
	different syntaxes for every shell construct.

	A plethora of different shells followed csh, e.g. {tcsh},
	{ksh}, {bash}, {rc}, but sh and csh are the only ones which
	are provided with most versions of Unix.

	(1998-04-04)

CSID

	{character set identifier}

C++SIM

	A {class} library like the {simulation} class libraries of
	{SIMULA}, by Mark Little <M.C.Little@newcastle.ac.uk>.
	Version: 1.0.

	{(ftp://arjuna.ncl.ac.uk/)}.

	(1993-06-04)

CSK Corporation

	<company> The japanese company that owns {CSK Software} and
	{Sega}.  CSK Corp. is the largest independent japanese
	software company.

	(2003-05-13)

CSK Software

	<company> An international software company formed by the
	merger of {Quay Financial Software} and {Micrognosis}, and
	fully owned by {CSK Corporation}, Japan.

	CSK Software is based in Frankfurt/Main (Germany) with offices
	in London (UK), Zurich (Switzerland), Madrid (Spain), and
	Singapore.  Products segments are RDD: Real-time data
	delivery, main product is {Slingshot} for delivering real-time
	data over the Internet (real push technology).  ETS:
	Electronic Trading Systems, price calculation and automatic
	trading (with connections to {XONTRO} and {XETRA}).  EAI:
	{Enterprise Application Integration}, main product is {XGen},
	a universal message converter with {GUI} and connections also
	to {SWIFT}.

	{(http://csksoftware.com/)}.

	E-mail: <info@csksoftware.com>.

	Address: CSK Software AG, Opernplatz 2, D-60313 Frankfurt,
	Germany.

	Tel: +49 (69) 509 520.  Fax: +49 (69) 5095 2333.

	(2003-05-13)

CSL

	1. Computer Structure Language.  A computer {hardware
	description language}, written in {BCPL}.

	["Computer Structure Language (CSL)", Proc 1975 Symp on Comp
	Hardware Description Languages and their Appl, ACM (Sep
	1975)].

	2. Control and Simulation Language.  A language for industrial
	simulation from Esso and {IBM}.

	["Control and Simulation Language", J.N. Buxton et al,
	Computer J 5(3):194-199 (Oct 1962).  Version: CSL 2 (1966 for
	IBM 7094)].

CSLIP

	{Compressed SLIP}

CSM

	["CSM - A Distributed Programming Language", S. Zhongxiu et
	al, IEEE Trans Soft Eng SE-13(4):497-500 (Apr 1987)].

CSMA/CD

	Carrier Sense Multiple Access / Collision Detect.

	The low level network arbitration {protocol} used on
	{Ethernet}.  Nodes wait for quiet on the net before starting
	to transmit and listen while they are transmitting.  If two
	nodes transmit at once the data gets corrupted.  The nodes
	detect this and continue to transmit for a certain length of
	time to ensure that all nodes detect the collision.  The
	transmitting nodes then wait for a random time before
	attempting to transmit again thus minimising the chance of
	another collision.  The ability to detect collision during
	transmission reduces the amount of {bandwidth} wasted on
	collisions compared with simple {ALOHA} broadcasting.

	(1995-02-23)

CSMP

	{Continuous System Modeling Program}

CSNET

	Computers and Science Network, operated by {CREN} for US
	computer science institutes.  It provides {electronic mail}
	service via {dial-up} lines, {X.25} and {Internet} services.

CSO

	Campus Phone Book software developed for, and originally used
	at, the Computer Services Office of the University of Illinois
	at Urbana-Champaign.  The server software is known as "qi" and
	the client is "ph".  Recent versions of the software refer to
	CCSO (Computing & Communications Service Office).

	{(ftp://uxc.cso.uiuc.edu/)}.

CSP

	1. <language> {Communicating Sequential Processes}.

	2. <hardware> {Chip Scale Packaging}.

CSP/80

	Based on CSP.

	"CSP/80: A Language for Communicating Processes", M. Jazayeri
	et al, Proc Fall COMPCON80, IEEE pp.736-740 (Sept 1980).

CS/PCode

	Used at {Microsoft}.

CSP/k

	{Concurrent SP/k}

CS-Prolog

	Distributed logic language.

	"CS-Prolog on Multi-Transputer Systems", I. Futo et al,
	Microprocessors & Microsystems, March 1989.

CSPS

	["Toward Comprehensive Specification of Distributed Systems",
	G. Roman et al, Proc 7th Intl Conf on Distrib Comp Sys, IEEE
	1987, pp. 282-289].

CSP-S

	["Implementation of CSP-S for Description of Distributed
	Algorithms", L. Patniak et al, Comput Lang 9(3):193-202
	(1984)].

CS/QCode

	Used at {Microsoft}.

	[More detail?]

CSR

	{Control and Status Register}

CSS

	{Cascading Style Sheets}

CSSA

	An {object-oriented} language.

	["Key Concepts in the INCAS Multicomputer Project", J. Nehmer
	et al, IEEE Trans Soft Eng SE-13(8):913-923 (Aug 1987)].

CSS/II

	Computer System Simulator II.  Like {GPSS}, for {IBM 360}.

	["Computer System Simulator II (CSS II) Program Description
	and Operations Manual", SH20-0875, IBM].

CSSL

	{Continuous System Simulation Language}

CSTools

	{Concurrency} through {message-passing} to named message
	queues.

CSU

	1. {California State University}.

	2. {Cleveland State University}.

	3. {Channel Service Unit}.

CSU/DSU

	{channel service unit/digital service unit}

CSV

	{comma separated values}

CT

	{Computer Telephone Integration}

CTC

	{Cornell Theory Center}

CTC++

	<testing> A {test coverage} analysis tool from {Testwell} for
	{C} and {C++} that checks for function, decision, condition
	and multicondtion coverage in host, target and kernel.

	{CTC++ Home (http://testwell.fi/)}.

	(2004-10-20)

CTCP

	<networking> {Client To Client Protocol}

CTI

	1. <communications> {Computer Telephone Integration}.

	2. <education> Computers in Teaching Initiative.  A UK
	government scheme.

	(1996-12-08)

CTL

	1. {Checkout Test language}.

	2. {Compiler Target Language}.

	3. {Computational Tree Logic}

CTOS

	1. <operating system> {Computerised Tomography Operating
	System}.

	2. <operating system> {Convergent Technologies Operating
	System}.

ctrl

	{control}

CTS

	1. <communications> {clear to send}.

	2. <medical> {overuse strain injury}.

CTSS

	{Compatible Timesharing System}

CTY

	/sit'ee/ or /C-T-Y/ [MIT] The terminal physically associated
	with a computer's system {console}.  The term is a contraction
	of "Console {tty}", that is, "Console TeleTYpe".  This {ITS}-
	and {TOPS-10}-associated term has become less common, as most
	Unix hackers simply refer to the CTY as "the console".

	[{Jargon File}]

CU

	<chat> "see you".

	(1997-12-01)

cu

	1. <communications> {Call Unix}.

	2. <networking> The {country code} for Cuba.

CUA

	{Common User Access}

Cube

	Three-dimensional visual language for higher-order logic.

	"The Cube Language", M. Najork et al, 1991 IEEE Workshop on
	Visual Langs, Oct 1991, pp.218-224.

	[{Jargon File}]

cube

	1. [short for "cubicle"] A module in the open-plan offices
	used at many programming shops.  "I've got the manuals in my
	cube."

	2. A NeXT machine (which resembles a matte-black cube).

cubing

	<jargon> By analogy with "tubing", hacking on an IPSC ({Intel
	Personal SuperComputer}) hypercube.  "Louella's gone cubing
	*again*!!"

	[{Jargon File}]

	(2003-10-09)

CUCH

	CUrry-CHurch.

	{Lambda-calculus}

	["A Type-Theoretical Alternative to CUCH, ISWIM, OWHY", Dana
	Scott, Oxford U 1969].

	["Introduction to the CUCH", C. Bohm et al, in Automata
	Theory, E.R. Caianiello ed, A-P 1966, pp.35-65].

	(1994-12-02)

Cuckoo's Egg

	{The Cuckoo's Egg}

CUL

	<chat> "See you later".

	(1997-12-01)

Culler-Fried System

	A system for interactive mathematics.

	[Sammet 1969, p. 253-255].

	(1994-11-15)

CUPID

	A graphic {query language}.

	["CUPID: A Graphic Oriented Facility for Support of
	Nonprogrammer Interactions with a Database", N. McDonald, PhD
	Thesis, CS Dept, UC Berkeley 1975].

CUPL

	Cornell University Programming Language.

	A language for simple mathematics problems, based on {CORC},
	with {PL/I}-like {syntax}.

	["An Instruction Language for CUPL", R.J. Walker, Cornell U,
	Jul 1967].

	(1994-11-15)

curly bracket

	brace

current

	<electronics> The quantity of {charge} per unit time, measured
	in Amperes (Amps, A).  By historical convention, the sign of
	current is positive for currents flowing from positive to
	negative {potential}, but experience indicates that electrons
	are negatively charged and flow in the opposite direction.

	(1995-10-05)

curried function

	<mathematics, programming> A {function} of N {arguments} that
	is considered as a function of one argument which returns
	another function of N-1 arguments.  E.g. in {Haskell} we can
	define:

		average :: Int -> (Int -> Int)

	(The parentheses are optional).  A {partial application} of
	average, to one Int, e.g. (average 4), returns a function of
	type (Int -> Int) which averages its argument with 4.  In
	uncurried languages a function must always be applied to all
	its arguments but a {partial application} can be represented
	using a {lambda abstraction}:

		\ x -> average(4,x)

	Currying is necessary if {full laziness} is to be applied to
	functional sub-expressions.

	It was named after the logician {Haskell Curry} but the
	19th-century logician, {Gottlob Frege} was the first to
	propose it and it was first referred to in ["Uber die
	Bausteine der mathematischen Logik", M. Schoenfinkel,
	Mathematische Annalen. Vol 92 (1924)].

	{David Turner} said he got the term from {Christopher
	Strachey} who invented the term "currying" and used it in his
	lecture notes on programming languages written circa 1967.
	Strachey also remarked that it ought really to be called
	"Schoenfinkeling".

	Stefan Kahrs <smk@dcs.ed.ac.uk> reported hearing somebody in
	Germany trying to introduce "scho"nen" for currying and
	"finkeln" for "uncurrying".  The verb "scho"nen" means "to
	beautify"; "finkeln" isn't a German word, but it suggests "to
	fiddle".

	["Some philosophical aspects of combinatory logic",
	H. B. Curry, The Kleene Symposium, Eds. J. Barwise,
	J. Keisler, K. Kunen, North Holland, 1980, pp. 85-101]

	(2002-07-24)

currying

	Turning an uncurried function into a {curried function}.

curseperl

	A {curses} library for {Perl} by the author of Perl, Larry
	Wall <lwall@netlabs.com>.  It comes with Perl.

	(1994-12-06)

curses

	A set of subroutines in {Unix} for handling navigation on a
	terminal screen using the cursor.

cursor

	1. <hardware> A visually distinct mark on a display indicating
	where newly typed text will be inserted.  The cursor moves as
	text is typed and, in most modern editors, can be moved around
	within a document by the user to change the insertion point.

	2. <database> In {SQL}, a named control structure used by an
	{application program} to point to a row of data.  The position
	of the {row} is within a {table} or {view}, and the cursor is
	used interactively so select rows from columns.

	(1996-12-27)

cursor dipped in X

	<jargon> The metaphorical source of the electronic equivalent
	of a poisoned-pen letter.  Derived from English metaphors of
	the form "pen dipped in X" (where X = e.g. "acid", "bile",
	"vitriol").  These map over neatly to this hackish usage (the
	cursor being what moves, leaving letters behind, when one is
	composing on-line).

	"Talk about a {nastygram}!  He must've had his cursor dipped
	in acid when he wrote that one!"

	[{Jargon File}]

	(1996-12-27)

CU-SeeMe

	<communications> /see`-yoo-see'-mee/ ("CU" from {Cornell
	University}) A {shareware} {personal computer}-based
	{videoconferencing} program for use over the {Internet},
	developed at {Cornell University}, starting in 1992.

	CU-SeeMe allows for direct {audiovisual} connections between
	{clients}, or, like {irc}, it can support multi-user
	converencing via {servers} (here called "reflectors") to
	distribute the video and audio signals between multiple
	clients.

	CU-SeeMe was the first videoconferencing tool available at a
	reasonable price (in this case, free) to users of personal
	computers.

	{(http://cu-seeme.cornell.edu/)}.

	{(http://home.stlnet.com/~hubble/cuseeme/index.html)}.

	Compare with {multicast backbone}.

	(1996-12-01)

CUSI

	A collection of indices to various {web} and other
	{Internet} documents.  It is located at {Nexor} in the UK.

	{(http://web.nexor.co.uk/public/cusi/cusi.html)}.

	(1994-11-29)

cuspy

	/kuhs'pee/ [WPI: from the {DEC} abbreviation CUSP, for
	"Commonly Used System Program", i.e. a utility program used by
	many people] 1. (of a program) Well-written.

	2. Functionally excellent.  A program that performs well and
	interfaces well to users is cuspy.  See {rude}.

	[{Jargon File}]

custom

	(Or "bespoke") An adjective describing any product that is
	special in some way, individually created for a specific user
	or system, as opposed to generic or off-the-shelf.

	(2008-06-25)

Customer Information Control System

	<communications, database> (CICS) An {IBM} communications
	system that was converted for {database} handling.

	[Huh?]

	(1994-11-29)

Customer Information Systems

	{Customer Relationship Management}

Customer Interaction Software

	{Customer Relationship Management}

Customer Relationship Management

	<business> (CRM, CIS, Customer Information Systems, Customer
	Interaction Software, TERM, Technology Enabled Relationship
	Manager) Enterprise-wide software applications that allow
	companies to manage every aspect of their relationship with a
	customer.  The aim of these systems is to assist in building
	lasting customer relationships - to turn customer satisfaction
	into customer loyalty.

	Customer information acquired from sales, marketing, customer
	service, and support is captured and stored in a centralised
	{database}.  The system may provide {data-mining} facilities
	that support an {opportunity management system}.  It may also
	be integrated with other systems such as accounting and
	manufacturing for a truly enterprise-wide system with
	thousands of users.

	(1999-08-20)

CUT

	{Coordinated Universal Time}

cut and paste

	{copy and paste}

cut-and-waste code

	<humour, programming> Code that someone found online (e.g. in a
	{blog}) and copied and pasted into a product.  The result is
	usually a lot of wasted time trying to track down obscure bugs
	from code that may have made sense in the original context but not
	in the new one.  Also known as blog-driven development.

	[{Dodgy Coder
	(http://www.dodgycoder.net/2011/11/yoda-conditions-pokemon-exception.html)}].

	(2014-07-03)

cut a tape

	To write a software or document distribution on magnetic tape
	for shipment.  Has nothing to do with physically cutting the
	medium!  "Cutting a disk" has also been reported as live
	usage.  Related slang usages are mainstream business's "cut a
	check", the recording industry's "cut a record", and the
	military's "cut an order".

	All of these usages reflect physical processes in obsolete
	recording and duplication technologies.  The first stage in
	manufacturing an old-style vinyl record involved cutting
	grooves in a stamping die with a precision lathe.  More
	mundanely, the dominant technology for mass duplication of
	paper documents in pre-photocopying days involved "cutting a
	stencil", punching away portions of the wax overlay on a silk
	screen.  More directly, paper tape with holes punched in it
	was an important early storage medium.

	[{Jargon File}]

cutover

	<communications, networking> /cut-ov*/ Switching from an old
	({hardware} and/or {software}) system to a replacement system,
	covering the overlap from when the new system is {live} until
	the old system has been {shut down}.

	(1997-07-09)

cut-through switching

	<networking> The application of {wormhole routing} to
	{packets} in a {packet switching} system so that forwarding of
	a packet starts as soon as its destination is known, before
	the whole packet has arrived.

	Compare {store and forward}.

	(2006-12-06)

cv

	<networking> The {country code} for Cape Verde.

	(1999-01-27)

CVS

	{Concurrent Versions System}

CW

	{continuous wave}

CWeb

	<language> An {ANSI C} implementation of the {Web} {literate
	programming} language.  Version 3.1 by Levy, Knuth, and Marc
	van Leeuwen is writen in, and outputs, {ANSI C} and {C++}.

	{(ftp://ftp.cwi.nl/pub/cweb/)}.

	(1993-12-16)

CWI

	{Centrum voor Wiskunde en Informatica}

CWIC

	Compiler for Writing and Implementing Compilers.  Val Schorre.
	One of the early metacompilers.  Compare {Meta-II}.

CWIS

	{Campus-Wide Information System}

C with Classes

	Short-lived predecessor to C++.

	["Classes: An Abstract Data Type Facility for the C Language",
	B. Stroustrup, CSTR-84 Bell Labs, Apr 1980].  Also in [SIGPLAN
	Notices (Jan 1982)].

cx

	<networking> The {country code} for Christmas Island.

	(1999-01-27)

cxref

	<tool> A cross-reference generator by Arnold Robbins from
	{Georgia Institute of Technology}.

	(2000-02-29)

cy

	<networking> The {country code} for Cyprus.

	(1999-01-27)

Cy486SLC

	A version of the {Intel 486} made by {Cyrix}.  It has a
	{486SX} {instruction set}, a 1 kilobyte {cache}, and an {Intel
	80386SX}-compatible pinout and thus, 16-bit data bus.

	(1994-11-30)

cyber

	<chat> To have {cybersex}.

	(1997-06-21)

cyberbunny

	<abuse> Someone who knows absolutely nothing about computers
	and advises people who know absolutely nothing about
	computers.  The term is used mostly on {AOL}, {Prodigy},
	{Compuserve}, etc.

	(1996-02-18)

cyberchondriac

	<jargon, humour> (After "hypochondriac") 1. A user who always
	thinks there is something wrong with his computer.

	2. Someone who uses the {web} to indulge their
	hyperchondria.

	(2001-03-10)

cybercrime

	<security, legal> Any of a broad range of activities that use
	computers or networks to commit illegal acts, including theft of
	{personal data}, {phishing}, distribution of {malware},
	{copyright} infringement, {denial of service attacks},
	{cyberstalking}, {bullying}, online harassment, child
	{pornography}, child predation, stock market manipulation and
	corporate espionage.

	For example, a vulnerability in a victim's {web browser} might
	result in him unknowingly downloading a {Trojan horse} {virus},
	which installs a {keystroke logger} on his computer, which allows
	the {cracker} to steal private data such as Internet banking or
	{e-mail} passwords.

	The degree to which an activity counts as "cybercrime" rather than
	just "crime" depends on whether they could exist without computers
	or networks.

	(2015-02-14)

cybercrime as a service

	<security, legal> (CaaS) A kind of {software as a service} that
	involves performing illegal online activities ({cybercrime}) on
	behalf of others for money.  Cybercrime as a service represents an
	evolution of online crime from the sale of illegal products such
	as {malware} and {exploit} kits to offering everything necessary
	to arrange a {cyber fraud} or to conduct a {cyber attack}.  As
	well as providing malicious code, the service provider also rents
	out the infrastructure to control the distribution and operation
	of the malware, e.g., bullet-proof hosting or huge {botnets}.

	(2015-02-22)

cybercrud

	<jargon> /si:'ber-kruhd/ 1. (Coined by Ted Nelson) Obfuscatory
	tech-talk.  Verbiage with a high {MEGO} factor.  The computer
	equivalent of bureaucratese.

	2. Incomprehensible stuff embedded in e-mail.  First there
	were the "Received" headers that show how mail flows through
	systems, then MIME ({Multi-purpose Internet Mail Extensions})
	headers and part boundaries, and now huge blocks of {hex} for
	PEM ({Privacy Enhanced Mail}) or PGP ({Pretty Good Privacy})
	{digital signatures} and certificates of authenticity.  This
	stuff all has a purpose and good user interfaces should hide
	it, but all too often users are forced to wade through it.

	[{Jargon File}]

	(1995-04-04)

CyberGlove

	<hardware, virtual reality> A {data glove} sold by {Virtual
	Technologies}.  The spandex-like glove houses 18 sensors to
	track accurately just about every move your hand is capable of
	making.  The accompanying software includes a
	three-dimensional hand model that can he added to any {virtual
	reality} application.  The glove includes a mount for Polhemus
	and Ascension sensors.

	(2003-06-17)

cybernetics

	<robotics> /si:`b*-net'iks/ The study of control and
	communication in living and man-made systems.

	The term was first proposed by {Norbert Wiener} in the book
	referenced below.  Originally, cybernetics drew upon
	electrical engineering, mathematics, biology, neurophysiology,
	anthropology, and psychology to study and describe actions,
	feedback, and response in systems of all kinds.  It aims to
	understand the similarities and differences in internal
	workings of organic and machine processes and, by formulating
	abstract concepts common to all systems, to understand their
	behaviour.

	Modern "second-order cybernetics" places emphasis on how the
	process of constructing models of the systems is influenced by
	those very systems, hence an elegant definition - "applied
	epistemology".

	Related recent developments (often referred to as {sciences of
	complexity}) that are distinguished as separate disciplines
	are {artificial intelligence}, {neural networks}, {systems
	theory}, and {chaos theory}, but the boundaries between those
	and cybernetics proper are not precise.

	See also {robot}.

	{The Cybernetics Society (http://cybsoc.org)} of the UK.

	{American Society for Cybernetics
	(http://asc-cybernetics.org/)}.

	{IEEE Systems, Man and Cybernetics Society
	(http://isye.gatech.edu/ieee-smc/)}.

	{International project "Principia Cybernetica"
	(http://pespmc1.vub.ac.be/DEFAULT.html)}.

	["Cybernetics, or control and communication in the animal and the
	machine", N. Wiener, New York: John Wiley & Sons, Inc., 1948]

	(2002-01-01)

cyberpunk

	/si:'ber-puhnk/ (Originally coined by SF writer Bruce Bethke
	and/or editor Gardner Dozois) A subgenre of SF launched in
	1982 by William Gibson's epoch-making novel "Neuromancer"
	(though its roots go back through Vernor Vinge's "True Names"
	to John Brunner's 1975 novel "The Shockwave Rider").  Gibson's
	near-total ignorance of computers and the present-day hacker
	culture enabled him to speculate about the role of computers
	and hackers in the future in ways hackers have since found
	both irritatingly na"ive and tremendously stimulating.
	Gibson's work was widely imitated, in particular by the
	short-lived but innovative "Max Headroom" TV series.  See
	{cyberspace}, {ice}, {jack in}, {go flatline}.

	Since 1990 or so, popular culture has included a movement or
	fashion trend that calls itself "cyberpunk", associated
	especially with the rave/techno subculture.  Hackers have
	mixed feelings about this.  On the one hand, self-described
	cyberpunks too often seem to be shallow trendoids in black
	leather who have substituted enthusiastic blathering about
	technology for actually learning and *doing* it.  Attitude is
	no substitute for competence.  On the other hand, at least
	cyberpunks are excited about the right things and properly
	respectful of hacking talent in those who have it.  The
	general consensus is to tolerate them politely in hopes that
	they'll attract people who grow into being true hackers.

	[{Jargon File}]

cyberrhea

	<humour, jargon> /si:'ber-eer/ An affliction of some {word
	processor} users; excessive frequency and looseness of
	productivity.  Particularly virulent among those who have not
	discovered the fortifying virtues of revision.

	["Right Words, Right Places" Scott Rice, Wadsworth, 1993, A5.]

	(1997-02-25)

cybersex

	<networking> Sex performed in {real time} via a digital
	medium.

	Compare {teledildonics}.

	[Details?]

	(1998-02-10)

cyberspace

	<jargon> /si:'ber-spays/ 1. (Coined by {William Gibson})
	Notional "information-space" loaded with visual cues and
	navigable with brain-computer interfaces called "cyberspace
	decks"; a characteristic prop of {cyberpunk} SF.  In 1991
	serious efforts to construct {virtual reality} interfaces
	modelled explicitly on Gibsonian cyberspace were already under
	way, using more conventional devices such as glove sensors and
	binocular TV headsets.  Few hackers are prepared to deny
	outright the possibility of a cyberspace someday evolving out
	of the network (see {network, the}).

	2. Occasionally, the metaphoric location of the mind of a
	person in {hack mode}.  Some hackers report experiencing
	strong eidetic imagery when in hack mode; interestingly,
	independent reports from multiple sources suggest that there
	are common features to the experience.  In particular, the
	dominant colours of this subjective "cyberspace" are often
	grey and silver, and the imagery often involves constellations
	of marching dots, elaborate shifting patterns of lines and
	angles, or moire patterns.

	[{Jargon File}]

	(1999-02-01)

cyberspastic

	<humour> A person suffering from information overload while
	browsing the {Internet} or {web}.

	Compare {webhead}.

	(1995-11-09)

cyber-squatting

	<jargon, networking> The practice of registering famous brand
	names as {Internet} {domain names}, e.g. harrods.com, ibm.firm
	or sears.shop, in the hope of later selling them to the
	appropriate owner at a profit.

	(1998-01-22)

CyberWand

	<hardware, virtual reality> A {virtual reality} {controller}.
	The CyberWand costs $99, or $765 with optional Polhemus
	sensor.  It is basically the handle of a flight control system
	without the base.  The controller's four buttons and 2-D hat
	sensor track six degrees of movement.

	(1995-04-04)

CyberZine

	<publication> A combination paper and {web} on-line
	{Cyberspace} guide.  Upon payment you will be given a user name
	and password to access CyberZine on-line and the paper version
	will be posted first class.  Subscribers can also use the
	CyberZine help desk.

	{(http://cyberzine.org/)}.

	(1994-09-22)

CYBIL

	Control Data's system programming language in the 80's.  Major
	parts of CDC systems written in this.

Cyc

	<artificial intelligence> A large {knowledge-based system}.

	Cyc is a very large, multi-contextual {knowledge base} and
	{inference engine}, the development of which started at the
	{Microelectronics and Computer Technology Corporation} (MCC)
	in Austin, Texas during the early 1980s.

	Over the past eleven years the members of the Cyc team, lead
	by {Doug Lenat}, have added to the knowledge base a huge
	amount of fundamental human knowledge: {facts}, rules of
	thumb, and {heuristics} for reasoning about the objects and
	events of modern everyday life.

	Cyc is an attempt to do symbolic {AI} on a massive scale.  It
	is not based on numerical methods such as statistical
	probabilities, nor is it based on {neural networks} or {fuzzy
	logic}.  All of the knowledge in Cyc is represented
	{declaratively} in the form of logical {assertions}.  Cyc
	presently contains approximately 400,000 significant
	assertions, which include simple statements of fact, rules
	about what conclusions to draw if certain statements of fact
	are satisfied, and rules about how to reason with certain
	types of facts and rules.  The {inference engine} derives new
	conclusions using {deductive reasoning}.

	To date, Cyc has made possible ground-breaking pilot
	applications in the areas of {heterogeneous} database browsing
	and integration, {captioned image retrieval}, and {natural
	language processing}.

	In January of 1995, a new independent company named Cycorp was
	created to continue the Cyc project.  Cycorp is still in
	Austin, Texas.  The president of Cycorp is {Doug Lenat}.

	The development of Cyc has been supported by several
	organisations, including {Apple}, {Bellcore}, {DEC}, {DoD},
	{Interval}, {Kodak}, and {Microsoft}.

	{(http://cyc.com/)}.

	{Unofficial FAQ (http://robotwisdom.com/ai/cycfaq.html)}.

	(1999-09-07)

CYCL

	A {frame language}.

	["Building Large Knowledge-Based Systems", Doug B. Lenat et
	al, A-W 1990].

cycle

	<unit> A basic unit of computation, one period of a computer
	{clock}.

	Each {instruction} takes a number of clock cycles.  Often the
	computer can access its memory once on every clock cycle, and
	so one speaks also of "memory cycles".

	Every {hacker} wants more cycles (noted hacker {Bill Gosper}
	describes himself as a "cycle junkie").  There are only so
	many cycles per second, and when you are sharing a computer
	the cycles get divided up among the users.  The more cycles
	the computer spends working on your program rather than
	someone else's, the faster your program will run.  That's why
	every hacker wants more cycles: so he can spend less time
	waiting for the computer to respond.

	The use of the term "cycle" for a computer clock period can
	probably be traced back to the rotation of a generator
	generating alternating current though computers generally use
	a clock signal which is more like a {square wave}.
	Interestingly, the earliest mechanical calculators,
	e.g. Babbage's {Difference Engine}, really did have parts
	which rotated in true cycles.

	[{Jargon File}]

	(1997-09-30)

cyclebabble

	<jargon> Advertising raw {clock speed}, instead of {bus
	speed}.

	{IBM} uses raw clock speed as the speed of the computer.  In
	the {IBM PC} and {IBM PC XT}, the clock is divided by 4 to
	produce the 4-phase bus clocks.  Thus a 4 MHz IBM XT really
	runs at 0.895 MHz, because that 4 MHz was really 3.58 MHz
	which gets divided by four.

	A {Tandy} {Color Computer} ran at exactly the same speed, but
	clock speed was specified as bus speed, 0.895 MHz, leaving the
	impression that it was 4 times slower.  Actually it ran a
	little faster with a more efficient {instruction set}.  If the
	actual {clock rate} had been specified on a {CoCo 3}, it would
	have been 14.32 MHz, although the bus speed was still 0.895
	MHz.  That high speed also generated video, color, and {hidden
	refresh} timing.

	100 MHz computers are running at bus speeds of around 25 MHz.

	(1997-02-13)

cycle crunch

	<jargon> A situation wherein the number of people trying to
	use a computer simultaneously has reached the point where no
	one can get enough {cycles} because they are spread too thin
	and the system has probably begun to {thrash}.

	This scenario is an inevitable result of Parkinson's Law
	applied to {time-sharing}.  Usually the only solution is to
	buy more computer.  Happily, this has rapidly become easier
	since the mid-1980s, so much so that the very term "cycle
	crunch" now has a faintly archaic flavour; most hackers now
	use {workstations} or {personal computers} as opposed to
	traditional {time-sharing} systems.

	[{Jargon File}]

	(1994-11-29)

cycle drought

	A scarcity of {cycles}.  It may be due to a {cycle crunch},
	but it could also occur because part of the computer is
	temporarily not working, leaving fewer cycles to go around.
	"The {high moby} is {down}, so we're running with only half
	the usual amount of memory.  There will be a cycle drought
	until it's fixed."

	[{Jargon File}]

	(1994-11-29)

cycle of reincarnation

	A term coined by {Ivan Sutherland} ca. 1970 to refer to a
	well-known effect whereby function in a computing system
	family is migrated out to special-purpose {peripheral}
	hardware for speed, then the peripheral evolves toward more
	computing power as it does its job, then somebody notices that
	it is inefficient to support two asymmetrical processors in
	the architecture and folds the function back into the main
	{CPU}, at which point the cycle begins again.

	Several iterations of this cycle have been observed in
	{graphics-processor} ({blitter}) design, and at least one or
	two in communications and {floating-point} processors.  Also
	known as "the Wheel of Life", "the Wheel of Samsara" and other
	variations of the basic Hindu/Buddhist theological idea.

	[{Jargon File}]

	(1994-11-16)

cycle server

	<jargon> A powerful computer that exists primarily for running
	large {batch} jobs.  The term implies that {interactive} tasks
	such as editing are done on other machines on the network,
	such as {workstations}.

	[{Jargon File}]

	(1998-03-13)

cyclic redundancy check

	<algorithm> (CRC or "cyclic redundancy code") A number derived
	from, and stored or transmitted with, a block of data in order
	to detect corruption.  By recalculating the CRC and comparing
	it to the value originally transmitted, the receiver can
	detect some types of transmission errors.

	A CRC is more complicated than a {checksum}.  It is calculated
	using division either using {shifts} and {exclusive ORs} or
	{table lookup} ({modulo} 256 or 65536).

	The CRC is "redundant" in that it adds no information.  A
	single corrupted {bit} in the data will result in a one bit
	change in the calculated CRC but multiple corrupted bits may
	cancel each other out.

	CRCs treat blocks of input bits as coefficient-sets for
	{polynomials}.  E.g., binary 10100000 implies the polynomial:
	1*x^7 + 0*x^6 + 1*x^5 + 0*x^4 + 0*x^3 + 0*x^2 + 0*x^1 + 0*x^0.
	This is the "message polynomial".  A second polynomial, with
	constant coefficients, is called the "generator polynomial".
	This is divided into the message polynomial, giving a quotient
	and remainder.  The coefficients of the remainder form the
	bits of the final CRC.  So, an order-33 generator polynomial
	is necessary to generate a 32-bit CRC.  The exact bit-set used
	for the generator polynomial will naturally affect the CRC
	that is computed.

	Most CRC implementations seem to operate 8 bits at a time by
	building a table of 256 entries, representing all 256 possible
	8-bit byte combinations, and determining the effect that each
	byte will have.  CRCs are then computed using an input byte to
	select a 16- or 32-bit value from the table.  This value is
	then used to update the CRC.

	{Ethernet} {packets} have a 32-bit CRC.  Many disk formats
	include a CRC at some level.

	(1997-08-02)

cyclic redundancy code

	{cyclic redundancy check}

Cyclo

	<programming, tool> (Cyclomatic complexity tool) A {C} and
	{C++} code analysis tool by Roger D. Binns.  It measures
	{cyclomatic complexity}, shows function calls, and can draw
	{flowgraphs} of {ANSI C} and {C++} code.  It requires {Lex}
	and {C++}.

	Posted to {alt.sources}, 1993-06-28.

	(1993-06-28)

cyclomatic complexity

	<programming, testing> A measure of the number of linearly
	independent paths through a program {module}.  Cyclomatic
	complexity is a measure for the complexity of code related to
	the number of ways there are to traverse a piece of code.
	This determines the minimum number of inputs you need to test
	all ways to execute the program.

	(1998-03-17)

Cygnus Tcl Tools

	<tool> A rebundling of {Tcl} and {Tk} into the {Cygnus} {GNU}
	build framework with "{configure}" by david d 'zoo' zuhn
	<zoo@cygnus.com>.

	{(ftp://cygnus.com/pub/)}.

	(2000-09-25)

cylinder

	<storage> The set of {tracks} on a multi-headed {disk} that
	may be accessed without head movement.  That is, the
	collection of disk tracks which are the same distance from the
	spindle about which the disks rotate.  Each such group forms
	the shape of a cylinder.  Placing data that are likely to be
	accessed together in cylinders reduces the access
	significantly as head movement ({seeking}) is slow compared to
	disk rotation and switching between heads.

	(1997-07-15)

CypherText

	<language> An interactive language for text formatting and
	typesetting.

	["CypherText: An Extensible Composing and Typesetting
	Language", C.G. Moore et al, Proc FJCC 37, AFIPS (Fall 1970)].

	(1995-05-10)

Cyrix

	<company> A {microprocessor} manufacturer.  They produce an
	{Intel 486} equivalent - the {Cy486SLC} and a {Pentium}
	equivalent - the {Cyrix 6x86}.

	{(http://cyrix.com/)}.

	(1996-03-23)

Cyrix 6x86

	<processor> (6x86) {IBM} and {Cyrix}'s {sixth-generation},
	64-bit {80x86}-compatible {microprocessor}.  The 6x86 combines
	aspects of both {RISC} and {CISC}.  It has a {superscalar},
	{superpipelined} {core}, and performs {register renaming},
	{speculative execution}, {out-of-order completion}, and {data
	dependency removal}.  It has a 16-kilobyte {primary cache} and
	is socket-compatible with the {Pentium} P54C.  It has four
	performance levels: PR 120+, PR 150+, PR 166+ and PR 200+.

	The chip was designed by Cyrix and is manufactured by IBM.

	The architecture of the 6x86 is more advanced than that of the
	Pentium, incorporating some of the features of Intel's
	{Pentium Pro}.  At a given {clock rate} it executes most code
	more quickly than a Pentium would.  However, its {FPU} is
	considerably less efficient than Intel's.

	{IBM FAQ
	(http://chips.ibm.com/products/x86/6x86/faqs/6x86_faqs.html)},
	{Cyrix FAQ
	(http://cyrix.com/process/prodinfo/6x86/faq-6x86.htm)}.

	(1997-05-26)

cz

	<networking> The {country code} for the Czech Republic.

	(1999-01-27)

D

	1. "The Data Language."  {MS-DOS} 4GL.

	2. A {Haskell}-like language, with {type class}es.

	E-mail: <polar@cs.syr.edu>.

D-1000

	<computer> {Datamatic Corporation}'s first computer,
	which weighed 25 tons, took up 6,000 square feet and
	cost $1.5 million, produced some time after 1955.

	(2009-01-14)

DAA

	Distributed Application Architecture: under design by
	Hewlett-Packard and Sun.  A distributed object management
	environment that will allow applications to be developed
	independent of operating system, network or windowing system.

DAC

	{Digital to Analog Converter}

DACAPO

	Broad-range hardware specification language.  "Mixed Level
	Modelling and Simulation of VLSI Systems", F.J. Rammig in
	Logic Design and Simulation, E. Horbst ed, N-H 1986.

DACNOS

	A prototype network operating system for multi-vendor
	environments, from IBM European Networking Centre Heidelberg
	and University of Karlsruhe.

	(1995-01-16)

D/A converter

	{Digital to Analog Converter}

DACTL

	Declarative Alvey Compiler Target Language.

	An intermediate language from the {University of East Anglia},
	used in the {Flagship} project.  DACTL is based on a form of
	{graph rewriting} which can be used to implement {functional
	languages}, {logic languages} and {imperative languages}.  The
	current version is Dactl0.

	["DACTL - A Computational Model and Compiler Target Language
	Based on Graph Reduction", J.R.W. Glauert et al, ICL Tech J
	5(3) (1987)].

	(1994-09-22)

DADS

	{Dictionary of Algorithms and Data Structures}

daemon

	<operating system> /day'mn/ or /dee'mn/ (From the mythological
	meaning, later rationalised as the acronym "Disk And Execution
	MONitor") A program that is not invoked explicitly, but lies
	dormant waiting for some condition(s) to occur.  The idea is
	that the perpetrator of the condition need not be aware that a
	daemon is lurking (though often a program will commit an
	action only because it knows that it will implicitly invoke a
	daemon).

	For example, under {ITS} writing a file on the {LPT} spooler's
	directory would invoke the spooling daemon, which would then
	print the file.  The advantage is that programs wanting files
	printed need neither compete for access to, nor understand any
	idiosyncrasies of, the {LPT}.  They simply enter their
	implicit requests and let the daemon decide what to do with
	them.  Daemons are usually spawned automatically by the
	system, and may either live forever or be regenerated at
	intervals.

	{Unix} systems run many daemons, chiefly to handle requests
	for services from other {hosts} on a {network}.  Most of these
	are now started as required by a single real daemon, {inetd},
	rather than running continuously.  Examples are {cron} (local
	timed command execution), {rshd} (remote command execution),
	{rlogind} and {telnetd} (remote login), {ftpd}, {nfsd} (file
	transfer), {lpd} (printing).

	Daemon and {demon} are often used interchangeably, but seem to
	have distinct connotations (see {demon}).  The term "daemon"
	was introduced to computing by {CTSS} people (who pronounced
	it /dee'mon/) and used it to refer to what {ITS} called a
	{dragon}.

	[{Jargon File}]

	(1995-05-11)

DAG

	1. <architecture> {Data Address Generator}.

	2. <mathematics> {directed acyclic graph}.

	(1997-08-30)

Daisy

	A {functional language}.

	["Daisy Programming Manual", S.D. Johnson, CS Dept TR, Indiana
	U, 1988].

DAISY 201

	An early system on {G-15}.

	[Listed in CACM 2(5):16 (May 1959)].

daisy chain

	<networking> A {bus} wiring scheme in which, for example,
	device A is wired to device B, device B is wired to device C,
	etc.  The last device is normally wired to a resistor or
	{terminator}.  All devices may receive identical signals or,
	in contrast to a simple bus, each device in the chain may
	modify one or more signals before passing them on.

	Characteristic of {RS-485}, of {Apple}'s {LocalTalk}, and of
	various industrial control networks; also often used to
	describe {Thinwire} {Ethernet} ({10base2}).

	(1997-01-07)

daisywheel printer

	<printer> A kind of {impact printer} where the characters are
	arranged on the ends of the spokes of a wheel (resembling the
	petals on a daisy).

	The wheel (usually made of plastic) is rotated to select the
	character to print and then an electrically operated hammer
	mechanism bends the selected spoke forward slightly,
	sandwiching an ink ribbon between the character and the paper,
	as in a typewriter.

	One advantage of this arrangement over that of a typewriter is
	that different wheels may be inserted to produce different
	{typefaces}.

	(1998-04-28)

dancing frog

	<programming, humour> A {bug} or {glitch} that only occurs for
	a particular user; never when the user tries to show it to
	anyone else.

	The term is derived from a Warner Brothers cartoon in which a
	man discovers a frog which can sing and dance; he believes
	this will make his fortune but the frog never performs in
	front of anyone else.

	(2004-10-16)

dangling pointer

	<programming> A reference that doesn't actually lead anywhere.
	In {C} and some other languages, a pointer that doesn't
	actually point at anything valid.  Usually this happens
	because it formerly pointed to something that has moved or
	disappeared, e.g. a {heap}-allocated block which has been freed
	and reused.

	Used as jargon in a generalisation of its technical meaning;
	for example, a local phone number for a person who has since
	moved is a dangling pointer.

	{This dictionary} contains many dangling pointers -
	cross-references to non-existent entries, as explained in {the
	Help page (help.html)}.

	[{Jargon File}]

	(2014-09-20)

DANTE

	A company established by the national research networks in
	Europe to provide international network services.

DAP Fortran

	["Efficient High Speed Computing with the Distributed Array
	Processor", P.M. Flanders et al, pp.113-127 (1977)].

	[Same as Fortran- Plus?]

DAPLEX

	["The Functional Data Model and the Data Language DAPLEX",
	D.W. Shipman, ACM Trans Database Sys, 6(1):140-173 (Mar
	1981)].

DARE

	Differential Analyzer REplacement.  A family of simulation
	languages for continuous systems.

	["Digital Continuous System Simulation", G.A. Korn et al, P-H
	1978].

dark-side hacker

	<jargon, legal> A criminal or malicious hacker; a {cracker}.
	From George Lucas's Darth Vader, "seduced by the dark side of
	the Force".  The implication that hackers form a sort of elite
	of technological Jedi Knights is intended.

	Opposite: {samurai}.

	[{Jargon File}]

	(1997-04-28)

Darms

	<language, music> A music language.

	["The Darms Project: A Status Report", R.F. Erickson,
	Computers and the Humanities 9(6):291-298 (June 1975)].

	(1995-05-12)

DARPA

	{Defense Advanced Research Projects Agency}

Dartmouth BASIC

	<language> The original {BASIC} language, designed by John
	G. Kemeny and Thomas E. Kurtz at Dartmouth College in 1963.
	Dartmouth BASIC first ran on a {GE 235} [date?] and on an {IBM
	704} on 1964-05-01.  It was designed for quick and easy
	programming by students and beginners using Dartmouth's
	experimental {time-sharing} system.  Unlike most later BASIC
	dialects, Dartmouth BASIC was compiled.

	(2003-07-02)

Darwin

	1. <operating system> An {operating system} based on the
	{FreeBSD} version of {Unix}, running on top of a {microkernel}
	({Mach} 3.0 with darwin 1.02) that offers advanced networking,
	services such as the {Apache} {web server}, and support for
	both {Macintosh} and Unix {file systems}.  Darwin was
	originally released in March 1999.  It currently runs on
	{PowerPC} based Macintosh computers, and, in October 2000, was
	being ported to {Intel} processor-based computers and
	compatible systems by the Darwin community.

	2. <programming, tool> A general purpose structuring tool of
	use in building complex {distributed systems} from diverse
	components and diverse component interaction mechanisms.
	Darwin is being developed by the Distributed Software
	Engineering Section of the Department of Computing at
	{Imperial College}.  It is in essence a {declarative} binding
	language which can be used to define hierarchic compositions
	of interconnected components.  Distribution is dealt with
	orthogonally to system structuring.  The language allows the
	specification of both static structures and dynamic structures
	which evolve during execution.  The central abstractions
	managed by Darwin are components and services.  Bindings are
	formed by manipulating references to services.

	The {operational semantics} of Darwin is described in terms of
	the {Pi-calculus}, {Milner}'s calculus of mobile processes.
	The correspondence between the treatment of names in the
	Pi-calculus and the management of service references in Darwin
	leads to an elegant and concise Pi-calculus model of Darwin's
	{operational semantics}.  The model has proved useful in
	arguing the correctness of Darwin implementations and in
	designing extensions to Darwin and reasoning about their
	behaviour.

	{Distributed Software Engineering Section
	(http://www-dse.doc.ic.ac.uk/)}.  {Darwin publications
	(http://scorch.doc.ic.ac.uk/dse-papers/darwin/)}.

	E-mail: Jeff Magee <jnm@doc.ic.ac.uk>, Naranker Dulay
	<nd@doc.ic.ac.uk>.

	3. {Core War}.

	(2003-08-08)

DAS

	Digital Analog Simulator.

	Represents {analog computer} design.

	(1994-11-08)

DASD

	{Direct-Access Storage Device}

DASE

	{Distributed Application Support Environment}

DASL

	Datapoint's Advanced System Language.

	A cross between {C} and {Pascal} by Gene Hughes with custom
	features for {Datapoint} hardware (no {stack}).  It is used
	internally by Datapoint.

	(1994-11-08)

DAT

	1. {Digital Audio Tape}.

	2. {Dynamic Address Translation}.

data

	<data, data processing, jargon> /day't*/ (Or "raw data")
	Numbers, {characters}, {images}, or other method of recording,
	in a form which can be assessed by a human or (especially)
	input into a {computer}, stored and {processed} there, or
	transmitted on some {digital channel}.  Computers nearly
	always represent data in {binary}.

	Data on its own has no meaning, only when interpreted by some
	kind of {data processing system} does it take on meaning and
	become {information}.

	For example, the binary data 01110101 might represent the integer
	117 or the {ASCII} lower case U character or the blue component of
	a pixel in some {video}.  Which of these it represents is
	determined by the way it is processed (added, printed, displayed,
	etc.).  Even these numbers, characters or pixels however are still
	not really information until their context is known, e.g. my bank
	balance is Â£117, there are two Us in "vacuum", you have blue eyes.

	(2007-09-10)

data abstraction

	<data> Any representation of data in which the implementation
	details are hidden (abstracted).  {Abstract data types} and
	{objects} are the two primary forms of data abstraction.

	[Other forms?].

	(2003-07-03)

data acquisition

	{data logging}

Data Address Generator

	<architecture> (DAG) The mechanism which generates temporary
	memory addresses for data that is transferred between memory
	and {registers} in a {Digital Signal Processor}.

	Certain {DSP} architectures incorporate more than one DAG to
	simplify the programming needed to move blocks of data between
	buffers.

	For instance, certain {Fast Fourier Transform} {algorithms}
	requiring {bit reversing}, can use the DAG for that purpose,
	or they can use two DAGS, one for Program Memory Data (PMD),
	and the other for Data Memory Data (DMD).

	(1997-08-12)

database

	1. <database> One or more large structured sets of persistent
	data, usually associated with software to update and {query}
	the data.  A simple database might be a single file containing
	many {records}, each of which contains the same set of
	{fields} where each field is a certain fixed width.

	A database is one component of a {database management system}.

	See also {ANSI/SPARC Architecture}, {atomic}, {blob}, {data
	definition language}, {deductive database}, {distributed
	database}, {fourth generation language}, {functional
	database}, {object-oriented database}, {relational database}.

	{Carol E. Brown's tutorial
	(http://accounting.rutgers.edu/raw/aies/www.bus.orst.edu/faculty/brownc/lectures/db_tutor/db_tutor.htm)}.

	2. <hypertext> A collection of {nodes} managed and stored in
	one place and all accessible via the same {server}.  {Links}
	outside this are "external", and those inside are "internal".

	On the {World-Wide Web} this is called a {website}.

	3. All the facts and rules comprising a {logic programming}
	program.

	(2005-11-17)

database administrator

	<job> A person responsible for the design and management of
	one or more {databases} and for the evaluation, selection and
	implementation of {database management systems}.  In smaller
	organisations, the data administrator and database
	administrator are often one in the same; however, when they
	are different, the database administrator's function is more
	technical.  The database administrator would implement the
	database software that meets the requirements outlined by the
	organisation's data administrator and {systems analysts}.

	Tasks might include controling an organisation's data
	resources, using {data dictionary} software to ensure {data
	integrity} and security, recovering corrupted data and
	eliminating data redundancy and uses tuning tools to improve
	database performance.

	(2004-03-11)

database analyst

	<job> A person who uses {data modeling} to analyse and specify
	data use within an application area.  A database analyst
	defines both {logical views} and physical data structures.  In
	a {client/server} environment, he defines the database part of
	the back end system.

	(2004-03-11)

database machine

	<hardware> A {computer} or special hardware that stores and
	retrieves data from a {database}.  It is specially designed
	for database access and is coupled to the main ({front-end})
	computer(s) by a high-speed channel.  This contrasts with a
	{database server}, which is a computer in a {local area
	network} that holds a database.  The database machine is
	tightly coupled to the main {CPU}, whereas the database server
	is loosely coupled via the network.

	[Example?]

	(2004-03-11)

database management system

	<database> (DBMS) A suite of programs which typically manage
	large structured sets of persistent data, offering ad hoc
	query facilities to many users.  They are widely used in
	business applications.

	A database management system (DBMS) can be an extremely
	complex set of software programs that controls the
	organisation, storage and retrieval of data (fields, records
	and files) in a database.  It also controls the security and
	integrity of the database.  The DBMS accepts requests for data
	from the application program and instructs the operating
	system to transfer the appropriate data.

	When a DBMS is used, information systems can be changed much
	more easily as the organisation's information requirements
	change.  New categories of data can be added to the database
	without disruption to the existing system.

	Data security prevents unauthorised users from viewing or
	updating the database.  Using passwords, users are allowed
	access to the entire database or subsets of the database,
	called subschemas (pronounced "sub-skeema").  For example, an
	employee database can contain all the data about an individual
	employee, but one group of users may be authorised to view
	only payroll data, while others are allowed access to only
	work history and medical data.

	The DBMS can maintain the integrity of the database by not
	allowing more than one user to update the same record at the
	same time.  The DBMS can keep duplicate records out of the
	database; for example, no two customers with the same customer
	numbers (key fields) can be entered into the database.

	{Query languages} and {report writers} allow users to
	interactively interrogate the database and analyse its data.

	If the DBMS provides a way to interactively enter and update
	the database, as well as interrogate it, this capability
	allows for managing personal databases.  However, it may not
	leave an audit trail of actions or provide the kinds of
	controls necessary in a multi-user organisation.  These
	controls are only available when a set of application programs
	are customised for each data entry and updating function.

	A business information system is made up of subjects
	(customers, employees, vendors, etc.) and activities (orders,
	payments, purchases, etc.).  Database design is the process of
	deciding how to organize this data into record types and how
	the record types will relate to each other.  The DBMS should
	mirror the organisation's data structure and process
	transactions efficiently.

	Organisations may use one kind of DBMS for daily transaction
	processing and then move the detail onto another computer that
	uses another DBMS better suited for random inquiries and
	analysis.  Overall systems design decisions are performed by
	data administrators and systems analysts.  Detailed database
	design is performed by database administrators.

	The three most common organisations are the {hierarchical
	database}, {network database} and {relational database}.  A
	database management system may provide one, two or all three
	methods.  Inverted lists and other methods are also used.  The
	most suitable structure depends on the application and on the
	transaction rate and the number of inquiries that will be
	made.

	Database machines are specially designed computers that hold
	the actual databases and run only the DBMS and related
	software.  Connected to one or more mainframes via a
	high-speed channel, database machines are used in large volume
	transaction processing environments.  Database machines have a
	large number of DBMS functions built into the hardware and
	also provide special techniques for accessing the disks
	containing the databases, such as using multiple processors
	concurrently for high-speed searches.

	The world of information is made up of data, text, pictures
	and voice.  Many DBMSs manage text as well as data, but very
	few manage both with equal proficiency.  Throughout the 1990s,
	as storage capacities continue to increase, DBMSs will begin
	to integrate all forms of information.  Eventually, it will be
	common for a database to handle data, text, graphics, voice
	and video with the same ease as today's systems handle data.

	See also: {intelligent database}.

	(1998-10-07)

database manager

	The part of the database management system (DBMS) that handles
	the organisation, storage and retrieval of the data.  A
	database manager may work with traditional programming
	languages, such as COBOL and BASIC, or may work only with its
	proprietary programming language.  The terms database manager
	and database management system are used interchangeably.

	A database manager links two or more files together and is the
	foundation for developing routine business systems.  Contrast
	with file manager, which works with only one file at a time
	and is typically used interactively on a personal computer for
	managing personal, independent files, such as name and address
	lists.

database normalisation

	<database> A series of steps followed to obtain a {database}
	design that allows for efficient access and {storage} of data
	in a {relational database}.  These steps reduce data
	redundancy and the chances of data becoming inconsistent.

	A {table} in a {relational database} is said to be in normal
	form if it satisfies certain {constraints}.  {Codd}'s original
	work defined three such forms but there are now five generally
	accepted steps of normalisation.  The output of the first step
	is called First Normal Form (1NF), the output of the second
	step is Second Normal Form (2NF), etc.

	First Normal Form eliminates {repeating groups} by putting
	each value of a multi-valued attribute into a new row.

	Second Normal Form eliminates {functional dependencies} on a
	{partial key} by putting the fields in a separate table from
	those that are dependent on the whole {key}.

	Third Normal Form eliminates functional dependencies on
	non-key fields by putting them in a separate table.  At this
	stage, all non-key fields are dependent on the key, the whole
	key and nothing but the key.

	Fourth Normal Form separates independent multi-valued facts
	stored in one table into separate tables.

	Fifth Normal Form breaks out data redundancy that is not
	covered by any of the previous normal forms.

	{(http://bkent.net/Doc/simple5.htm)}.

	[What about non-relational databases?]

	(2005-07-28)

database query language

	<database> A language in which users of a {database} can
	(interactively) formulate requests and generate reports.  The
	best known is {SQL}.

	(1998-04-15)

database server

	A stand-alone computer in a local area network that holds and
	manages the database.  It implies that database management
	functions, such as locating the actual record being requested,
	is performed in the server computer.  Contrast with file
	server, which acts as a remote disk drive and requires that
	large parts of the database, for example, entire indexes, be
	transmitted to the user's computer where the real database
	management tasks are performed.

	First-generation personal computer database software was not
	designed for a network; thus, modified versions of the
	software released by the vendors employed the file server
	concept.  Second-generation products, designed for local area
	networks, perform the management tasks in the server where
	they should be done, and consequently are turning the file
	server into a database server.

database transaction

	<database> A set of related changes applied to a {database}.  The
	term typically implies that either all of the changes should be
	applied or, in the event of an error, none of them, i.e. the
	transaction should be {atomic}.  Atomicity is one of the {ACID}
	properties a transaction can have, another is {isolation} -
	preventing interference between processes trying to access the
	database {cocurrently}.  This is usually achieved by some form of
	{locking} - where one process takes exclusive control of a
	database {table} or {row} for the duration of the transaction,
	preventing other processes from accessing the locked data.

	The canonical example of a transaction is transferring money
	between two bank accounts by subtracting it from one and adding it
	to the other.

	Some {relational database management systems} require the user to
	explicitly start a transaction and then either commit it (if all
	the individual steps are successful) or roll it back (if there are
	any errors).

	(2013-06-03)

Data/BASIC

	<language> (Or "Pick BASIC") A {BASIC}-like language with
	{database} capabilities, the main programming language on the
	{Pick OS}.

	["The Data/BASIC Language - A Data Processing Language for
	Non-Professional Programmers", P.C. Dressen, Proc SJCC 36,
	AFIPS, Spring 1970].

	(2001-04-30)

DATABUS

	DATApoint BUSiness Language.

	A language like an interpreted {assembly language}, used for
	custom applications on {Datapoint} computers.

	(1995-01-16)

data bus

	<architecture> The bus (connections between and within the
	{CPU}, memory, and peripherals) used to carry {data}.  Other
	connections are the {address bus} and control signals.

	The width and {clock rate} of the data bus determine its data
	rate (the number of {bytes} per second it can carry), which is
	one of the main factors determining the processing power of a
	computer.  Most current processor designs use a 32-bit bus,
	meaning that 32 bits of data can be transferred at once.  Some
	processors have an internal data bus which is wider than their
	external bus in order to make external connections cheaper
	while retaining some of the benefits in processing power of a
	wider bus.

	See also {data path}.

	(1995-01-16)

datacenter manager

	<job> A person who plans and directs all computer and
	{peripheral} operations, {data entry}, data control scheduling
	and quality control.

	(2004-03-11)

data channel

	<communications> A channel (on a {BRI} or {PRI} line) used to
	carry control information, to set up connections on the
	associated {bearer channels}.  The name wasn't too bad back
	when users were sending voice (not data) over the {bearer
	channels}, but in 1997 it's quite a misnomer.

	(1997-03-10)

DATACODE I

	<language> An early system used on the {Datatron 200} series.

	[Listed in CACM 2(5):16, May 1959].

	(1994-12-06)

Datacom

	A {DBMS} from {Computer Associates International}.

	(1994-12-06)

Data Communication Equipment

	<communications, hardware> (DCE) The devices and connections
	of a communications network that connect the communication
	circuit between the data source and destination (the {Data
	Terminal Equipment} or DTE).  A {modem} is the most common
	kind of DCE.

	Before data can be transmited over a modem, the DTR (Data
	Terminal Ready) signal must be active.  DTR tells the DCE that
	the DTE is ready to transmit and receive data.

	DCE and DTE are usually connected by an {EIA-232} {serial
	line}.  It is necessary to distinguish these two types of
	device because their connectors must be wired differently if a
	"straight-through" cable (pin 1 to pin 1, pin 2 to pin 2 etc.)
	is to be used.  DCE should have a female connector and should
	transmit on pin two and receive on pin three.  It is a curious
	fact that many {modems} are "DTE" according to the original
	standard.

	(1995-02-28)

data communications analyst

	<job> A person who installs, maintains, and troubleshoots
	{data networks}.  A data communications analyst may have
	knowledge of {T1} lines, {TCP/IP}, {fiber optics}, {SNA},
	{frame relay}.  He assists users with problems related to
	connectivity, analyses data flow, configures {modems}, {DSUs},
	{multiplexors}, and {routers}, and uses network tools such as
	{NetView} or {Netspy}.

	(2004-03-11)

Data Communications Equipment

	{Data Communication Equipment}

data compression

	<algorithm> {compression}.  Probably to distinguish it from
	(electronic) {signal compression}.

	(1995-04-02)

Data definition language

	<language, database> (DDL)

	1. A language enabling the structure and instances of a
	{database} to be defined in a human-, and machine-readable
	form.

	{SQL} contains DDL commands that can be used either
	interactively, or within programming language {source code},
	to define databases and their components, e.g. CREATE and
	DROP.

	See also {Data manipulation language} (DML).

	2. A specification language for databases, based on the
	{entity-relationship model}.  It is used in the {Eli}
	{compiler-compiler} to manage type definitions.

	["DDL Reference Manual", ECE Dept U Colorado, 1991].

	(1999-04-26)

data dictionary

	<database> A data structure that stores {metadata}, i.e. data
	about {data}.  The term "data dictionary" has several uses.

	Most generally it is a set of {data descriptions} that
	can be shared by several applications.

	Usually it means a {table} in a {database} that stores the
	names, {field} {types}, length, and other characteristics of
	the fields in the database tables.

	An active data dictionary is automatically updated as changes
	occur in the database.  A passive data dictionary must be
	manually updated.

	In a {DBMS}, this functionality is performed by the {system
	catalog}.  The data dictionary is a more general software
	utility used by designers, users, and administrators for
	{information resource management}.

	The data dictionary may maintain information on system
	hardware, software, documentation, users, and other aspects.

	Data dictionaries are also used to document the database
	design process itself and can accumulate metadata
	ready to feed into the system catalog.

	[Does anybody call them "codebooks"?]

	(2001-04-24)

data dictionary file

	<database> (DDF) A set of files describing the structure of a
	{database} file. DDFs define {database tables} and include
	information about file locations, field layouts and
	indexes. DDFs are the standard method for defining field and
	index characteristics for {Btrieve} files.

	(1997-06-03)

data driven

	A data driven architecture/language performs computations in
	an order dictated by data dependencies.  Two kinds of data
	driven computation are {dataflow} and {demand driven}.

	From about 1970 research in parallel {data driven} computation
	increased.  Centres of excellence emerged at {MIT},
	{CERT-ONERA} in France, {NTT} and {ETL} in Japan and
	{Manchester University}.

Data Driven Machine

	<language> (DDM) A {dataflow} language.

	["The Architecture and System Method of DDM-1: A Recursively
	Structured Data Driven Machine", A. Davis, Proc 5th Ann Symp
	Comp Arch, IEEE 1978].

	(1999-04-26)

Data Encryption Algorithm

	(DEA) An {ANSI} {standard} defined in ANSI X3.92-1981.  It is
	identical to the {Data Encryption Standard} (DES).

	(1994-12-06)

Data Encryption Key

	(DEK) Used for the {encryption} of message text and for the
	computation of message integrity checks (signatures).

	See {cryptography}.

	(1994-12-06)

Data Encryption Standard

	(DES) The {NBS}'s popular, standard {encryption} algorithm.
	It is a {product cipher} that operates on 64-bit blocks of
	data, using a 56-bit key.  It is defined in {FIPS} 46-1 (1988)
	(which supersedes FIPS 46 (1977)).  DES is identical to the
	{ANSI} standard {Data Encryption Algorithm} (DEA) defined in
	ANSI X3.92-1981.

	DES has been implemented in {VLSI}.  {SunOS} provides a des
	command which can make use of DES hardware if fitted.  Neither
	the software nor the hardware are supposed to be distributed
	outside the USA.

	{Unix manual pages}: des(1), des(3), des(4).

	(1994-12-06)

data feed

	<data, architecture> Some process for transferring {data} from
	one system to another in a predetermined form.

	(2009-05-17)

data flow

	<architecture> A data flow architecture or language performs a
	computation when all the {operands} are available.  Data flow is
	one kind of {data driven} architecture, the other is {demand
	driven}.  It is a technique for specifying {fine-grain
	concurrency}, usually in the form of two-dimensional graphs in
	which instructions that are available for concurrent execution are
	written alongside each other while those that must be executed in
	sequence are written one under the other.  Data dependencies
	between instructions are indicated by directed arcs.  Instructions
	do not reference memory since the data dependence arcs allow data
	to be transmitted directly from the producing instruction to the
	consuming one.

	Data flow schemes differ chiefly in the way that they handle
	{re-entrant} code.  Static schemes disallow it, dynamic
	schemes use either "code copying" or "tagging" at every point
	of reentry.

	An example of a data flow architecture is {MIT}'s {VAL}
	machine.

data flow analysis

	<programming> A process to discover the dependencies between
	different data items manipulated by a program.  The order of
	execution in a {data driven} language is determined solely by
	the data dependencies.  For example, given the equations

		1. X = A + B
		2. B = 2 + 2
		3. A = 3 + 4

	a data-flow analysis would find that 2 and 3 must be evaluated
	before 1.  Since there are no data dependencies between 2 and
	3, they may be evaluated in any order, including in parallel.

	This technique is implemented in {hardware} in some
	{pipelined} processors with multiple {functional units}.  It
	allows instructions to be executed as soon as their inputs are
	available, independent of the original program order.

	(1996-05-13)

Data Flow Diagram

	<programming> A graphical notation used to describe how {data}
	flows between {processes} in a system.  Data flow diagrams are
	an important tool of most {structured analysis} techniques.

	{(http://smartdraw.com/resources/centers/software/dfd.htm)}.

	(2003-05-17)

data fork

	{Macintosh file system}

data frame

	{activation record}

Data General

	<company> A US computer manufacturer.  Responsible for the
	{Nova} {minicomputer}.

	Quarterly sales $284M, profits -$12M (Aug 1994).

	(1994-09-26)

Data General mN601

	{Data General MicroNova 601}

data glove

	<hardware, virtual reality> An input device for {virtual
	reality} in the form of a glove which measures the movements
	of the wearer's fingers and transmits them to the computer.
	Sophisticated data gloves also measure movement of the wrist
	and elbow.  A data glove may also contain control buttons or
	act as an output device, e.g. vibrating under control of the
	computer.  The user usually sees a virtual image of the
	data glove and can point or grip and push objects.

	Examples are {Fifth Dimension Technologies} (5DT)'s {5th
	Glove}, and {Virtual Technologies}' {CyberGlove}.  A cheaper
	alternative is {InWorld VR}'s {CyberWand}.

	["Full freedom plus input", PC Magazine, Mar 14 1995,
	pp. 168-190].

	[Inventor?]

	(1995-04-04)

datagram

	A self-contained, independent entity of data carrying
	sufficient information to be {route}d from the source to the
	destination computer without reliance on earlier exchanges
	between this source and destination computer and the
	transporting {network}.

	See also {connectionless}, {frame}, {packet}.

data hierarchy

	The system of data objects which provide the {methods} for
	{information} storage and retrieval.  Broadly, a data
	hierarchy may be considered to be either natural, which arises
	from the alphabet or syntax of the language in which the
	information is expressed, or machine, which reflects the
	facilities of the computer, both hardware and software.

	A natural data hierarchy might consist of {bits},
	{characters}, words, phrases, sentences, paragraphs, and
	chapters.  One might use components bound to an application,
	such as field, record, and file, and these would ordinarily be
	further specified by having {data descriptors} such as name
	field, address field, etc.  On the other hand, a machine or
	software system might use {bit}, {byte}, {word}, {block},
	{partition}, {channel}, and {port}.

	Programming languages often provide {types} or {objects} which
	can create data hierarchies of arbitrary complexity, thus
	allowing software system designers to model language
	structures described by the linguist to greater or lesser
	degree.

	The distinction between the natural form of data and the
	facilities provided by the machine may be obscure, because
	users force their needs into the molds provided, and
	programmers change machine designs.  As an example, the
	natural data type "character" and the machine type "byte" are
	often used interchangeably, because the latter has evolved to
	meet the need of representing the former.

	(1995-11-03)

data integrity

	<data> The absence of unintended changes or errors in some
	data.  Integrity implies that the data is an exact copy of
	some original version, e.g. that it has not been corrupted in
	the process of being written to, and read back from, a {hard
	disk} or during transmission via some communications channel.

	Integrity may further imply that the {information} represented
	by the data has been {validated}, i.e. verified to conform to
	certain constraints, e.g. a date's year, month and day parts
	are within the appropriate ranges and the date actually
	exists.

	(2009-06-03)

Data Interchange Standards Association

	<standard> (DISA) A not-for-profit corporation that acts as
	the secretariat for {ANSI}'s {EDI} standards committee, ASC
	X12 that works on {ANSI X12}.  DISA manages ASC X12's
	membership, balloting, standards development and maintenance,
	publications, and communications with ANSI.

	(1999-09-18)

Data Jack

	<hardware> A wall-mounted or desk-mounted connector
	(frequently a wide telephone-style 8-pin {RJ-45}) for
	connecting to data cabling in a building.

	(1997-01-07)

Datakit

	<networking> A {circuit-switched} digital network, similar to
	{X.25}.  Datakit supports {host-to-host} connections and
	{EIA-232} connections for {terminals}, {printers}, and {hosts}.

	Most of {Bell Laboratories} is {trunk}ed together on Datakit.
	On top of DK transport service, people run {UUCP} for
	{electronic mail} and {dkcu} for {remote login}.

	ISN is the version of Datakit supported by {AT&T} Information
	Systems.  Bell Laboratories in Holmdel, New Jersey, uses ISN
	for internal data communication.

	{(http://fc.net:80/phrack/files/p18/p18-9.html)}.

	["Towards a universal data transport system", A. G. Fraser,
	IEEE Journal on Selected Areas in Communications, SAC-1(5)
	pp. 803-16, 1983].

	(1996-10-20)

Dataless Management Services

	<operating system> (DMS)

	{(http://cs.arizona.edu/computer.help/policy/DIGITAL_unix/AA-PS3LE-TE_html/sharing10.html)}.

	(2005-09-15)

dataless management utility

	<operating system> (DMU) A {Dataless Management Services}
	(DMS) utility for managing the sharing of installed operating
	software between DMS servers and clients.  It allows users to
	install, configure, show and delete DMS environments and add,
	list, modify and remove DMS clients.

	(2005-09-15)

Data Link Connection Identifier

	<networking> (DLCI) A channel number which is attached to
	{data frames} to tell a {Frame Relay} network how to route the
	data.  In Frame Relay, multiple logical channels are
	{multiplexed} over a single physical channel.  The DLCI says
	which of these logical channels a particular data frame
	belongs to.

	{(http://etinc.com/frmain.htm#whatsadlci)}.

	(2000-02-13)

data link layer

	<networking> Layer two, the second lowest layer in the {OSI}
	seven layer model.  The data link layer splits data into
	{frames} (see {fragmentation}) for sending on the {physical
	layer} and receives acknowledgement frames.  It performs error
	checking and re-transmits frames not received correctly.  It
	provides an error-free virtual channel to the {network layer}.
	The data link layer is split into an upper sublayer, {Logical
	Link Control} (LLC), and a lower sublayer, {Media Access
	Control} (MAC).

	Example {protocols} at this layer are {ABP}, {Go Back N},
	{SRP}.

	(1995-02-14)

data link level

	{data link layer}

Data Link Provider Interface

	<networking> (DLPI) The interface that a {network driver}
	presents to the (higher level) {logical link layer} for
	driving the network at the {datagram} level in a {Unix}
	{STREAMS} environment and possibly elsewhere.

	DLPI corresponds to {ISO 8802}/2 ({LLC}) which covers both
	{connection-oriented} and {connectionless} {protocols}.

	[Is this correct?  Better explanation?]

	(1996-01-29)

Data Link Switching

	<networking> (DLSw) A standard for transporting {IBM} {Systems
	Network Architecture} (SNA) and {network basic input/output
	system} (NetBIOS) traffic over an {Internet protocol} network.

	Initially, in 1992, DLSw was proprietary to IBM.  It was
	submitted to the {IETF} as {RFC 1434} in 1993, later updated
	by {RFC 1795}.

	{(http://www.cisco.com/univercd/cc/td/doc/cisintwk/ito_doc/dlsw.htm)}.

	(2008-01-11)

data logger

	{data logging}

data logging

	<data> (data acquisition) Storing a series of measurements
	over time, usually from a sensor that converts a physical
	quantity such as temperature, pressure, relative humidity,
	light, resistance, current, power, speed, vibration into a
	voltage that is then converted by a {digital to analog
	converter} (DAC) into a binary number.  Data logging hardware
	may have several DACs for multiple simultaneous measurements.
	The hardware usually connects to a {parallel port}, {serial
	port} or {USB} port on a {PC}.

	(2004-11-15)

Data Management Language

	<language> (DML)

	1. Any language for manipulating data or files,
	e.g. {IBM}'s {Distributed Data Management} (DDM).

	2. An early {ALGOL}-like language with lists and graphics,
	that ran on the {Honeywell 635}.

	["DML: A Data Management Language", D.W. Bray et al, GE,
	Syracuse NY].

	(1999-06-07)

Data Manipulation Language

	<language, database> (DML, or {Data Management Language}) A
	language for the manipulation of data in a {database} by
	applications and/or directly by end-users.

	{SQL} contains DML commands such as INSERT, UPDATE, and
	DELETE.

	See also {Data Definition Language} (DDL).

	(1999-04-26)

data mart

	<database> A type of {data warehouse} designed primarily to
	address a specific function or department's needs, as opposed
	to a data warehouse which is traditionally meant to address
	the needs of the organisation from an enterprise perspective.
	In addition, a data mart often uses {aggregation} or
	summarisation of the data to enhance query performance.
	However, it is important to maintain the ability to access the
	underlying base data to enable {drill-down analysis} as
	necessary.

	(1998-04-24)

Datamatic Corporation

	{Honeywell}

Datamation

	/day"t*-may"sh*n/ A magazine that many hackers assume all
	{suits} read.  Used to question an unbelieved quote, as in
	"Did you read that in "Datamation?""  It used to publish
	something hackishly funny every once in a while, like the
	original paper on {COME FROM} in 1973, and Ed Post's "Real
	Programmers Don't Use Pascal" ten years later, but it has
	since become much more exclusively {suit}-oriented and boring.

	[{Jargon File}]

data mining

	<database> Analysis of data in a {database} using tools which
	look for trends or anomalies without knowledge of the meaning
	of the data.  Data mining was invented by {IBM} who hold some
	related patents.

	Data mining may well be done on a {data warehouse}.

	{ShowCase STRATEGY (http://showcasecorp.com/)} is an
	example of a data mining tool.

	(2001-02-08)

